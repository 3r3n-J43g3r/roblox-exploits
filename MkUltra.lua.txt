local _690 = string.char;
local _691 = string.byte;
local _692 = string.sub;
local _693 = bit32 or bit;
local _694 = _693.bxor;
local _695 = table.concat;
local _696 = table.insert;
local function _697(_6924, _6925)
	local _6926 = {};
	for _6941 = 1, #_6924 do
		_696(_6926, _690(_694(_691(_692(_6924, _6941, _6941 + 1)), _691(_692(_6925, 1 + (_6941 % #_6925), 1 + (_6941 % #_6925) + 1))) % 256));
	end
	return _695(_6926);
end
local _698 = tonumber;
local _699 = string.byte;
local _6910 = string.char;
local _6911 = string.sub;
local _6912 = string.gsub;
local _6913 = string.rep;
local _6914 = table.concat;
local _6915 = table.insert;
local _6916 = math.ldexp;
local _6917 = getfen_69 or function()
	return _EN_69;
end;
local _6918 = setmetatable;
local _6919 = pcall;
local _6920 = select;
local _6921 = unpack or table.unpack;
local _6922 = tonumber;
local function _6923(_6927, _6928, ...)
	local _6929 = 1;
	local _6930;
	_6927 = _6912(_6911(_6927, 5), _697("\112\54", "\84\94\24\222\200\118\41\121"), function(_6942)
		if (_699(_6942, 2) == 79) then
			_6930 = _698(_6911(_6942, 1, 1));
			return "";
		else
			local _69103 = 0;
			local _69104;
			while true do
				if (0 == _69103) then
					_69104 = _6910(_698(_6942, 16));
					if _6930 then
						local _69121 = _6913(_69104, _6930);
						_6930 = nil;
						return _69121;
					else
						return _69104;
					end
					break;
				end
			end
		end
	end);
	local function _6931(_6943, _6944, _6945)
		if _6945 then
			local _69105 = (_6943 / (2 ^ (_6944 - 1))) % (2 ^ (((_6945 - 1) - (_6944 - 1)) + 1));
			return _69105 - (_69105 % 1);
		else
			local _69106 = 0;
			local _69107;
			while true do
				if (_69106 == 0) then
					_69107 = 2 ^ (_6944 - 1);
					return (((_6943 % (_69107 + _69107)) >= _69107) and 1) or 0;
				end
			end
		end
	end
	local function _6932()
		local _6946 = 0;
		local _6947;
		while true do
			if (_6946 == 0) then
				_6947 = _699(_6927, _6929, _6929);
				_6929 = _6929 + 1;
				_6946 = 1;
			end
			if (_6946 == 1) then
				return _6947;
			end
		end
	end
	local function _6933()
		local _6948 = 0;
		local _6949;
		local _6950;
		while true do
			if (_6948 == 1) then
				return (_6950 * 256) + _6949;
			end
			if (0 == _6948) then
				_6949, _6950 = _699(_6927, _6929, _6929 + 2);
				_6929 = _6929 + 2;
				_6948 = 1;
			end
		end
	end
	local function _6934()
		local _6951, _6952, _6953, _6954 = _699(_6927, _6929, _6929 + 3);
		_6929 = _6929 + 4;
		return (_6954 * 16777216) + (_6953 * 65536) + (_6952 * 256) + _6951;
	end
	local function _6935()
		local _6955 = 0;
		local _6956;
		local _6957;
		local _6958;
		local _6959;
		local _6960;
		local _6961;
		while true do
			if (2 == _6955) then
				_6960 = _6931(_6957, 21, 31);
				_6961 = ((_6931(_6957, 32) == 1) and -1) or 1;
				_6955 = 3;
			end
			if (_6955 == 1) then
				_6958 = 1;
				_6959 = (_6931(_6957, 1, 20) * (2 ^ 32)) + _6956;
				_6955 = 2;
			end
			if (_6955 == 0) then
				_6956 = _6934();
				_6957 = _6934();
				_6955 = 1;
			end
			if (_6955 == 3) then
				if (_6960 == 0) then
					if (_6959 == 0) then
						return _6961 * 0;
					else
						_6960 = 1;
						_6958 = 0;
					end
				elseif (_6960 == 2047) then
					return ((_6959 == 0) and (_6961 * ((2 - 1) / (0 - 0)))) or (_6961 * NaN);
				end
				return _6916(_6961, _6960 - 1023) * (_6958 + (_6959 / ((3 - 1) ^ 52)));
			end
		end
	end
	local function _6936(_6962)
		local _6963;
		if not _6962 then
			local _69108 = 0;
			while true do
				if (_69108 == 0) then
					_6962 = _6934();
					if (_6962 == 0) then
						return "";
					end
					break;
				end
			end
		end
		_6963 = _6911(_6927, _6929, (_6929 + _6962) - 1);
		_6929 = _6929 + _6962;
		local _6964 = {};
		for _6978 = 2 - 1, #_6963 do
			_6964[_6978] = _6910(_699(_6911(_6963, _6978, _6978)));
		end
		return _6914(_6964);
	end
	local _6937 = _6934;
	local function _6938(...)
		return {...}, _6920("#", ...);
	end
	local function _6939()
		local _6965 = {};
		local _6966 = {};
		local _6967 = {};
		local _6968 = {_6965,_6966,nil,_6967};
		local _6969 = _6934();
		local _6970 = {};
		for _6980 = 1, _6969 do
			local _6981 = 0;
			local _6982;
			local _6983;
			while true do
				if (0 == _6981) then
					_6982 = _6932();
					_6983 = nil;
					_6981 = 1;
				end
				if (_6981 == 1) then
					if (_6982 == 1) then
						_6983 = _6932() ~= (931 - (857 + 74));
					elseif (_6982 == 2) then
						_6983 = _6935();
					elseif (_6982 == 3) then
						_6983 = _6936();
					end
					_6970[_6980] = _6983;
					break;
				end
			end
		end
		_6968[3] = _6932();
		for _6984 = 1, _6934() do
			local _6985 = 0;
			local _6986;
			while true do
				if (_6985 == 0) then
					_6986 = _6932();
					if (_6931(_6986, 1, 569 - (367 + 201)) == 0) then
						local _69117 = _6931(_6986, 2, 3);
						local _69118 = _6931(_6986, 4, 6);
						local _69119 = {_6933(),_6933(),nil,nil};
						if (_69117 == 0) then
							_69119[3] = _6933();
							_69119[931 - (214 + 713)] = _6933();
						elseif (_69117 == (1 + 0)) then
							_69119[3] = _6934();
						elseif (_69117 == 2) then
							_69119[3] = _6934() - (2 ^ 16);
						elseif (_69117 == 3) then
							local _69132 = 0;
							while true do
								if (_69132 == 0) then
									_69119[3] = _6934() - (2 ^ 16);
									_69119[1 + 3] = _6933();
									break;
								end
							end
						end
						if (_6931(_69118, 1, 1) == 1) then
							_69119[2] = _6970[_69119[2]];
						end
						if (_6931(_69118, 2, 2) == 1) then
							_69119[3] = _6970[_69119[3]];
						end
						if (_6931(_69118, 3, 880 - (282 + 595)) == 1) then
							_69119[4] = _6970[_69119[4]];
						end
						_6965[_6984] = _69119;
					end
					break;
				end
			end
		end
		for _6987 = 1, _6934() do
			_6966[_6987 - 1] = _6939();
		end
		return _6968;
	end
	local function _6940(_6972, _6973, _6974)
		local _6975 = _6972[1638 - (1523 + 114)];
		local _6976 = _6972[2];
		local _6977 = _6972[3];
		return function(...)
			local _6989 = _6975;
			local _6990 = _6976;
			local _6991 = _6977;
			local _6992 = _6938;
			local _6993 = 1;
			local _6994 = -(1 + 0);
			local _6995 = {};
			local _6996 = {...};
			local _6997 = _6920("#", ...) - 1;
			local _6998 = {};
			local _6999 = {};
			for _69109 = 0, _6997 do
				if (_69109 >= _6991) then
					_6995[_69109 - _6991] = _6996[_69109 + 1];
				else
					_6999[_69109] = _6996[_69109 + 1];
				end
			end
			local _69100 = (_6997 - _6991) + 1;
			local _69101;
			local _69102;
			while true do
				_69101 = _6989[_6993];
				_69102 = _69101[1];
				if (_69102 <= 111) then
					if (_69102 <= (77 - 22)) then
						if (_69102 <= 27) then
							if (_69102 <= 13) then
								if (_69102 <= (1071 - (68 + 997))) then
									if (_69102 <= 2) then
										if (_69102 <= 0) then
											local _69133 = 0;
											local _69134;
											local _69135;
											while true do
												if (_69133 == 6) then
													_6999[_69101[2]] = _69101[3];
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_6993 = _69101[3];
													break;
												end
												if (_69133 == 0) then
													_69134 = nil;
													_69135 = nil;
													_6974[_69101[3]] = _6999[_69101[2]];
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_6999[_69101[2]] = _6973[_69101[3]];
													_69133 = 1;
												end
												if (_69133 == 2) then
													_6993 = _6993 + 1 + 0;
													_69101 = _6989[_6993];
													_69135 = _69101[2];
													_69134 = _6999[_69101[3]];
													_6999[_69135 + 1] = _69134;
													_6999[_69135] = _69134[_69101[4]];
													_69133 = 3;
												end
												if (_69133 == 5) then
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_69135 = _69101[2];
													_6999[_69135](_6921(_6999, _69135 + 1, _69101[183 - (67 + 113)]));
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_69133 = 6;
												end
												if (_69133 == 3) then
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_6999[_69101[2]] = _6974[_69101[3]];
													_6993 = _6993 + (958 - (892 + 65));
													_69101 = _6989[_6993];
													_6999[_69101[4 - 2]] = _6999[_69101[3]][_69101[4]];
													_69133 = 4;
												end
												if (_69133 == 1) then
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_6999[_69101[1272 - (226 + 1044)]] = _6999[_69101[3]][_69101[4]];
													_6993 = _6993 + (4 - 3);
													_69101 = _6989[_6993];
													_6999[_69101[2]] = _6999[_69101[120 - (32 + 85)]][_69101[4 + 0]];
													_69133 = 2;
												end
												if (_69133 == 4) then
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_6999[_69101[2]] = _6999[_69101[3]][_69101[6 - 2]];
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_6999[_69101[3 - 1]] = _69101[3] ~= (350 - (87 + 263));
													_69133 = 5;
												end
											end
										elseif (_69102 > 1) then
											local _69436 = 0;
											local _69437;
											local _69438;
											local _69439;
											local _69440;
											while true do
												if (_69436 == 5) then
													_6999[_69440] = _6999[_69440](_6921(_6999, _69440 + 1, _6994));
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_6999[_69101[2]] = _6973[_69101[3]];
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_6999[_69101[2]] = _6973[_69101[3]];
													_69436 = 6;
												end
												if (_69436 == 3) then
													_6999[_69101[2]] = _6999[_69101[11 - 8]];
													_6993 = _6993 + (953 - (802 + 150));
													_69101 = _6989[_6993];
													_6999[_69101[2]] = _6999[_69101[3]] + _69101[10 - 6];
													_6993 = _6993 + (1 - 0);
													_69101 = _6989[_6993];
													_69440 = _69101[2];
													_69436 = 4;
												end
												if (_69436 == 2) then
													_69101 = _6989[_6993];
													_6999[_69101[2]] = _6973[_69101[3]];
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_6999[_69101[2]] = _6999[_69101[3]];
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_69436 = 3;
												end
												if (_69436 == 7) then
													_69101 = _6989[_6993];
													_6999[_69101[2]] = _6999[_69101[3]] % _6999[_69101[4]];
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_6999[_69101[2]] = _69101[8 - 5] + _6999[_69101[4]];
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_69436 = 8;
												end
												if (_69436 == 4) then
													_69438, _69439 = _6992(_6999[_69440](_6921(_6999, _69440 + 1, _69101[3])));
													_6994 = (_69439 + _69440) - 1;
													_69437 = 0;
													for _694833 = _69440, _6994 do
														local _694834 = 0;
														while true do
															if (_694834 == 0) then
																_69437 = _69437 + 1;
																_6999[_694833] = _69438[_69437];
																break;
															end
														end
													end
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_69440 = _69101[2];
													_69436 = 5;
												end
												if (_69436 == 11) then
													_6994 = (_69439 + _69440) - 1;
													_69437 = 0;
													for _694835 = _69440, _6994 do
														_69437 = _69437 + 1;
														_6999[_694835] = _69438[_69437];
													end
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_69440 = _69101[2];
													_6999[_69440] = _6999[_69440](_6921(_6999, _69440 + 1, _6994));
													_69436 = 12;
												end
												if (_69436 == 0) then
													_69437 = nil;
													_69438, _69439 = nil;
													_69440 = nil;
													_6999[_69101[2]] = _6999[_69101[3]];
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_6999[_69101[2]] = _6973[_69101[3]];
													_69436 = 1;
												end
												if (_69436 == 13) then
													_6994 = (_69439 + _69440) - (1 - 0);
													_69437 = 0 + 0;
													for _694838 = _69440, _6994 do
														local _694839 = 0;
														while true do
															if (0 == _694839) then
																_69437 = _69437 + 1;
																_6999[_694838] = _69438[_69437];
																break;
															end
														end
													end
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_69440 = _69101[2];
													_6999[_69440](_6921(_6999, _69440 + (792 - (368 + 423)), _6994));
													break;
												end
												if (1 == _69436) then
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_6999[_69101[2 + 0]] = _6973[_69101[3]];
													_6993 = _6993 + (2 - 1);
													_69101 = _6989[_6993];
													_6999[_69101[2]] = _6973[_69101[3]];
													_6993 = _6993 + 1 + 0;
													_69436 = 2;
												end
												if (_69436 == 9) then
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_6999[_69101[2]] = _6999[_69101[3]] + _69101[4];
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_69440 = _69101[2];
													_69438, _69439 = _6992(_6999[_69440](_6921(_6999, _69440 + (2 - 1), _69101[3])));
													_69436 = 10;
												end
												if (_69436 == 12) then
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_6999[_69101[2]] = _6999[_69101[3]] % _69101[4];
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_69440 = _69101[2];
													_69438, _69439 = _6992(_6999[_69440](_6999[_69440 + 1 + 0]));
													_69436 = 13;
												end
												if (_69436 == 6) then
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_6999[_69101[2]] = _6999[_69101[3]];
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_6999[_69101[2]] = #_6999[_69101[3 + 0]];
													_6993 = _6993 + (998 - (915 + 82));
													_69436 = 7;
												end
												if (_69436 == 8) then
													_6999[_69101[2]] = #_6999[_69101[3]];
													_6993 = _6993 + 1 + 0;
													_69101 = _6989[_6993];
													_6999[_69101[2]] = _6999[_69101[3]] % _6999[_69101[4 - 0]];
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_6999[_69101[2]] = _69101[3] + _6999[_69101[1191 - (1069 + 118)]];
													_69436 = 9;
												end
												if (_69436 == 10) then
													_6994 = (_69439 + _69440) - 1;
													_69437 = 0 - 0;
													for _694840 = _69440, _6994 do
														local _694841 = 0;
														while true do
															if (_694841 == 0) then
																_69437 = _69437 + 1;
																_6999[_694840] = _69438[_69437];
																break;
															end
														end
													end
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_69440 = _69101[2];
													_69438, _69439 = _6992(_6999[_69440](_6921(_6999, _69440 + 1, _6994)));
													_69436 = 11;
												end
											end
										else
											local _69441;
											_6999[_69101[2]] = _6999[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6974[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69441 = _69101[2];
											_6999[_69441] = _6999[_69441]();
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[9 - 6];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6993 = _69101[3];
										end
									elseif (_69102 <= 4) then
										if (_69102 == 3) then
											local _69450 = 0;
											local _69451;
											local _69452;
											local _69453;
											local _69454;
											while true do
												if (_69450 == 2) then
													_69101 = _6989[_6993];
													_6999[_69101[6 - 4]] = _69101[2 + 1];
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_69450 = 3;
												end
												if (_69450 == 1) then
													_6993 = _6993 + (3 - 2);
													_69101 = _6989[_6993];
													_6999[_69101[2]] = _69101[445 - (416 + 26)];
													_6993 = _6993 + 1;
													_69450 = 2;
												end
												if (5 == _69450) then
													_6999[_69454] = _6999[_69454](_6921(_6999, _69454 + 1, _6994));
													_6993 = _6993 + (439 - (145 + 293));
													_69101 = _6989[_6993];
													if _6999[_69101[2]] then
														_6993 = _6993 + 1;
													else
														_6993 = _69101[3];
													end
													break;
												end
												if (_69450 == 3) then
													_69454 = _69101[2];
													_69452, _69453 = _6992(_6999[_69454](_6921(_6999, _69454 + 1, _69101[3])));
													_6994 = (_69453 + _69454) - (1 - 0);
													_69451 = 0;
													_69450 = 4;
												end
												if (_69450 == 0) then
													_69451 = nil;
													_69452, _69453 = nil;
													_69454 = nil;
													_6999[_69101[20 - (10 + 8)]] = _6973[_69101[3]];
													_69450 = 1;
												end
												if (_69450 == 4) then
													for _694842 = _69454, _6994 do
														_69451 = _69451 + 1;
														_6999[_694842] = _69452[_69451];
													end
													_6993 = _6993 + 1;
													_69101 = _6989[_6993];
													_69454 = _69101[2];
													_69450 = 5;
												end
											end
										else
											local _69455;
											local _69456, _69457;
											local _69458;
											local _69459;
											_69459 = _69101[2];
											_6999[_69459](_6921(_6999, _69459 + 1, _69101[433 - (44 + 386)]));
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6974[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69459 = _69101[2];
											_69458 = _6999[_69101[3]];
											_6999[_69459 + (1487 - (998 + 488))] = _69458;
											_6999[_69459] = _69458[_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6973[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[1 + 1]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69459 = _69101[2];
											_69456, _69457 = _6992(_6999[_69459](_6921(_6999, _69459 + 1, _69101[3])));
											_6994 = (_69457 + _69459) - 1;
											_69455 = 0;
											for _691598 = _69459, _6994 do
												_69455 = _69455 + 1;
												_6999[_691598] = _69456[_69455];
											end
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69459 = _69101[2];
											_6999[_69459] = _6999[_69459](_6921(_6999, _69459 + 1, _6994));
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69459 = _69101[2 + 0];
											_69458 = _6999[_69101[3]];
											_6999[_69459 + (773 - (201 + 571))] = _69458;
											_6999[_69459] = _69458[_69101[4]];
										end
									elseif (_69102 == 5) then
										local _69474;
										_6999[_69101[1140 - (116 + 1022)]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[12 - 9]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3] ~= 0;
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3] ~= 0;
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = {};
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[3]] = _69101[4];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[3]] = _69101[4];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[3]] = _69101[4];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[3]] = _69101[4];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[7 - 5]] = {};
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[3]] = _69101[14 - 10];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[3]] = _69101[4];
										_6993 = _6993 + (860 - (814 + 45));
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[3]] = _69101[4];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[4 - 2]][_69101[3]] = _69101[4];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[1 + 2]];
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6973[_69101[888 - (261 + 624)]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + (1 - 0);
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69474 = _69101[2];
										_6999[_69474] = _6999[_69474](_6921(_6999, _69474 + 1, _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]];
										_6993 = _6993 + (1081 - (1020 + 60));
										_69101 = _6989[_6993];
										_69474 = _69101[2];
										_6999[_69474] = _6999[_69474](_6921(_6999, _69474 + 1, _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[3]] = _69101[4];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + (1424 - (630 + 793));
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[13 - 9]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + (4 - 3);
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[2 + 1];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69474 = _69101[2];
										_6999[_69474] = _6999[_69474](_6921(_6999, _69474 + 1, _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[6 - 4]][_69101[3]] = _6999[_69101[4]];
										_6993 = _6993 + (1748 - (760 + 987));
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[1916 - (1789 + 124)]] = _6999[_69101[4]];
										_6993 = _6993 + (767 - (745 + 21));
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6973[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + (2 - 1);
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69474 = _69101[7 - 5];
										_6999[_69474] = _6999[_69474](_6921(_6999, _69474 + 1, _69101[3]));
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69474 = _69101[2];
										_6999[_69474] = _6999[_69474](_6921(_6999, _69474 + 1 + 0, _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[1058 - (87 + 968)]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[8 - 6]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69474 = _69101[2 + 0];
										_6999[_69474] = _6999[_69474](_6921(_6999, _69474 + 1, _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[4 - 2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + (1414 - (447 + 966));
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69474 = _69101[2];
										_6999[_69474] = _6999[_69474](_6921(_6999, _69474 + 1, _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[3]] = _6999[_69101[10 - 6]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[1820 - (1703 + 114)]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										if (_6999[_69101[2]] == _69101[705 - (376 + 325)]) then
											_6993 = _6993 + 1;
										else
											_6993 = _69101[3];
										end
									else
										local _69505 = 0;
										local _69506;
										local _69507;
										while true do
											if (_69505 == 0) then
												_69506 = _69101[3];
												_69507 = _6999[_69506];
												_69505 = 1;
											end
											if (_69505 == 1) then
												for _694845 = _69506 + 1, _69101[4] do
													_69507 = _69507 .. _6999[_694845];
												end
												_6999[_69101[2]] = _69507;
												break;
											end
										end
									end
								elseif (_69102 <= 9) then
									if (_69102 <= 7) then
										local _69136;
										_6999[_69101[2 - 0]] = _69101[3];
										_6993 = _6993 + (2 - 1);
										_69101 = _6989[_6993];
										_69136 = _69101[2];
										_6999[_69136](_6999[_69136 + 1]);
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[3]] = _69101[4];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
									elseif (_69102 > 8) then
										local _69508;
										local _69509, _69510;
										local _69511;
										_6999[_69101[2]] = _6973[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + (2 - 1);
										_69101 = _6989[_6993];
										_69511 = _69101[2];
										_69509, _69510 = _6992(_6999[_69511](_6921(_6999, _69511 + 1, _69101[3])));
										_6994 = (_69510 + _69511) - 1;
										_69508 = 0;
										for _691601 = _69511, _6994 do
											local _691602 = 0;
											while true do
												if (_691602 == 0) then
													_69508 = _69508 + 1;
													_6999[_691601] = _69509[_69508];
													break;
												end
											end
										end
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69511 = _69101[2];
										_6999[_69511] = _6999[_69511](_6921(_6999, _69511 + (15 - (9 + 5)), _6994));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										if _6999[_69101[2]] then
											_6993 = _6993 + 1;
										else
											_6993 = _69101[3];
										end
									else
										_6999[_69101[2]] = _69101[379 - (85 + 291)];
									end
								elseif (_69102 <= 11) then
									if (_69102 > 10) then
										local _69520;
										local _69521;
										_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + (1266 - (243 + 1022));
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[14 - 10]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69521 = _69101[2];
										_69520 = _6999[_69101[3]];
										_6999[_69521 + 1] = _69520;
										_6999[_69521] = _69520[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6973[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2 + 0]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69521 = _69101[2];
										_6999[_69521] = _6999[_69521](_6921(_6999, _69521 + (1181 - (1123 + 57)), _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = {};
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6973[_69101[3 + 0]];
										_6993 = _6993 + (255 - (163 + 91));
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[1933 - (1869 + 61)];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69521 = _69101[2];
										_6999[_69521] = _6999[_69521](_6921(_6999, _69521 + 1, _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[1 + 1]] = _6973[_69101[3]];
										_6993 = _6993 + (3 - 2);
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69521 = _69101[2];
										_6999[_69521] = _6999[_69521](_6921(_6999, _69521 + 1, _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_6999[_69101[3]]] = _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6973[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69521 = _69101[2];
										_6999[_69521] = _6999[_69521](_6921(_6999, _69521 + 1, _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + (1 - 0);
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69521 = _69101[2];
										_6999[_69521] = _6999[_69521](_6921(_6999, _69521 + 1, _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_6999[_69101[1 + 2]]] = _6999[_69101[5 - 1]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69521 = _69101[2];
										_6999[_69521](_6921(_6999, _69521 + 1, _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6993 = _69101[3];
									else
										local _69543 = 0;
										local _69544;
										while true do
											if (_69543 == 6) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6973[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69543 = 7;
											end
											if (_69543 == 3) then
												_6999[_69544] = _6999[_69544](_6921(_6999, _69544 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6973[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_69543 = 4;
											end
											if (_69543 == 0) then
												_69544 = nil;
												_6999[_69101[2]] = _6973[_69101[3]];
												_6993 = _6993 + 1 + 0;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6973[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69543 = 1;
											end
											if (_69543 == 7) then
												_69101 = _6989[_6993];
												_69544 = _69101[2];
												_6999[_69544] = _6999[_69544](_6921(_6999, _69544 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_6999[_69101[3]]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[4 - 2]] = _6973[_69101[3]];
												_6993 = _6993 + 1;
												_69543 = 8;
											end
											if (_69543 == 12) then
												_6999[_69101[2]][_6999[_69101[3]]] = _69101[1 + 3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69544 = _69101[2];
												_6999[_69544](_6921(_6999, _69544 + 1, _69101[3]));
												break;
											end
											if (_69543 == 11) then
												_6999[_69101[376 - (123 + 251)]] = _69101[3];
												_6993 = _6993 + (4 - 3);
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[701 - (208 + 490)];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69544 = _69101[2];
												_6999[_69544] = _6999[_69544](_6921(_6999, _69544 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69543 = 12;
											end
											if (_69543 == 9) then
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6973[_69101[1265 - (1091 + 171)]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69543 = 10;
											end
											if (_69543 == 10) then
												_69544 = _69101[2];
												_6999[_69544] = _6999[_69544](_6921(_6999, _69544 + 1, _69101[1 + 2]));
												_6993 = _6993 + (3 - 2);
												_69101 = _6989[_6993];
												_6999[_69101[2]][_6999[_69101[9 - 6]]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6973[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69543 = 11;
											end
											if (_69543 == 1) then
												_6999[_69101[1476 - (1329 + 145)]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69544 = _69101[973 - (140 + 831)];
												_6999[_69544] = _6999[_69544](_6921(_6999, _69544 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = {};
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69543 = 2;
											end
											if (4 == _69543) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69544 = _69101[440 - (262 + 176)];
												_6999[_69544] = _6999[_69544](_6921(_6999, _69544 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_6999[_69101[1724 - (345 + 1376)]]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6973[_69101[3]];
												_69543 = 5;
											end
											if (_69543 == 2) then
												_6999[_69101[1852 - (1409 + 441)]] = _6973[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[721 - (15 + 703)];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69544 = _69101[1 + 1];
												_69543 = 3;
											end
											if (_69543 == 8) then
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[1208 - (696 + 510)]] = _69101[5 - 2];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69544 = _69101[2];
												_6999[_69544] = _6999[_69544](_6921(_6999, _69544 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69543 = 9;
											end
											if (5 == _69543) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[691 - (198 + 490)];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[8 - 6]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69544 = _69101[2];
												_6999[_69544] = _6999[_69544](_6921(_6999, _69544 + 1, _69101[3]));
												_69543 = 6;
											end
										end
									end
								elseif (_69102 == (6 + 6)) then
									local _69545 = 0;
									local _69546;
									while true do
										if (_69545 == 0) then
											_69546 = nil;
											_6999[_69101[2]] = _6973[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69545 = 1;
										end
										if (_69545 == 2) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69546 = _69101[838 - (660 + 176)];
											_6999[_69546] = _6999[_69546](_6921(_6999, _69546 + 1, _69101[1 + 2]));
											_69545 = 3;
										end
										if (_69545 == 1) then
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_69545 = 2;
										end
										if (_69545 == 3) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											if (_6999[_69101[2]] == _6999[_69101[4]]) then
												_6993 = _6993 + 1;
											else
												_6993 = _69101[3];
											end
											break;
										end
									end
								else
									local _69547;
									local _69548;
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69548 = _69101[2];
									_69547 = _6999[_69101[3]];
									_6999[_69548 + (203 - (14 + 188))] = _69547;
									_6999[_69548] = _69547[_69101[679 - (534 + 141)]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69548 = _69101[2];
									_6999[_69548](_6921(_6999, _69548 + 1, _69101[3]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									for _691603 = _69101[1 + 1], _69101[3] do
										_6999[_691603] = nil;
									end
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69548 = _69101[2];
									_69547 = _6999[_69101[3]];
									_6999[_69548 + 1] = _69547;
									_6999[_69548] = _69547[_69101[4]];
								end
							elseif (_69102 <= 20) then
								if (_69102 <= 16) then
									if (_69102 <= 14) then
										local _69146;
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2 + 0]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69146 = _69101[2 + 0];
										_6999[_69146] = _6999[_69146](_6921(_6999, _69146 + 1, _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[3 - 1]] = _6999[_69101[4 - 1]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69146 = _69101[2];
										_6999[_69146] = _6999[_69146](_6921(_6999, _69146 + (2 - 1), _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6993 = _69101[3];
									elseif (_69102 == 15) then
										_6999[_69101[2]] = not _6999[_69101[3]];
									else
										local _69560;
										local _69561, _69562;
										local _69563;
										local _69564;
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69564 = _69101[2];
										_69563 = _6999[_69101[3]];
										_6999[_69564 + 1] = _69563;
										_6999[_69564] = _69563[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6973[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[2 + 1];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69564 = _69101[2];
										_69561, _69562 = _6992(_6999[_69564](_6921(_6999, _69564 + 1 + 0, _69101[3])));
										_6994 = (_69562 + _69564) - 1;
										_69560 = 0;
										for _691605 = _69564, _6994 do
											_69560 = _69560 + 1;
											_6999[_691605] = _69561[_69560];
										end
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69564 = _69101[2];
										_6999[_69564] = _6999[_69564](_6921(_6999, _69564 + 1, _6994));
										_6993 = _6993 + (397 - (115 + 281));
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + (2 - 1);
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3] ~= 0;
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6974[_69101[3 + 0]] = _6999[_69101[2]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[4 - 2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[7 - 5]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[870 - (550 + 317)]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69563 = _6999[_69101[4]];
										if _69563 then
											_6993 = _6993 + 1;
										else
											local _692061 = 0;
											while true do
												if (_692061 == 0) then
													_6999[_69101[2 - 0]] = _69563;
													_6993 = _69101[3];
													break;
												end
											end
										end
									end
								elseif (_69102 <= 18) then
									if (_69102 > 17) then
										local _69582 = 0;
										local _69583;
										local _69584;
										local _69585;
										while true do
											if (13 == _69582) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6974[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_69582 = 14;
											end
											if (_69582 == 26) then
												_6999[_69101[2]] = _6974[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69582 = 27;
											end
											if (_69582 == 5) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6974[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_69582 = 6;
											end
											if (6 == _69582) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[1667 - (970 + 695)]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69585 = _69101[2];
												_69582 = 7;
											end
											if (9 == _69582) then
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69582 = 10;
											end
											if (_69582 == 21) then
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[4 - 1];
												_6993 = _6993 + 1 + 0;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69582 = 22;
											end
											if (_69582 == 22) then
												_69101 = _6989[_6993];
												_69585 = _69101[2];
												_6999[_69585] = _6999[_69585](_6921(_6999, _69585 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _69101[4];
												_69582 = 23;
											end
											if (8 == _69582) then
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + (1991 - (582 + 1408));
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6974[_69101[10 - 7]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69582 = 9;
											end
											if (18 == _69582) then
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69585 = _69101[2];
												_6999[_69585] = _6999[_69585](_6921(_6999, _69585 + 1, _69101[3]));
												_6993 = _6993 + (1 - 0);
												_69582 = 19;
											end
											if (_69582 == 24) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[1 + 1]] = _69101[3];
												_6993 = _6993 + (1 - 0);
												_69101 = _6989[_6993];
												_69585 = _69101[2];
												_69582 = 25;
											end
											if (_69582 == 11) then
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + (1825 - (1195 + 629));
												_69582 = 12;
											end
											if (_69582 == 19) then
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69584 = _69101[3];
												_69583 = _6999[_69584];
												for _694848 = _69584 + 1, _69101[4] do
													_69583 = _69583 .. _6999[_694848];
												end
												_6999[_69101[2]] = _69583;
												_6993 = _6993 + 1;
												_69582 = 20;
											end
											if (_69582 == 27) then
												_6999[_69101[2 - 0]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69585 = _69101[2];
												_6999[_69585] = _6999[_69585](_6921(_6999, _69585 + (342 - (218 + 123)), _69101[3]));
												_6993 = _6993 + 1;
												_69582 = 28;
											end
											if (4 == _69582) then
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69585 = _69101[2];
												_6999[_69585] = _6999[_69585](_6921(_6999, _69585 + 1, _69101[288 - (134 + 151)]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												_69582 = 5;
											end
											if (_69582 == 20) then
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6974[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69582 = 21;
											end
											if (23 == _69582) then
												_6993 = _6993 + (1637 - (1373 + 263));
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _69101[4];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _69101[4];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[1002 - (451 + 549)]] = _6973[_69101[3]];
												_69582 = 24;
											end
											if (_69582 == 7) then
												_6999[_69585] = _6999[_69585](_6921(_6999, _69585 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _69101[7 - 3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69582 = 8;
											end
											if (10 == _69582) then
												_69585 = _69101[2];
												_6999[_69585] = _6999[_69585](_6921(_6999, _69585 + 1, _69101[3 - 0]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[11 - 8]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6974[_69101[3]];
												_6993 = _6993 + 1;
												_69582 = 11;
											end
											if (16 == _69582) then
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6974[_69101[783 - (162 + 618)]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69582 = 17;
											end
											if (_69582 == 28) then
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												break;
											end
											if (1 == _69582) then
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + (1 - 0);
												_69101 = _6989[_6993];
												_69585 = _69101[2];
												_6999[_69585] = _6999[_69585](_6921(_6999, _69585 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69582 = 2;
											end
											if (_69582 == 3) then
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6973[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69582 = 4;
											end
											if (2 == _69582) then
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6974[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + (2 - 1);
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69582 = 3;
											end
											if (_69582 == 15) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69585 = _69101[2];
												_6999[_69585] = _6999[_69585](_6921(_6999, _69585 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69582 = 16;
											end
											if (_69582 == 25) then
												_6999[_69585] = _6999[_69585](_6921(_6999, _69585 + 1, _69101[3]));
												_6993 = _6993 + (1 - 0);
												_69101 = _6989[_6993];
												_6999[_69101[1386 - (746 + 638)]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[2 + 1]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69582 = 26;
											end
											if (_69582 == 14) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2 - 0]] = _69101[3];
												_6993 = _6993 + (242 - (187 + 54));
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_69582 = 15;
											end
											if (_69582 == 12) then
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69585 = _69101[2];
												_6999[_69585] = _6999[_69585](_6921(_6999, _69585 + 1, _69101[3]));
												_69582 = 13;
											end
											if (_69582 == 0) then
												_69583 = nil;
												_69584 = nil;
												_69585 = nil;
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69582 = 1;
											end
											if (_69582 == 17) then
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1 + 0;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6973[_69101[2 + 1]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69582 = 18;
											end
										end
									else
										local _69586 = 0;
										local _69587;
										while true do
											if (_69586 == 0) then
												_69587 = _6999[_69101[4]];
												if _69587 then
													_6993 = _6993 + 1;
												else
													local _695028 = 0;
													while true do
														if (_695028 == 0) then
															_6999[_69101[2]] = _69587;
															_6993 = _69101[3];
															break;
														end
													end
												end
												break;
											end
										end
									end
								elseif (_69102 == 19) then
									local _69588;
									_6999[_69101[1583 - (1535 + 46)]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3 + 0];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69588 = _69101[1 + 1];
									_6999[_69588] = _6999[_69588](_6921(_6999, _69588 + 1, _69101[3]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
								elseif (_6999[_69101[2]] == _69101[4]) then
									_6993 = _6993 + 1;
								else
									_6993 = _69101[3];
								end
							elseif (_69102 <= 23) then
								if (_69102 <= 21) then
									local _69160;
									local _69161, _69162;
									local _69163;
									local _69164;
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6974[_69101[563 - (306 + 254)]];
									_6993 = _6993 + 1 + 0;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[7 - 3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[1469 - (899 + 568)]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69164 = _69101[2];
									_6999[_69164] = _6999[_69164](_6921(_6999, _69164 + 1, _69101[3]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2 + 0]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69164 = _69101[2];
									_6999[_69164] = _6999[_69164](_6921(_6999, _69164 + 1, _69101[3]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6974[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[7 - 4];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69164 = _69101[2];
									_6999[_69164] = _6999[_69164](_6921(_6999, _69164 + 1, _69101[3]));
									_6993 = _6993 + (604 - (268 + 335));
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69164 = _69101[2];
									_6999[_69164] = _6999[_69164](_6921(_6999, _69164 + 1, _69101[3]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6974[_69101[3]];
									_6993 = _6993 + (291 - (60 + 230));
									_69101 = _6989[_6993];
									_69164 = _69101[574 - (426 + 146)];
									_69163 = _6999[_69101[3]];
									_6999[_69164 + 1 + 0] = _69163;
									_6999[_69164] = _69163[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + (1457 - (282 + 1174));
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[814 - (569 + 242)];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69164 = _69101[5 - 3];
									_69161, _69162 = _6992(_6999[_69164](_6921(_6999, _69164 + 1, _69101[3])));
									_6994 = (_69162 + _69164) - 1;
									_69160 = 0 + 0;
									for _69421 = _69164, _6994 do
										_69160 = _69160 + (1025 - (706 + 318));
										_6999[_69421] = _69161[_69160];
									end
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69164 = _69101[2];
									_6999[_69164] = _6999[_69164](_6921(_6999, _69164 + 1, _6994));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3] ~= 0;
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6974[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[1255 - (721 + 530)]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									if _6999[_69101[2]] then
										_6993 = _6993 + 1;
									else
										_6993 = _69101[3];
									end
								elseif (_69102 > (1293 - (945 + 326))) then
									local _69600 = 0;
									local _69601;
									local _69602;
									while true do
										if (_69600 == 2) then
											_6999[_69101[4 - 2]] = _6999[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69602 = _69101[2];
											_69600 = 3;
										end
										if (_69600 == 1) then
											_6999[_69602 + 1] = _69601;
											_6999[_69602] = _69601[_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69600 = 2;
										end
										if (_69600 == 0) then
											_69601 = nil;
											_69602 = nil;
											_69602 = _69101[2];
											_69601 = _6999[_69101[3]];
											_69600 = 1;
										end
										if (_69600 == 4) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											if _6999[_69101[2]] then
												_6993 = _6993 + 1;
											else
												_6993 = _69101[3];
											end
											break;
										end
										if (_69600 == 3) then
											_6999[_69602] = _6999[_69602](_6921(_6999, _69602 + 1 + 0, _69101[3]));
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[3]];
											_69600 = 4;
										end
									end
								else
									local _69603 = _69101[2];
									local _69604, _69605 = _6992(_6999[_69603](_6921(_6999, _69603 + 1, _6994)));
									_6994 = (_69605 + _69603) - 1;
									local _69606 = 0;
									for _691608 = _69603, _6994 do
										_69606 = _69606 + 1;
										_6999[_691608] = _69604[_69606];
									end
								end
							elseif (_69102 <= (725 - (271 + 429))) then
								if (_69102 > 24) then
									local _69607 = _69101[2];
									local _69608 = _6999[_69607];
									for _691611 = _69607 + 1, _6994 do
										_6915(_69608, _6999[_691611]);
									end
								elseif (_69101[2] < _6999[_69101[4]]) then
									_6993 = _6993 + 1;
								else
									_6993 = _69101[3];
								end
							elseif (_69102 > 26) then
								local _69609 = 0;
								local _69610;
								local _69611;
								local _69612;
								local _69613;
								while true do
									if (_69609 == 0) then
										_69610 = nil;
										_69611, _69612 = nil;
										_69613 = nil;
										_6999[_69101[2]] = _6973[_69101[3]];
										_69609 = 1;
									end
									if (3 == _69609) then
										_69613 = _69101[2];
										_69611, _69612 = _6992(_6999[_69613](_6921(_6999, _69613 + 1, _69101[3])));
										_6994 = (_69612 + _69613) - 1;
										_69610 = 0;
										_69609 = 4;
									end
									if (_69609 == 5) then
										_6999[_69613] = _6999[_69613](_6921(_6999, _69613 + 1, _6994));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]];
										break;
									end
									if (_69609 == 2) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69609 = 3;
									end
									if (1 == _69609) then
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69609 = 2;
									end
									if (_69609 == 4) then
										for _694849 = _69613, _6994 do
											local _694850 = 0;
											while true do
												if (_694850 == 0) then
													_69610 = _69610 + 1;
													_6999[_694849] = _69611[_69610];
													break;
												end
											end
										end
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69613 = _69101[2];
										_69609 = 5;
									end
								end
							else
								_6999[_69101[1502 - (1408 + 92)]][_69101[3]] = _6999[_69101[4]];
							end
						elseif (_69102 <= 41) then
							if (_69102 <= 34) then
								if (_69102 <= 30) then
									if (_69102 <= 28) then
										local _69185 = _69101[2];
										_6999[_69185](_6999[_69185 + 1]);
									elseif (_69102 == 29) then
										local _69616 = 0;
										local _69617;
										while true do
											if (0 == _69616) then
												_69617 = _6999[_69101[4]];
												if not _69617 then
													_6993 = _6993 + 1;
												else
													local _695030 = 0;
													while true do
														if (_695030 == 0) then
															_6999[_69101[2]] = _69617;
															_6993 = _69101[3];
															break;
														end
													end
												end
												break;
											end
										end
									else
										local _69618;
										local _69619;
										local _69618, _69620;
										local _69621;
										local _69622;
										_6999[_69101[2]] = _6974[_69101[1089 - (461 + 625)]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[1291 - (993 + 295)]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69622 = _69101[2];
										_69621 = _6999[_69101[1 + 2]];
										_6999[_69622 + 1] = _69621;
										_6999[_69622] = _69621[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69622 = _69101[2];
										_69618, _69620 = _6992(_6999[_69622](_6999[_69622 + 1]));
										_6994 = (_69620 + _69622) - 1;
										_69619 = 0;
										for _691612 = _69622, _6994 do
											local _691613 = 0;
											while true do
												if (_691613 == 0) then
													_69619 = _69619 + 1;
													_6999[_691612] = _69618[_69619];
													break;
												end
											end
										end
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69622 = _69101[1173 - (418 + 753)];
										_69618 = {_6999[_69622](_6921(_6999, _69622 + 1, _6994))};
										_69619 = 0;
										for _691614 = _69622, _69101[4] do
											local _691615 = 0;
											while true do
												if (_691615 == 0) then
													_69619 = _69619 + 1;
													_6999[_691614] = _69618[_69619];
													break;
												end
											end
										end
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6993 = _69101[3];
									end
								elseif (_69102 <= (13 + 19)) then
									if (_69102 > (4 + 27)) then
										local _69634 = 0;
										local _69635;
										while true do
											if (6 == _69634) then
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69634 = 7;
											end
											if (_69634 == 3) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69635 = _69101[531 - (406 + 123)];
												_69634 = 4;
											end
											if (_69634 == 4) then
												_6999[_69635] = _6999[_69635]();
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69634 = 5;
											end
											if (_69634 == 7) then
												if _6999[_69101[2]] then
													_6993 = _6993 + 1;
												else
													_6993 = _69101[3];
												end
												break;
											end
											if (_69634 == 1) then
												_6993 = _6993 + 1 + 0;
												_69101 = _6989[_6993];
												_6999[_69101[1 + 1]] = _6999[_69101[3]];
												_69634 = 2;
											end
											if (_69634 == 5) then
												_6999[_69101[2]] = _6999[_69101[1772 - (1749 + 20)]][_69101[4]];
												_6993 = _6993 + 1 + 0;
												_69101 = _6989[_6993];
												_69634 = 6;
											end
											if (_69634 == 0) then
												_69635 = nil;
												_69635 = _69101[2];
												_6999[_69635] = _6999[_69635](_6921(_6999, _69635 + 1, _69101[3]));
												_69634 = 1;
											end
											if (_69634 == 2) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6974[_69101[3]];
												_69634 = 3;
											end
										end
									elseif (_6999[_69101[2]] < _69101[4]) then
										_6993 = _69101[3];
									else
										_6993 = _6993 + 1;
									end
								elseif (_69102 == 33) then
									local _69636 = 0;
									local _69637;
									while true do
										if (3 == _69636) then
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[8 - 5]][_69101[4]];
											_6993 = _6993 + (1901 - (106 + 1794));
											_69101 = _6989[_6993];
											_69636 = 4;
										end
										if (_69636 == 9) then
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69636 = 10;
										end
										if (4 == _69636) then
											_6999[_69101[2]][_69101[3]] = _69101[4];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6973[_69101[3]];
											_69636 = 5;
										end
										if (_69636 == 8) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[1 + 2];
											_6993 = _6993 + 1;
											_69636 = 9;
										end
										if (7 == _69636) then
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1 + 0;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_69636 = 8;
										end
										if (_69636 == 10) then
											_69637 = _69101[2];
											_6999[_69637] = _6999[_69637](_6921(_6999, _69637 + 1, _69101[3]));
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69636 = 11;
										end
										if (_69636 == 5) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6974[_69101[3]];
											_6993 = _6993 + 1;
											_69636 = 6;
										end
										if (_69636 == 11) then
											_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6993 = _69101[3];
											break;
										end
										if (_69636 == 1) then
											_6999[_69101[2]] = _6973[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]][_69101[1148 - (466 + 679)]] = _69101[4];
											_69636 = 2;
										end
										if (2 == _69636) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6973[_69101[6 - 3]];
											_6993 = _6993 + 1;
											_69636 = 3;
										end
										if (_69636 == 0) then
											_69637 = nil;
											_6999[_69101[1324 - (1249 + 73)]][_69101[3]] = _69101[4];
											_6993 = _6993 + 1 + 0;
											_69101 = _6989[_6993];
											_69636 = 1;
										end
										if (_69636 == 6) then
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69636 = 7;
										end
									end
								else
									_6999[_69101[2]] = _6999[_69101[3]] - _6999[_69101[4]];
								end
							elseif (_69102 <= 37) then
								if (_69102 <= 35) then
									local _69186;
									local _69187;
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[5 - 3]] = _6999[_69101[3]][_69101[10 - 6]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69187 = _69101[2];
									_69186 = _6999[_69101[3]];
									_6999[_69187 + 1] = _69186;
									_6999[_69187] = _69186[_69101[118 - (4 + 110)]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[586 - (57 + 527)]] = _6974[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[1431 - (41 + 1386)]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3] ~= 0;
									_6993 = _6993 + (104 - (17 + 86));
									_69101 = _6989[_6993];
									_69187 = _69101[2 + 0];
									_6999[_69187](_6921(_6999, _69187 + (1 - 0), _69101[8 - 5]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[168 - (122 + 44)]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69187 = _69101[2];
									_69186 = _6999[_69101[3]];
									_6999[_69187 + (1 - 0)] = _69186;
									_6999[_69187] = _69186[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6974[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + (3 - 2);
									_69101 = _6989[_6993];
									_6999[_69101[2 + 0]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1 + 0;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3] ~= 0;
									_6993 = _6993 + (1 - 0);
									_69101 = _6989[_6993];
									_69187 = _69101[2];
									_6999[_69187](_6921(_6999, _69187 + 1, _69101[3]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
								elseif (_69102 > 36) then
									local _69639;
									local _69640;
									_69640 = _69101[2];
									_69639 = _6999[_69101[3]];
									_6999[_69640 + 1] = _69639;
									_6999[_69640] = _69639[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69640 = _69101[2];
									_6999[_69640](_6921(_6999, _69640 + (66 - (30 + 35)), _69101[3]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69640 = _69101[2];
									_69639 = _6999[_69101[3]];
									_6999[_69640 + 1] = _69639;
									_6999[_69640] = _69639[_69101[4]];
								else
									local _69650 = 0;
									local _69651;
									while true do
										if (_69650 == 5) then
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69650 = 6;
										end
										if (_69650 == 6) then
											if _6999[_69101[2]] then
												_6993 = _6993 + 1;
											else
												_6993 = _69101[1260 - (1043 + 214)];
											end
											break;
										end
										if (_69650 == 3) then
											_6993 = _6993 + 1 + 0;
											_69101 = _6989[_6993];
											_69651 = _69101[2];
											_69650 = 4;
										end
										if (_69650 == 2) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6974[_69101[3]];
											_69650 = 3;
										end
										if (_69650 == 1) then
											_69101 = _6989[_6993];
											_69651 = _69101[2];
											_6999[_69651] = _6999[_69651](_6921(_6999, _69651 + 1, _69101[3]));
											_69650 = 2;
										end
										if (4 == _69650) then
											_6999[_69651] = _6999[_69651]();
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69650 = 5;
										end
										if (_69650 == 0) then
											_69651 = nil;
											_6999[_69101[2]][_6999[_69101[3]]] = _6999[_69101[4]];
											_6993 = _6993 + 1;
											_69650 = 1;
										end
									end
								end
							elseif (_69102 <= (147 - 108)) then
								if (_69102 > 38) then
									do
										return _6999[_69101[2]];
									end
								else
									local _69652;
									_6999[_69101[2]] = _6974[_69101[1215 - (323 + 889)]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[7 - 4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69652 = _69101[2];
									_6999[_69652] = _6999[_69652](_6999[_69652 + 1]);
									_6993 = _6993 + (581 - (361 + 219));
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[323 - (53 + 267)];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69652 = _69101[2];
									_6999[_69652] = _6999[_69652](_6921(_6999, _69652 + 1, _69101[3]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									if (_6999[_69101[2]] == _6999[_69101[4]]) then
										_6993 = _6993 + 1;
									else
										_6993 = _69101[3];
									end
								end
							elseif (_69102 == 40) then
								local _69662 = 0;
								local _69663;
								local _69664;
								while true do
									if (0 == _69662) then
										_69663 = _69101[2];
										_69664 = _69101[3];
										_69662 = 1;
									end
									if (_69662 == 1) then
										for _694855 = _69663, _69664 do
											_6999[_694855] = _6995[_694855 - _69663];
										end
										break;
									end
								end
							else
								local _69665 = _69101[2];
								local _69666 = _69101[1 + 3];
								local _69667 = _69665 + 2;
								local _69668 = {_6999[_69665](_6999[_69665 + 1], _6999[_69667])};
								for _691616 = 1, _69666 do
									_6999[_69667 + _691616] = _69668[_691616];
								end
								local _69669 = _69668[1];
								if _69669 then
									_6999[_69667] = _69669;
									_6993 = _69101[3];
								else
									_6993 = _6993 + 1;
								end
							end
						elseif (_69102 <= 48) then
							if (_69102 <= 44) then
								if (_69102 <= 42) then
									local _69208 = 0;
									local _69209;
									local _69210;
									while true do
										if (_69208 == 2) then
											_6999[_69210 + 1] = _69209;
											_6999[_69210] = _69209[_69101[986 - (18 + 964)]];
											_6993 = _6993 + (3 - 2);
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6974[_69101[2 + 1]];
											_69208 = 3;
										end
										if (_69208 == 3) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[2 + 1]][_69101[4]];
											_6993 = _6993 + (851 - (20 + 830));
											_69101 = _6989[_6993];
											_69208 = 4;
										end
										if (_69208 == 5) then
											_69101 = _6989[_6993];
											_69210 = _69101[2];
											_6999[_69210](_6921(_6999, _69210 + 1 + 0, _69101[3]));
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69208 = 6;
										end
										if (1 == _69208) then
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69210 = _69101[415 - (15 + 398)];
											_69209 = _6999[_69101[3]];
											_69208 = 2;
										end
										if (_69208 == 6) then
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6993 = _69101[3];
											break;
										end
										if (_69208 == 0) then
											_69209 = nil;
											_69210 = nil;
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69208 = 1;
										end
										if (_69208 == 4) then
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3] ~= 0;
											_6993 = _6993 + 1;
											_69208 = 5;
										end
									end
								elseif (_69102 > 43) then
									do
										return _6999[_69101[2]]();
									end
								else
									local _69670;
									local _69671, _69672;
									local _69673;
									local _69674;
									_69674 = _69101[2];
									_69673 = _6999[_69101[3]];
									_6999[_69674 + 1] = _69673;
									_6999[_69674] = _69673[_69101[130 - (116 + 10)]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69674 = _69101[2];
									_69671, _69672 = _6992(_6999[_69674](_6921(_6999, _69674 + 1, _69101[1 + 2])));
									_6994 = (_69672 + _69674) - 1;
									_69670 = 0;
									for _691644 = _69674, _6994 do
										_69670 = _69670 + (739 - (542 + 196));
										_6999[_691644] = _69671[_69670];
									end
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69674 = _69101[3 - 1];
									_6999[_69674] = _6999[_69674](_6921(_6999, _69674 + 1, _6994));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[1 + 2]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									if (_6999[_69101[2]] == _69101[4]) then
										_6993 = _6993 + 1;
									else
										_6993 = _69101[2 + 1];
									end
								end
							elseif (_69102 <= (17 + 29)) then
								if (_69102 > (118 - 73)) then
									_6999[_69101[2]] = _6999[_69101[3]] / _6999[_69101[4]];
								else
									local _69688 = 0;
									local _69689;
									local _69690;
									local _69691;
									local _69692;
									local _69693;
									while true do
										if (_69688 == 6) then
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69693 = _69101[2];
											_6999[_69693] = _6999[_69693](_6921(_6999, _69693 + 1, _69101[3]));
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]][_69101[3]] = _6999[_69101[381 - (142 + 235)]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69688 = 7;
										end
										if (_69688 == 14) then
											_69101 = _6989[_6993];
											_69693 = _69101[2];
											_69690, _69691 = _6992(_6999[_69693](_6921(_6999, _69693 + 1, _69101[3])));
											_6994 = (_69691 + _69693) - 1;
											_69689 = 0;
											for _694858 = _69693, _6994 do
												_69689 = _69689 + 1;
												_6999[_694858] = _69690[_69689];
											end
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69693 = _69101[2];
											_6999[_69693] = _6999[_69693](_6921(_6999, _69693 + 1, _6994));
											_69688 = 15;
										end
										if (_69688 == 13) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6973[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69688 = 14;
										end
										if (10 == _69688) then
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + (978 - (553 + 424));
											_69101 = _6989[_6993];
											_69693 = _69101[2];
											_6999[_69693] = _6999[_69693](_6921(_6999, _69693 + 1, _69101[3]));
											_6993 = _6993 + 1;
											_69688 = 11;
										end
										if (_69688 == 2) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69693 = _69101[2];
											_6999[_69693] = _6999[_69693](_6921(_6999, _69693 + 1, _69101[3]));
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6973[_69101[3]];
											_69688 = 3;
										end
										if (_69688 == 5) then
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69688 = 6;
										end
										if (_69688 == 16) then
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2 + 0]] = _6999[_69101[6 - 3]][_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69692 = _6999[_69101[11 - 7]];
											if _69692 then
												_6993 = _6993 + 1;
											else
												local _695033 = 0;
												while true do
													if (0 == _695033) then
														_6999[_69101[4 - 2]] = _69692;
														_6993 = _69101[3];
														break;
													end
												end
											end
											break;
										end
										if (_69688 == 12) then
											_6974[_69101[3]] = _6999[_69101[2]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6974[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69693 = _69101[2];
											_69692 = _6999[_69101[3]];
											_6999[_69693 + 1] = _69692;
											_6999[_69693] = _69692[_69101[4]];
											_69688 = 13;
										end
										if (_69688 == 3) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[7 - 5]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + (1122 - (118 + 1003));
											_69101 = _6989[_6993];
											_69693 = _69101[2];
											_6999[_69693] = _6999[_69693](_6921(_6999, _69693 + 1, _69101[3]));
											_69688 = 4;
										end
										if (_69688 == 4) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[5 - 3]] = _6974[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69688 = 5;
										end
										if (_69688 == 1) then
											_6999[_69101[2]] = _6999[_69101[3]][_69101[9 - 5]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + (1552 - (1126 + 425));
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[408 - (118 + 287)];
											_69688 = 2;
										end
										if (_69688 == 7) then
											_6999[_69101[2]] = _6973[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[9 - 7]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69693 = _69101[2];
											_69688 = 8;
										end
										if (_69688 == 0) then
											_69689 = nil;
											_69690, _69691 = nil;
											_69692 = nil;
											_69693 = nil;
											_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6974[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69688 = 1;
										end
										if (_69688 == 9) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[1 + 2];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69688 = 10;
										end
										if (_69688 == 8) then
											_6999[_69693] = _6999[_69693](_6921(_6999, _69693 + 1, _69101[3]));
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]][_69101[3]] = _69101[4];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6974[_69101[3]];
											_69688 = 9;
										end
										if (_69688 == 11) then
											_69101 = _6989[_6993];
											_6999[_69101[3 - 1]][_69101[3]] = _6999[_69101[4]];
											_6993 = _6993 + 1 + 0;
											_69101 = _6989[_6993];
											_6999[_69101[2]][_69101[3]] = _69101[4 + 0];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69688 = 12;
										end
										if (_69688 == 15) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6974[_69101[2 + 1]];
											_6993 = _6993 + 1 + 0;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69688 = 16;
										end
									end
								end
							elseif (_69102 == 47) then
								local _69694 = 0;
								local _69695;
								while true do
									if (_69694 == 0) then
										_69695 = _69101[2];
										do
											return _6999[_69695](_6921(_6999, _69695 + 1, _69101[3]));
										end
										break;
									end
								end
							else
								local _69696 = 0;
								local _69697;
								while true do
									if (_69696 == 0) then
										_69697 = _69101[1 + 1];
										_6999[_69697](_6921(_6999, _69697 + 1, _6994));
										break;
									end
								end
							end
						elseif (_69102 <= 51) then
							if (_69102 <= 49) then
								local _69211 = 0;
								local _69212;
								local _69213;
								while true do
									if (_69211 == 6) then
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[6 - 3] ~= 0;
										_6993 = _6993 + 1;
										_69211 = 7;
									end
									if (_69211 == 4) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + (1330 - (797 + 532));
										_69101 = _6989[_6993];
										_69213 = _69101[2];
										_69211 = 5;
									end
									if (_69211 == 3) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69213 = _69101[2];
										_6999[_69213](_6921(_6999, _69213 + (754 - (239 + 514)), _69101[2 + 1]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6973[_69101[3]];
										_6993 = _6993 + 1;
										_69211 = 4;
									end
									if (_69211 == 1) then
										_69213 = _69101[9 - 7];
										_69212 = _6999[_69101[3]];
										_6999[_69213 + 1] = _69212;
										_6999[_69213] = _69212[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69211 = 2;
									end
									if (_69211 == 0) then
										_69212 = nil;
										_69213 = nil;
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69211 = 1;
									end
									if (2 == _69211) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3] ~= 0;
										_69211 = 3;
									end
									if (_69211 == 7) then
										_69101 = _6989[_6993];
										_69213 = _69101[2];
										_6999[_69213](_6921(_6999, _69213 + 1, _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										break;
									end
									if (_69211 == 5) then
										_69212 = _6999[_69101[3]];
										_6999[_69213 + 1 + 0] = _69212;
										_6999[_69213] = _69212[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69211 = 6;
									end
								end
							elseif (_69102 == 50) then
								local _69698 = 0;
								local _69699;
								local _69700;
								local _69701;
								local _69702;
								while true do
									if (_69698 == 0) then
										_69699 = nil;
										_69700, _69701 = nil;
										_69702 = nil;
										_69698 = 1;
									end
									if (_69698 == 5) then
										_69699 = 0;
										for _694861 = _69702, _6994 do
											_69699 = _69699 + 1;
											_6999[_694861] = _69700[_69699];
										end
										_6993 = _6993 + 1;
										_69698 = 6;
									end
									if (_69698 == 1) then
										_6999[_69101[2]] = _6973[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69698 = 2;
									end
									if (6 == _69698) then
										_69101 = _6989[_6993];
										_69702 = _69101[1204 - (373 + 829)];
										_6999[_69702] = _6999[_69702](_6921(_6999, _69702 + 1, _6994));
										_69698 = 7;
									end
									if (_69698 == 2) then
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69698 = 3;
									end
									if (3 == _69698) then
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69698 = 4;
									end
									if (_69698 == 7) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]];
										break;
									end
									if (_69698 == 4) then
										_69702 = _69101[2];
										_69700, _69701 = _6992(_6999[_69702](_6921(_6999, _69702 + 1, _69101[3])));
										_6994 = (_69701 + _69702) - 1;
										_69698 = 5;
									end
								end
							else
								local _69703 = 0;
								local _69704;
								while true do
									if (2 == _69703) then
										_69101 = _6989[_6993];
										_6999[_69101[1132 - (369 + 761)]] = _69101[3];
										_6993 = _6993 + 1 + 0;
										_69703 = 3;
									end
									if (_69703 == 7) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6993 = _69101[3];
										break;
									end
									if (_69703 == 1) then
										_69101 = _6989[_6993];
										_6999[_69101[733 - (476 + 255)]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69703 = 2;
									end
									if (_69703 == 4) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[5 - 2];
										_6993 = _6993 + 1;
										_69703 = 5;
									end
									if (_69703 == 0) then
										_69704 = nil;
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69703 = 1;
									end
									if (_69703 == 3) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[5 - 2];
										_6993 = _6993 + 1;
										_69703 = 4;
									end
									if (_69703 == 6) then
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
										_69703 = 7;
									end
									if (_69703 == 5) then
										_69101 = _6989[_6993];
										_69704 = _69101[2];
										_6999[_69704] = _6999[_69704](_6921(_6999, _69704 + 1, _69101[241 - (64 + 174)]));
										_69703 = 6;
									end
								end
							end
						elseif (_69102 <= 53) then
							if (_69102 == 52) then
								local _69705 = 0;
								local _69706;
								while true do
									if (_69705 == 4) then
										_69101 = _6989[_6993];
										_69706 = _69101[1 + 1];
										_6999[_69706] = _6999[_69706](_6921(_6999, _69706 + 1, _69101[3]));
										_69705 = 5;
									end
									if (_69705 == 1) then
										_69101 = _6989[_6993];
										_6999[_69101[2 - 0]] = _69101[339 - (144 + 192)];
										_6993 = _6993 + (217 - (42 + 174));
										_69705 = 2;
									end
									if (_69705 == 3) then
										_69101 = _6989[_6993];
										_6999[_69101[2 + 0]] = _69101[3];
										_6993 = _6993 + 1;
										_69705 = 4;
									end
									if (_69705 == 5) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
										break;
									end
									if (_69705 == 0) then
										_69706 = nil;
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69705 = 1;
									end
									if (_69705 == 2) then
										_69101 = _6989[_6993];
										_6999[_69101[2 + 0]] = _69101[3];
										_6993 = _6993 + 1;
										_69705 = 3;
									end
								end
							else
								_6999[_69101[2]] = _6999[_69101[3]] * _69101[1508 - (363 + 1141)];
							end
						elseif (_69102 == (1634 - (1183 + 397))) then
							_6999[_69101[2]] = _6999[_69101[3]] - _69101[4];
						else
							_6999[_69101[2]] = _6999[_69101[3]] + _69101[4];
						end
					elseif (_69102 <= 83) then
						if (_69102 <= (209 - 140)) then
							if (_69102 <= 62) then
								if (_69102 <= 58) then
									if (_69102 <= 56) then
										local _69214 = 0;
										local _69215;
										local _69216;
										local _69217;
										while true do
											if (5 == _69214) then
												_69217 = _69101[2];
												_69216 = _6999[_69217];
												_69215 = _6999[_69217 + 2];
												_69214 = 6;
											end
											if (_69214 == 6) then
												if (_69215 > 0) then
													if (_69216 > _6999[_69217 + 1]) then
														_6993 = _69101[3];
													else
														_6999[_69217 + 3] = _69216;
													end
												elseif (_69216 < _6999[_69217 + 1 + 0]) then
													_6993 = _69101[3];
												else
													_6999[_69217 + 3] = _69216;
												end
												break;
											end
											if (2 == _69214) then
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69214 = 3;
											end
											if (_69214 == 0) then
												_69215 = nil;
												_69216 = nil;
												_69217 = nil;
												_69214 = 1;
											end
											if (_69214 == 1) then
												_6974[_69101[3]] = _6999[_69101[2]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69214 = 2;
											end
											if (_69214 == 3) then
												_6999[_69101[2]] = _6974[_69101[3 + 0]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69214 = 4;
											end
											if (_69214 == 4) then
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69214 = 5;
											end
										end
									elseif (_69102 == 57) then
										local _69710;
										local _69711, _69712;
										local _69713;
										_6999[_69101[2]] = _6999[_69101[1978 - (1913 + 62)]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[2 + 1];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69713 = _69101[2];
										_69711, _69712 = _6992(_6999[_69713](_6921(_6999, _69713 + (2 - 1), _69101[1936 - (565 + 1368)])));
										_6994 = (_69712 + _69713) - 1;
										_69710 = 0 - 0;
										for _691698 = _69713, _6994 do
											_69710 = _69710 + (1662 - (1477 + 184));
											_6999[_691698] = _69711[_69710];
										end
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69713 = _69101[2];
										_6999[_69713] = _6999[_69713](_6921(_6999, _69713 + 1, _6994));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_6999[_69101[3]]] = _6999[_69101[4]];
									else
										local _69725 = 0;
										local _69726;
										while true do
											if (_69725 == 7) then
												_69726 = _69101[2];
												_6999[_69726] = _6999[_69726](_6921(_6999, _69726 + (1126 - (936 + 189)), _69101[1 + 2]));
												_6993 = _6993 + (1614 - (1565 + 48));
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6974[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69725 = 8;
											end
											if (_69725 == 19) then
												_6999[_69726] = _6999[_69726](_6921(_6999, _69726 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[6 - 4]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[1021 - (697 + 321)]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6974[_69101[3]];
												_69725 = 20;
											end
											if (_69725 == 18) then
												_6999[_69101[2]] = _6973[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[10 - 7];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69726 = _69101[2];
												_69725 = 19;
											end
											if (_69725 == 8) then
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_69725 = 9;
											end
											if (_69725 == 21) then
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69726 = _69101[2];
												_6999[_69726] = _6999[_69726](_6921(_6999, _69726 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + (1 - 0);
												_69725 = 22;
											end
											if (_69725 == 12) then
												_69726 = _69101[2];
												_6999[_69726] = _6999[_69726](_6921(_6999, _69726 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[4 - 1]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6974[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69725 = 13;
											end
											if (_69725 == 13) then
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[1096 - (975 + 117)]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6973[_69101[3]];
												_69725 = 14;
											end
											if (_69725 == 20) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[7 - 4];
												_6993 = _6993 + 1;
												_69725 = 21;
											end
											if (_69725 == 11) then
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[7 - 4];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69725 = 12;
											end
											if (_69725 == 22) then
												_69101 = _6989[_6993];
												_6999[_69101[4 - 2]] = _6974[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69725 = 23;
											end
											if (_69725 == 14) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + (1876 - (157 + 1718));
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69726 = _69101[2];
												_6999[_69726] = _6999[_69726](_6921(_6999, _69726 + 1, _69101[3]));
												_69725 = 15;
											end
											if (_69725 == 16) then
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69725 = 17;
											end
											if (_69725 == 9) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69726 = _69101[2 + 0];
												_6999[_69726] = _6999[_69726](_6921(_6999, _69726 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												_69725 = 10;
											end
											if (_69725 == 10) then
												_6993 = _6993 + (1139 - (782 + 356));
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6974[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[271 - (176 + 91)]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69725 = 11;
											end
											if (_69725 == 24) then
												_6999[_69726] = _6999[_69726](_6921(_6999, _69726 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[7 - 4]] = _6999[_69101[4]];
												_6993 = _6993 + (1228 - (322 + 905));
												_69101 = _6989[_6993];
												_6999[_69101[613 - (602 + 9)]] = _6974[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[1193 - (449 + 740)]];
												break;
											end
											if (_69725 == 0) then
												_69726 = nil;
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + (1 - 0);
												_69101 = _6989[_6993];
												_69726 = _69101[2];
												_6999[_69726] = _6999[_69726](_6921(_6999, _69726 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4 + 0]];
												_6993 = _6993 + (857 - (564 + 292));
												_69725 = 1;
											end
											if (_69725 == 2) then
												_6999[_69101[5 - 3]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69726 = _69101[306 - (244 + 60)];
												_6999[_69726] = _6999[_69726](_6921(_6999, _69726 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69725 = 3;
											end
											if (_69725 == 4) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69726 = _69101[2];
												_6999[_69726] = _6999[_69726](_6921(_6999, _69726 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[1003 - (938 + 63)]][_69101[3]] = _6999[_69101[4]];
												_69725 = 5;
											end
											if (_69725 == 1) then
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6974[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + (1 - 0);
												_69101 = _6989[_6993];
												_69725 = 2;
											end
											if (15 == _69725) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6974[_69101[3]];
												_6993 = _6993 + 1 + 0;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69725 = 16;
											end
											if (_69725 == 17) then
												_69726 = _69101[2];
												_6999[_69726] = _6999[_69726](_6921(_6999, _69726 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _69101[4];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69725 = 18;
											end
											if (_69725 == 6) then
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1 + 0;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69725 = 7;
											end
											if (_69725 == 23) then
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[1 + 1]] = _69101[3];
												_6993 = _6993 + (1 - 0);
												_69101 = _6989[_6993];
												_69726 = _69101[2];
												_69725 = 24;
											end
											if (_69725 == 5) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6974[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69725 = 6;
											end
											if (3 == _69725) then
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _69101[4];
												_6993 = _6993 + 1 + 0;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6973[_69101[3]];
												_6993 = _6993 + (477 - (41 + 435));
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_69725 = 4;
											end
										end
									end
								elseif (_69102 <= 60) then
									if (_69102 > 59) then
										local _69727 = 0;
										local _69728;
										while true do
											if (16 == _69727) then
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_69727 = 17;
											end
											if (_69727 == 9) then
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6973[_69101[5 - 2]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69727 = 10;
											end
											if (19 == _69727) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6974[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69727 = 20;
											end
											if (0 == _69727) then
												_69728 = nil;
												_6999[_69101[2]][_69101[875 - (826 + 46)]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6974[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69727 = 1;
											end
											if (_69727 == 2) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69728 = _69101[2];
												_6999[_69728] = _6999[_69728](_6921(_6999, _69728 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6974[_69101[3]];
												_69727 = 3;
											end
											if (_69727 == 6) then
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_69727 = 7;
											end
											if (15 == _69727) then
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[8 - 4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6974[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69727 = 16;
											end
											if (_69727 == 17) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69728 = _69101[2];
												_6999[_69728] = _6999[_69728](_6921(_6999, _69728 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6973[_69101[3]];
												_69727 = 18;
											end
											if (_69727 == 23) then
												_6999[_69728] = _6999[_69728](_6921(_6999, _69728 + 1 + 0, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[3 + 1]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _69101[4];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6974[_69101[3]];
												_69727 = 24;
											end
											if (_69727 == 21) then
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69728 = _69101[2];
												_6999[_69728] = _6999[_69728](_6921(_6999, _69728 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + (2 - 1);
												_69101 = _6989[_6993];
												_69727 = 22;
											end
											if (_69727 == 14) then
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69728 = _69101[2];
												_6999[_69728] = _6999[_69728](_6921(_6999, _69728 + (563 - (334 + 228)), _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[6 - 4]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69727 = 15;
											end
											if (_69727 == 20) then
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + (237 - (141 + 95));
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3 + 0];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69727 = 21;
											end
											if (_69727 == 5) then
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[9 - 6]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6974[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69727 = 6;
											end
											if (_69727 == 7) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69728 = _69101[2];
												_6999[_69728] = _6999[_69728](_6921(_6999, _69728 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3 + 0]] = _6999[_69101[8 - 4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[5 - 3]] = _6974[_69101[3]];
												_69727 = 8;
											end
											if (_69727 == 12) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69728 = _69101[1465 - (1404 + 59)];
												_6999[_69728] = _6999[_69728](_6921(_6999, _69728 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[5 - 3]][_69101[3]] = _69101[4];
												_69727 = 13;
											end
											if (_69727 == 11) then
												_6999[_69101[2]] = _6999[_69101[217 - (22 + 192)]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[686 - (483 + 200)];
												_69727 = 12;
											end
											if (8 == _69727) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[1208 - (902 + 303)]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69727 = 9;
											end
											if (13 == _69727) then
												_6993 = _6993 + (1 - 0);
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _69101[769 - (468 + 297)];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6973[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69727 = 14;
											end
											if (_69727 == 22) then
												_6999[_69101[2]] = _6973[_69101[3]];
												_6993 = _6993 + (2 - 1);
												_69101 = _6989[_6993];
												_6999[_69101[1 + 1]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[5 - 3]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69728 = _69101[2];
												_69727 = 23;
											end
											if (_69727 == 10) then
												_69728 = _69101[2];
												_6999[_69728] = _6999[_69728](_6921(_6999, _69728 + 1, _69101[3]));
												_6993 = _6993 + (2 - 1);
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + 1 + 0;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6974[_69101[1693 - (1121 + 569)]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69727 = 11;
											end
											if (_69727 == 24) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2 - 0]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												break;
											end
											if (3 == _69727) then
												_6993 = _6993 + (3 - 2);
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[1 + 2]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + (1899 - (260 + 1638));
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + (441 - (382 + 58));
												_69727 = 4;
											end
											if (_69727 == 18) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2 - 0]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69728 = _69101[1 + 1];
												_6999[_69728] = _6999[_69728](_6921(_6999, _69728 + 1, _69101[3]));
												_69727 = 19;
											end
											if (_69727 == 4) then
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69728 = _69101[2];
												_6999[_69728] = _6999[_69728](_6921(_6999, _69728 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69727 = 5;
											end
											if (_69727 == 1) then
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[950 - (245 + 702)];
												_69727 = 2;
											end
										end
									else
										local _69729 = 0;
										local _69730;
										while true do
											if (_69729 == 9) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]] - _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]] + _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]] * _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69729 = 10;
											end
											if (_69729 == 2) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3 + 0]] * _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6974[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69729 = 3;
											end
											if (_69729 == 8) then
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[1 + 1]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_69729 = 9;
											end
											if (_69729 == 3) then
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[7 - 4]][_69101[3 + 1]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6974[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69729 = 4;
											end
											if (_69729 == 0) then
												_69730 = nil;
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69729 = 1;
											end
											if (_69729 == 5) then
												_6993 = _6993 + (127 - (55 + 71));
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]] + _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69729 = 6;
											end
											if (_69729 == 10) then
												_69101 = _6989[_6993];
												_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6993 = _69101[3];
												break;
											end
											if (_69729 == 1) then
												_6999[_69101[2]] = _6999[_69101[2 + 1]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[165 - (92 + 71)]] = _6999[_69101[2 + 1]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2 - 0]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[767 - (574 + 191)]] = _6999[_69101[3]] + _6999[_69101[4]];
												_69729 = 2;
											end
											if (_69729 == 7) then
												_69101 = _6989[_6993];
												_6999[_69101[1792 - (573 + 1217)]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + (2 - 1);
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]] * _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6974[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69729 = 8;
											end
											if (_69729 == 4) then
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + (850 - (254 + 595));
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]] + _6999[_69101[4]];
												_69729 = 5;
											end
											if (_69729 == 6) then
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]] * _69101[4];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_69730 = _69101[2];
												_6999[_69730] = _6999[_69730](_6921(_6999, _69730 + 1, _69101[3 - 0]));
												_6993 = _6993 + 1;
												_69729 = 7;
											end
										end
									end
								elseif (_69102 == (97 - 36)) then
									_6999[_69101[2]][_69101[3]] = _69101[943 - (714 + 225)];
								else
									local _69733;
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69733 = _69101[2];
									_6999[_69733] = _6999[_69733](_6921(_6999, _69733 + 1, _69101[3]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = {};
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69733 = _69101[2];
									_6999[_69733] = _6999[_69733](_6921(_6999, _69733 + 1, _69101[8 - 5]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69733 = _69101[2];
									_6999[_69733] = _6999[_69733](_6921(_6999, _69733 + 1, _69101[3]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]][_6999[_69101[3]]] = _6999[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2 - 0]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[1 + 1]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3 - 0];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69733 = _69101[2];
									_6999[_69733] = _6999[_69733](_6921(_6999, _69733 + 1, _69101[3]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[808 - (118 + 688)]] = _6973[_69101[51 - (25 + 23)]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69733 = _69101[2];
									_6999[_69733] = _6999[_69733](_6921(_6999, _69733 + 1, _69101[3]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]][_6999[_69101[3]]] = _6999[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1 + 0;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + (1887 - (927 + 959));
									_69101 = _6989[_6993];
									_6999[_69101[6 - 4]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69733 = _69101[2];
									_6999[_69733] = _6999[_69733](_6921(_6999, _69733 + 1, _69101[3]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69733 = _69101[2];
									_6999[_69733] = _6999[_69733](_6921(_6999, _69733 + 1, _69101[3]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]][_6999[_69101[3]]] = _6999[_69101[736 - (16 + 716)]];
									_6993 = _6993 + (1 - 0);
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + (98 - (11 + 86));
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + (2 - 1);
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69733 = _69101[2];
									_6999[_69733] = _6999[_69733](_6921(_6999, _69733 + 1, _69101[3]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]][_6999[_69101[3]]] = _69101[4];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69733 = _69101[2];
									_6999[_69733](_6921(_6999, _69733 + 1, _69101[3]));
								end
							elseif (_69102 <= 65) then
								if (_69102 <= 63) then
									_6999[_69101[2]] = _6999[_69101[3]] - _69101[4];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6974[_69101[3]] = _6999[_69101[2]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6974[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[288 - (175 + 110)];
									_6993 = _6993 + (2 - 1);
									_69101 = _6989[_6993];
									_6993 = _69101[3];
								elseif (_69102 == 64) then
									local _69750 = _69101[2];
									local _69751, _69752 = _6992(_6999[_69750](_6999[_69750 + 1]));
									_6994 = (_69752 + _69750) - 1;
									local _69753 = 0;
									for _691701 = _69750, _6994 do
										_69753 = _69753 + 1;
										_6999[_691701] = _69751[_69753];
									end
								else
									local _69754 = 0;
									local _69755;
									local _69756;
									local _69757;
									local _69758;
									while true do
										if (_69754 == 4) then
											for _694864 = _69758, _6994 do
												local _694865 = 0;
												while true do
													if (_694865 == 0) then
														_69755 = _69755 + 1;
														_6999[_694864] = _69756[_69755];
														break;
													end
												end
											end
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69758 = _69101[2];
											_69754 = 5;
										end
										if (_69754 == 3) then
											_69758 = _69101[1798 - (503 + 1293)];
											_69756, _69757 = _6992(_6999[_69758](_6921(_6999, _69758 + 1, _69101[3])));
											_6994 = (_69757 + _69758) - 1;
											_69755 = 0;
											_69754 = 4;
										end
										if (_69754 == 1) then
											_6993 = _6993 + (4 - 3);
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69754 = 2;
										end
										if (_69754 == 5) then
											_6999[_69758] = _6999[_69758](_6921(_6999, _69758 + (2 - 1), _6994));
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											if not _6999[_69101[2]] then
												_6993 = _6993 + 1;
											else
												_6993 = _69101[3];
											end
											break;
										end
										if (_69754 == 2) then
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69754 = 3;
										end
										if (_69754 == 0) then
											_69755 = nil;
											_69756, _69757 = nil;
											_69758 = nil;
											_6999[_69101[2]] = _6973[_69101[3]];
											_69754 = 1;
										end
									end
								end
							elseif (_69102 <= 67) then
								if (_69102 == 66) then
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								else
									local _69761 = 0;
									local _69762;
									local _69763;
									local _69764;
									local _69765;
									local _69766;
									while true do
										if (_69761 == 14) then
											_6999[_69101[2]] = _6973[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6973[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69761 = 15;
										end
										if (_69761 == 10) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6973[_69101[3]];
											_6993 = _6993 + 1 + 0;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69761 = 11;
										end
										if (_69761 == 8) then
											_6993 = _6993 + (860 - (240 + 619));
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6974[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69761 = 9;
										end
										if (_69761 == 23) then
											_6999[_69101[2]] = _6974[_69101[3]];
											_6993 = _6993 + (339 - (118 + 220));
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6973[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69761 = 24;
										end
										if (9 == _69761) then
											_69766 = _69101[2];
											_6999[_69766](_6999[_69766 + 1]);
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6974[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_69761 = 10;
										end
										if (_69761 == 0) then
											_69762 = nil;
											_69763 = nil;
											_69762, _69764 = nil;
											_69765 = nil;
											_69766 = nil;
											_6999[_69101[2]] = _6974[_69101[3]];
											_6993 = _6993 + 1 + 0;
											_69101 = _6989[_6993];
											_69761 = 1;
										end
										if (_69761 == 15) then
											_69101 = _6989[_6993];
											_69766 = _69101[2];
											_6999[_69766] = _6999[_69766](_6999[_69766 + 1]);
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69761 = 16;
										end
										if (2 == _69761) then
											_69101 = _6989[_6993];
											_6999[_69101[2 + 0]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69766 = _69101[2];
											_69761 = 3;
										end
										if (_69761 == 24) then
											_69101 = _6989[_6993];
											_69766 = _69101[1 + 1];
											_69765 = _6999[_69101[452 - (108 + 341)]];
											_6999[_69766 + 1] = _69765;
											_6999[_69766] = _69765[_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69766 = _69101[2];
											_69761 = 25;
										end
										if (_69761 == 26) then
											_69763 = 1493 - (711 + 782);
											for _694866 = _69766, _69101[4] do
												_69763 = _69763 + 1;
												_6999[_694866] = _69762[_69763];
											end
											_6993 = _6993 + (1 - 0);
											_69101 = _6989[_6993];
											_6993 = _69101[472 - (270 + 199)];
											break;
										end
										if (_69761 == 25) then
											_69762, _69764 = _6992(_6999[_69766](_6999[_69766 + 1]));
											_6994 = (_69764 + _69766) - 1;
											_69763 = 0 + 0;
											for _694869 = _69766, _6994 do
												_69763 = _69763 + 1;
												_6999[_694869] = _69762[_69763];
											end
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69766 = _69101[2];
											_69762 = {_6999[_69766](_6921(_6999, _69766 + (4 - 3), _6994))};
											_69761 = 26;
										end
										if (_69761 == 1) then
											_69766 = _69101[2];
											_69765 = _6999[_69101[3]];
											_6999[_69766 + 1] = _69765;
											_6999[_69766] = _69765[_69101[4]];
											_6993 = _6993 + (1062 - (810 + 251));
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6973[_69101[3]];
											_6993 = _6993 + 1;
											_69761 = 2;
										end
										if (_69761 == 7) then
											_6999[_69101[2]] = _6973[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69766 = _69101[2];
											_6999[_69766] = _6999[_69766](_6921(_6999, _69766 + 1, _69101[3]));
											_6993 = _6993 + (3 - 2);
											_69101 = _6989[_6993];
											_6973[_69101[3]] = _6999[_69101[2]];
											_69761 = 8;
										end
										if (_69761 == 22) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2 + 0]][_69101[3]] = _6999[_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69761 = 23;
										end
										if (_69761 == 6) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69766 = _69101[2];
											_69765 = _6999[_69101[3]];
											_6999[_69766 + 1] = _69765;
											_6999[_69766] = _69765[_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69761 = 7;
										end
										if (_69761 == 4) then
											_6994 = (_69764 + _69766) - (534 - (43 + 490));
											_69763 = 0;
											for _694872 = _69766, _6994 do
												local _694873 = 0;
												while true do
													if (_694873 == 0) then
														_69763 = _69763 + 1;
														_6999[_694872] = _69762[_69763];
														break;
													end
												end
											end
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69766 = _69101[735 - (711 + 22)];
											_6999[_69766] = _6999[_69766](_6921(_6999, _69766 + 1, _6994));
											_6993 = _6993 + 1;
											_69761 = 5;
										end
										if (_69761 == 19) then
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6974[_69101[3]];
											_69761 = 20;
										end
										if (_69761 == 16) then
											_6999[_69101[2]] = _6974[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69761 = 17;
										end
										if (_69761 == 21) then
											_69766 = _69101[2];
											_6999[_69766] = _6999[_69766](_6921(_6999, _69766 + 1, _69101[3 - 0]));
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2 + 0]][_69101[3]] = _6999[_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[1 + 1]] = _6974[_69101[340 - (10 + 327)]];
											_69761 = 22;
										end
										if (_69761 == 5) then
											_69101 = _6989[_6993];
											_6974[_69101[3]] = _6999[_69101[2]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6974[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_69761 = 6;
										end
										if (_69761 == 11) then
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69766 = _69101[2 - 0];
											_69762, _69764 = _6992(_6999[_69766](_6921(_6999, _69766 + 1 + 0, _69101[3])));
											_6994 = (_69764 + _69766) - 1;
											_69763 = 0;
											for _694874 = _69766, _6994 do
												local _694875 = 0;
												while true do
													if (_694875 == 0) then
														_69763 = _69763 + 1;
														_6999[_694874] = _69762[_69763];
														break;
													end
												end
											end
											_69761 = 12;
										end
										if (_69761 == 18) then
											_6999[_69766] = _6999[_69766](_6921(_6999, _69766 + (4 - 3), _69101[3]));
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6974[_69101[9 - 6]];
											_6993 = _6993 + 1;
											_69761 = 19;
										end
										if (_69761 == 20) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[1742 - (404 + 1335)]][_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[409 - (183 + 223)];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69761 = 21;
										end
										if (_69761 == 17) then
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[2 + 1];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69766 = _69101[2];
											_69761 = 18;
										end
										if (_69761 == 3) then
											_69762, _69764 = _6992(_6999[_69766](_6921(_6999, _69766 + 1, _69101[3])));
											_6994 = (_69764 + _69766) - 1;
											_69763 = 0;
											for _694876 = _69766, _6994 do
												local _694877 = 0;
												while true do
													if (_694877 == 0) then
														_69763 = _69763 + 1;
														_6999[_694876] = _69762[_69763];
														break;
													end
												end
											end
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69766 = _69101[1 + 1];
											_69762, _69764 = _6992(_6999[_69766](_6921(_6999, _69766 + 1 + 0, _6994)));
											_69761 = 4;
										end
										if (_69761 == 12) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69766 = _69101[2];
											_6999[_69766] = _6999[_69766](_6921(_6999, _69766 + 1, _6994));
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[1746 - (1344 + 400)]] = _6973[_69101[3]];
											_6993 = _6993 + (406 - (255 + 150));
											_69761 = 13;
										end
										if (_69761 == 13) then
											_69101 = _6989[_6993];
											_69766 = _69101[2];
											_6999[_69766] = _6999[_69766]();
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
											_6993 = _6993 + 1 + 0;
											_69101 = _6989[_6993];
											_69761 = 14;
										end
									end
								end
							elseif (_69102 > 68) then
								local _69767 = 0;
								local _69768;
								local _69769;
								while true do
									if (_69767 == 3) then
										for _694878 = _69101[2], _69101[3] do
											_6999[_694878] = nil;
										end
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6973[_69101[3]] = _6999[_69101[2]];
										_69767 = 4;
									end
									if (_69767 == 0) then
										_69768 = nil;
										_69769 = nil;
										_69769 = _69101[1 + 1];
										_69768 = _6999[_69101[3]];
										_69767 = 1;
									end
									if (_69767 == 1) then
										_6999[_69769 + 1] = _69768;
										_6999[_69769] = _69768[_69101[4]];
										_6993 = _6993 + (1820 - (580 + 1239));
										_69101 = _6989[_6993];
										_69767 = 2;
									end
									if (_69767 == 4) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6993 = _69101[3 + 0];
										break;
									end
									if (_69767 == 2) then
										_69769 = _69101[2];
										_6999[_69769](_6999[_69769 + (2 - 1)]);
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69767 = 3;
									end
								end
							else
								_6999[_69101[2]] = _6999[_69101[3]] % _69101[4];
							end
						elseif (_69102 <= (3 + 73)) then
							if (_69102 <= (32 + 40)) then
								if (_69102 <= 70) then
									local _69226 = 0;
									local _69227;
									while true do
										if (_69226 == 0) then
											_69227 = nil;
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69226 = 1;
										end
										if (_69226 == 3) then
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69226 = 4;
										end
										if (_69226 == 4) then
											_69101 = _6989[_6993];
											_69227 = _69101[2];
											_6999[_69227] = _6999[_69227](_6921(_6999, _69227 + 1, _69101[3]));
											_69226 = 5;
										end
										if (_69226 == 1) then
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69226 = 2;
										end
										if (5 == _69226) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[4 - 2]][_69101[3]] = _6999[_69101[4]];
											break;
										end
										if (2 == _69226) then
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69226 = 3;
										end
									end
								elseif (_69102 > 71) then
									local _69771;
									local _69772;
									_6999[_69101[2]] = _6999[_69101[3]][_69101[3 + 1]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69772 = _69101[2];
									_69771 = _6999[_69101[3]];
									_6999[_69772 + (1168 - (645 + 522))] = _69771;
									_6999[_69772] = _69771[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6974[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[1792 - (1010 + 780)]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3] ~= 0;
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69772 = _69101[2];
									_6999[_69772](_6921(_6999, _69772 + 1, _69101[3 + 0]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69772 = _69101[9 - 7];
									_69771 = _6999[_69101[3]];
									_6999[_69772 + 1] = _69771;
									_6999[_69772] = _69771[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6974[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[8 - 5]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[1840 - (1045 + 791)]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3] ~= 0;
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69772 = _69101[2];
									_6999[_69772](_6921(_6999, _69772 + 1, _69101[3]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
								else
									local _69790 = 0;
									local _69791;
									local _69792;
									while true do
										if (_69790 == 2) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6974[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[4 - 1]][_69101[4]];
											_69790 = 3;
										end
										if (_69790 == 4) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69792 = _69101[2];
											_6999[_69792](_6921(_6999, _69792 + 1, _69101[3]));
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69790 = 5;
										end
										if (0 == _69790) then
											_69791 = nil;
											_69792 = nil;
											_6999[_69101[2]] = _6999[_69101[7 - 4]][_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_69790 = 1;
										end
										if (_69790 == 1) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69792 = _69101[2];
											_69791 = _6999[_69101[3]];
											_6999[_69792 + 1] = _69791;
											_6999[_69792] = _69791[_69101[4]];
											_69790 = 2;
										end
										if (_69790 == 5) then
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6993 = _69101[3];
											break;
										end
										if (_69790 == 3) then
											_6993 = _6993 + (506 - (351 + 154));
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3] ~= 0;
											_69790 = 4;
										end
									end
								end
							elseif (_69102 <= 74) then
								if (_69102 == (1647 - (1281 + 293))) then
									local _69793 = 0;
									local _69794;
									local _69795;
									while true do
										if (4 == _69793) then
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69793 = 5;
										end
										if (_69793 == 3) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69793 = 4;
										end
										if (2 == _69793) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69795 = _69101[2];
											_6999[_69795] = _6999[_69795]();
											_69793 = 3;
										end
										if (_69793 == 5) then
											if _6999[_69101[2]] then
												_6993 = _6993 + (2 - 1);
											else
												_6993 = _69101[3];
											end
											break;
										end
										if (1 == _69793) then
											for _694880 = _69795, _69794 do
												_6999[_694880] = _6995[_694880 - _69795];
											end
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6974[_69101[3]];
											_69793 = 2;
										end
										if (_69793 == 0) then
											_69794 = nil;
											_69795 = nil;
											_69795 = _69101[2];
											_69794 = _69101[269 - (28 + 238)];
											_69793 = 1;
										end
									end
								else
									_6999[_69101[2]] = _6940(_6990[_69101[3]], nil, _6974);
								end
							elseif (_69102 > 75) then
								_6999[_69101[1561 - (1381 + 178)]] = _6999[_69101[3]] * _6999[_69101[4]];
							else
								_6999[_69101[2]] = _6999[_69101[3]] + _69101[4];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6974[_69101[3]] = _6999[_69101[2]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6973[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3 + 0]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_6993 = _69101[10 - 7];
							end
						elseif (_69102 <= 79) then
							if (_69102 <= (40 + 37)) then
								local _69228 = 0;
								local _69229;
								local _69230;
								local _69231;
								local _69232;
								local _69233;
								while true do
									if (22 == _69228) then
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_69228 = 23;
									end
									if (16 == _69228) then
										_6999[_69101[6 - 4]] = _69101[3];
										_6993 = _6993 + (1995 - (109 + 1885));
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[1472 - (1269 + 200)];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69233 = _69101[2];
										_6999[_69233] = _6999[_69233](_6921(_6999, _69233 + 1, _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69228 = 17;
									end
									if (_69228 == 8) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + (1727 - (1668 + 58));
										_69228 = 9;
									end
									if (_69228 == 18) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[1 + 2];
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69233 = _69101[2];
										_6999[_69233] = _6999[_69233](_6921(_6999, _69233 + 1 + 0, _69101[3]));
										_69228 = 19;
									end
									if (_69228 == 25) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[14 - 11]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6973[_69101[1622 - (1427 + 192)]];
										break;
									end
									if (_69228 == 15) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[2 + 1]][_69101[4]];
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2 + 0]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69228 = 16;
									end
									if (_69228 == 4) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69233 = _69101[2];
										_69230, _69231 = _6992(_6999[_69233](_6921(_6999, _69233 + 1, _69101[3])));
										_6994 = (_69231 + _69233) - 1;
										_69228 = 5;
									end
									if (_69228 == 9) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69233 = _69101[2];
										_6999[_69233] = _6999[_69233](_6921(_6999, _69233 + 1, _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[629 - (512 + 114)]] = _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69228 = 10;
									end
									if (_69228 == 24) then
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[3]] = _6999[_69101[2 + 2]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[1436 - (797 + 636)]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69228 = 25;
									end
									if (_69228 == 20) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[13 - 9]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69228 = 21;
									end
									if (_69228 == 13) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69228 = 14;
									end
									if (_69228 == 11) then
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69233 = _69101[5 - 3];
										_6999[_69233] = _6999[_69233](_6921(_6999, _69233 + 1, _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69228 = 12;
									end
									if (_69228 == 10) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69228 = 11;
									end
									if (_69228 == 21) then
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69233 = _69101[2];
										_6999[_69233] = _6999[_69233](_6921(_6999, _69233 + 1, _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69228 = 22;
									end
									if (_69228 == 23) then
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_6999[_69101[2 + 0]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69233 = _69101[2];
										_6999[_69233] = _6999[_69233](_6921(_6999, _69233 + 1, _69101[3]));
										_69228 = 24;
									end
									if (_69228 == 7) then
										_6999[_69101[1 + 1]][_69101[3]] = _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2 + 0]][_69101[3]] = _69101[4];
										_6993 = _6993 + (3 - 2);
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_69228 = 8;
									end
									if (_69228 == 0) then
										_69229 = nil;
										_69230, _69231 = nil;
										_69232 = nil;
										_69233 = nil;
										_6999[_69101[2]][_69101[3]] = _69101[4];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6973[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69228 = 1;
									end
									if (_69228 == 6) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69228 = 7;
									end
									if (_69228 == 2) then
										_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3 + 0]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_69228 = 3;
									end
									if (_69228 == 12) then
										_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + (1 - 0);
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_69228 = 13;
									end
									if (_69228 == 1) then
										_6999[_69101[2]] = _69101[473 - (381 + 89)];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69233 = _69101[2];
										_6999[_69233] = _6999[_69233](_6921(_6999, _69233 + 1, _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69228 = 2;
									end
									if (_69228 == 14) then
										_69101 = _6989[_6993];
										_69233 = _69101[2];
										_6999[_69233] = _6999[_69233](_6921(_6999, _69233 + 1, _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[6 - 4]][_69101[3]] = _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69228 = 15;
									end
									if (_69228 == 5) then
										_69229 = 0 - 0;
										for _692069 = _69233, _6994 do
											_69229 = _69229 + 1;
											_6999[_692069] = _69230[_69229];
										end
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69233 = _69101[1158 - (1074 + 82)];
										_6999[_69233] = _6999[_69233](_6921(_6999, _69233 + 1, _6994));
										_6993 = _6993 + (1 - 0);
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[1787 - (214 + 1570)]] = _6999[_69101[4]];
										_6993 = _6993 + (1456 - (990 + 465));
										_69228 = 6;
									end
									if (_69228 == 17) then
										_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[3 - 1]][_69101[818 - (98 + 717)]] = _69101[4];
										_6993 = _6993 + (827 - (802 + 24));
										_69101 = _6989[_6993];
										_6999[_69101[2 - 0]][_69101[3]] = _69101[4];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2 - 0]] = _6973[_69101[3]];
										_69228 = 18;
									end
									if (3 == _69228) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69233 = _69101[2 + 0];
										_69232 = _6999[_69101[3]];
										_6999[_69233 + 1] = _69232;
										_6999[_69233] = _69232[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6973[_69101[3]];
										_6993 = _6993 + 1;
										_69228 = 4;
									end
									if (_69228 == 19) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_6999[_69101[5 - 3]][_69101[3]] = _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69228 = 20;
									end
								end
							elseif (_69102 > 78) then
								local _69807;
								_6999[_69101[2]] = _6974[_69101[2 + 1]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69807 = _69101[4 - 2];
								_6999[_69807] = _6999[_69807]();
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = {};
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6973[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_69807 = _69101[2];
								_6999[_69807] = _6999[_69807](_6921(_6999, _69807 + 1, _69101[329 - (192 + 134)]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_6999[_69101[3]]] = _69101[4];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6973[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[1278 - (316 + 960)]] = _69101[2 + 1];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69807 = _69101[2];
								_6999[_69807] = _6999[_69807](_6921(_6999, _69807 + 1, _69101[3]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_6999[_69101[3 + 0]]] = _69101[4];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2 + 0]] = _6973[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69807 = _69101[2];
								_6999[_69807] = _6999[_69807](_6921(_6999, _69807 + 1, _69101[3]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_6999[_69101[3]]] = _69101[4];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								for _691872 = _69101[2], _69101[3] do
									_6999[_691872] = nil;
								end
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[7 - 5]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6973[_69101[554 - (83 + 468)]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[1809 - (1202 + 604)];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69807 = _69101[2];
								_6999[_69807] = _6999[_69807](_6921(_6999, _69807 + 1, _69101[3]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
							else
								local _69828 = 0;
								local _69829;
								local _69830;
								local _69831;
								local _69832;
								local _69833;
								while true do
									if (_69828 == 8) then
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69828 = 9;
									end
									if (_69828 == 7) then
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69828 = 8;
									end
									if (_69828 == 5) then
										_6999[_69833] = _6999[_69833](_6921(_6999, _69833 + 1, _6994));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69828 = 6;
									end
									if (_69828 == 6) then
										_6999[_69101[2]] = _69101[3] ~= 0;
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6974[_69101[3]] = _6999[_69101[2]];
										_6993 = _6993 + (1 - 0);
										_69101 = _6989[_6993];
										_69828 = 7;
									end
									if (_69828 == 1) then
										_69101 = _6989[_6993];
										_69833 = _69101[2];
										_69832 = _6999[_69101[13 - 10]];
										_6999[_69833 + 1] = _69832;
										_6999[_69833] = _69832[_69101[4]];
										_6993 = _6993 + 1;
										_69828 = 2;
									end
									if (_69828 == 2) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6973[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69828 = 3;
									end
									if (9 == _69828) then
										_69832 = _6999[_69101[4]];
										if _69832 then
											_6993 = _6993 + 1;
										else
											_6999[_69101[2]] = _69832;
											_6993 = _69101[3];
										end
										break;
									end
									if (_69828 == 3) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69833 = _69101[2];
										_69830, _69831 = _6992(_6999[_69833](_6921(_6999, _69833 + 1, _69101[3])));
										_69828 = 4;
									end
									if (_69828 == 4) then
										_6994 = (_69831 + _69833) - 1;
										_69829 = 0;
										for _694883 = _69833, _6994 do
											_69829 = _69829 + 1;
											_6999[_694883] = _69830[_69829];
										end
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69833 = _69101[2];
										_69828 = 5;
									end
									if (_69828 == 0) then
										_69829 = nil;
										_69830, _69831 = nil;
										_69832 = nil;
										_69833 = nil;
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69828 = 1;
									end
								end
							end
						elseif (_69102 <= 81) then
							if (_69102 == 80) then
								local _69834 = 0;
								while true do
									if (_69834 == 2) then
										_69101 = _6989[_6993];
										_6999[_69101[5 - 3]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69834 = 3;
									end
									if (_69834 == 0) then
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_69834 = 1;
									end
									if (_69834 == 1) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69834 = 2;
									end
									if (_69834 == 4) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69834 = 5;
									end
									if (5 == _69834) then
										_69101 = _6989[_6993];
										if not _6999[_69101[2]] then
											_6993 = _6993 + 1;
										else
											_6993 = _69101[3];
										end
										break;
									end
									if (3 == _69834) then
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_69834 = 4;
									end
								end
							else
								local _69835 = 0;
								local _69836;
								local _69837;
								local _69838;
								local _69839;
								local _69840;
								while true do
									if (_69835 == 2) then
										_69840 = _69101[2];
										_69839 = _6999[_69101[3]];
										_6999[_69840 + 1] = _69839;
										_6999[_69840] = _69839[_69101[4 + 0]];
										_6993 = _6993 + 1;
										_69835 = 3;
									end
									if (_69835 == 0) then
										_69836 = nil;
										_69837, _69838 = nil;
										_69839 = nil;
										_69840 = nil;
										_6999[_69101[327 - (45 + 280)]] = _6973[_69101[3]];
										_69835 = 1;
									end
									if (_69835 == 9) then
										_6999[_69101[2]] = _6999[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69840 = _69101[2];
										_6999[_69840] = _6999[_69840](_6921(_6999, _69840 + (2 - 1), _69101[3]));
										_69835 = 10;
									end
									if (_69835 == 10) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6974[_69101[1037 - (125 + 909)]] = _6999[_69101[2]];
										break;
									end
									if (8 == _69835) then
										_69839 = _6999[_69101[3]];
										_6999[_69840 + 1] = _69839;
										_6999[_69840] = _69839[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69835 = 9;
									end
									if (_69835 == 7) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69840 = _69101[2];
										_69835 = 8;
									end
									if (_69835 == 4) then
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69835 = 5;
									end
									if (_69835 == 3) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6973[_69101[3 + 0]];
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[2 + 1];
										_69835 = 4;
									end
									if (_69835 == 1) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69835 = 2;
									end
									if (_69835 == 5) then
										_69840 = _69101[2];
										_69837, _69838 = _6992(_6999[_69840](_6921(_6999, _69840 + 1, _69101[3])));
										_6994 = (_69838 + _69840) - 1;
										_69836 = 0;
										for _694886 = _69840, _6994 do
											local _694887 = 0;
											while true do
												if (_694887 == 0) then
													_69836 = _69836 + 1;
													_6999[_694886] = _69837[_69836];
													break;
												end
											end
										end
										_69835 = 6;
									end
									if (6 == _69835) then
										_6993 = _6993 + (1 - 0);
										_69101 = _6989[_6993];
										_69840 = _69101[1913 - (340 + 1571)];
										_6999[_69840] = _6999[_69840](_6921(_6999, _69840 + 1 + 0, _6994));
										_6993 = _6993 + (1773 - (1733 + 39));
										_69835 = 7;
									end
								end
							end
						elseif (_69102 == 82) then
							local _69841;
							local _69842;
							local _69841, _69843;
							local _69844;
							local _69845;
							_6999[_69101[2]] = _6973[_69101[1951 - (1096 + 852)]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_69845 = _69101[2];
							_6999[_69845] = _6999[_69845](_6999[_69845 + 1]);
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_69845 = _69101[2];
							_69844 = _6999[_69101[3]];
							_6999[_69845 + 1] = _69844;
							_6999[_69845] = _69844[_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_69845 = _69101[2];
							_69841, _69843 = _6992(_6999[_69845](_6999[_69845 + 1]));
							_6994 = (_69843 + _69845) - 1;
							_69842 = 0;
							for _691874 = _69845, _6994 do
								_69842 = _69842 + 1;
								_6999[_691874] = _69841[_69842];
							end
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_69845 = _69101[2];
							_69841 = {_6999[_69845](_6921(_6999, _69845 + 1, _6994))};
							_69842 = 0;
							for _691877 = _69845, _69101[4] do
								local _691878 = 0;
								while true do
									if (_691878 == 0) then
										_69842 = _69842 + 1;
										_6999[_691877] = _69841[_69842];
										break;
									end
								end
							end
							_6993 = _6993 + 1 + 0;
							_69101 = _6989[_6993];
							_6993 = _69101[3];
						else
							local _69855 = 0;
							local _69856;
							while true do
								if (_69855 == 4) then
									_6999[_69856](_6999[_69856 + 1]);
									_6993 = _6993 + (1 - 0);
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69855 = 5;
								end
								if (_69855 == 5) then
									_6999[_69101[2]] = _6974[_69101[3]];
									_6993 = _6993 + 1 + 0;
									_69101 = _6989[_6993];
									_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69855 = 6;
								end
								if (_69855 == 2) then
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6974[_69101[3]];
									_69855 = 3;
								end
								if (_69855 == 0) then
									_69856 = nil;
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69855 = 1;
								end
								if (3 == _69855) then
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69856 = _69101[2];
									_69855 = 4;
								end
								if (6 == _69855) then
									_6993 = _69101[3];
									break;
								end
								if (_69855 == 1) then
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69856 = _69101[2];
									_6999[_69856] = _6999[_69856](_6921(_6999, _69856 + 1, _69101[3]));
									_69855 = 2;
								end
							end
						end
					elseif (_69102 <= 97) then
						if (_69102 <= 90) then
							if (_69102 <= 86) then
								if (_69102 <= 84) then
									local _69234 = 0;
									local _69235;
									local _69236;
									local _69237;
									while true do
										if (_69234 == 12) then
											_69101 = _6989[_6993];
											_69237 = _69101[2];
											_6999[_69237](_6921(_6999, _69237 + 1, _69101[3]));
											break;
										end
										if (_69234 == 0) then
											_69235 = nil;
											_69236 = nil;
											_69237 = nil;
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69237 = _69101[2];
											_69236 = _6999[_69101[3]];
											_6999[_69237 + 1] = _69236;
											_6999[_69237] = _69236[_69101[4]];
											_69234 = 1;
										end
										if (3 == _69234) then
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69237 = _69101[1 + 1];
											_6999[_69237] = _6999[_69237](_6921(_6999, _69237 + 1, _69101[3]));
											_6993 = _6993 + 1;
											_69234 = 4;
										end
										if (_69234 == 10) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + (1906 - (830 + 1075));
											_69101 = _6989[_6993];
											_6999[_69101[526 - (303 + 221)]] = _69101[3];
											_6993 = _6993 + (1270 - (231 + 1038));
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3 + 0];
											_6993 = _6993 + (1163 - (171 + 991));
											_69234 = 11;
										end
										if (_69234 == 5) then
											_69237 = _69101[2];
											_6999[_69237] = _6999[_69237](_6921(_6999, _69237 + 1, _69101[3]));
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6974[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6973[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69234 = 6;
										end
										if (_69234 == 4) then
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6973[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69234 = 5;
										end
										if (_69234 == 1) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6973[_69101[3]];
											_6993 = _6993 + (513 - (409 + 103));
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69234 = 2;
										end
										if (_69234 == 8) then
											_6999[_69101[2]] = _69235;
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2 + 0]][_6999[_69101[3]]] = _6999[_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6973[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_69234 = 9;
										end
										if (_69234 == 9) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[665 - (174 + 489)]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69237 = _69101[2];
											_6999[_69237] = _6999[_69237](_6921(_6999, _69237 + 1, _69101[3]));
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[5 - 3]] = _6974[_69101[3]];
											_69234 = 10;
										end
										if (_69234 == 6) then
											_69237 = _69101[1319 - (1114 + 203)];
											_6999[_69237] = _6999[_69237](_6999[_69237 + 1]);
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6973[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69234 = 7;
										end
										if (_69234 == 2) then
											_69101 = _6989[_6993];
											_69237 = _69101[2];
											_6999[_69237] = _6999[_69237](_6921(_6999, _69237 + 1, _69101[3]));
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = {};
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[238 - (46 + 190)]] = _6973[_69101[98 - (51 + 44)]];
											_6993 = _6993 + 1;
											_69234 = 3;
										end
										if (_69234 == 11) then
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69237 = _69101[2];
											_6999[_69237] = _6999[_69237](_6921(_6999, _69237 + 1, _69101[3]));
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]][_6999[_69101[12 - 9]]] = _6999[_69101[4]];
											_6993 = _6993 + (2 - 1);
											_69234 = 12;
										end
										if (_69234 == 7) then
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69237 = _69101[2];
											_6999[_69237] = _6999[_69237](_6921(_6999, _69237 + 1, _69101[729 - (228 + 498)]));
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69236 = _69101[3];
											_69235 = _6999[_69236];
											for _692072 = _69236 + 1, _69101[1 + 3] do
												_69235 = _69235 .. _6999[_692072];
											end
											_69234 = 8;
										end
									end
								elseif (_69102 == 85) then
									local _69857;
									local _69858;
									_6999[_69101[2]][_69101[3]] = _69101[4];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]][_69101[3]] = _69101[4];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]][_69101[3]] = _69101[4];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]][_69101[3]] = _69101[4];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[4 - 2]] = _6999[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = {};
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2 + 0]][_69101[10 - 7]] = _69101[4];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]][_69101[3]] = _69101[4];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]][_69101[8 - 5]] = _69101[4];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]][_69101[3]] = _69101[4];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2 - 0]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69858 = _69101[2];
									_69857 = _6999[_69101[3]];
									_6999[_69858 + 1] = _69857;
									_6999[_69858] = _69857[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69858 = _69101[2];
									_6999[_69858](_6999[_69858 + 1]);
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69858 = _69101[2];
									_69857 = _6999[_69101[3]];
									_6999[_69858 + 1] = _69857;
									_6999[_69858] = _69857[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69858 = _69101[2];
									_6999[_69858](_6999[_69858 + 1]);
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[6 - 4]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]][_69101[3]] = _69101[4];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6974[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[1250 - (111 + 1137)]] = _6999[_69101[161 - (91 + 67)]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[8 - 5]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[1 + 1]][_69101[3]] = _69101[4];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3] ~= 0;
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6974[_69101[526 - (423 + 100)]] = _6999[_69101[2]];
								else
									_6999[_69101[1 + 1]] = _69101[3] ~= 0;
								end
							elseif (_69102 <= 88) then
								if (_69102 > 87) then
									local _69882 = 0;
									local _69883;
									while true do
										if (_69882 == 1) then
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[3]];
											_6993 = _6993 + 1;
											_69882 = 2;
										end
										if (_69882 == 5) then
											_6993 = _69101[3];
											break;
										end
										if (_69882 == 4) then
											do
												return _6921(_6999, _69883, _6994);
											end
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69882 = 5;
										end
										if (2 == _69882) then
											_69101 = _6989[_6993];
											_69883 = _69101[5 - 3];
											do
												return _6999[_69883](_6921(_6999, _69883 + 1, _69101[2 + 1]));
											end
											_69882 = 3;
										end
										if (0 == _69882) then
											_69883 = nil;
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69882 = 1;
										end
										if (_69882 == 3) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69883 = _69101[2];
											_69882 = 4;
										end
									end
								else
									local _69884 = 0;
									local _69885;
									while true do
										if (6 == _69884) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6993 = _69101[3];
											break;
										end
										if (_69884 == 2) then
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69884 = 3;
										end
										if (_69884 == 5) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[4 - 2]][_69101[3]] = _6999[_69101[4]];
											_69884 = 6;
										end
										if (_69884 == 1) then
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69884 = 2;
										end
										if (_69884 == 3) then
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + (2 - 1);
											_69884 = 4;
										end
										if (_69884 == 4) then
											_69101 = _6989[_6993];
											_69885 = _69101[2];
											_6999[_69885] = _6999[_69885](_6921(_6999, _69885 + 1, _69101[3]));
											_69884 = 5;
										end
										if (_69884 == 0) then
											_69885 = nil;
											_6999[_69101[2]] = _6999[_69101[774 - (326 + 445)]][_69101[4]];
											_6993 = _6993 + (4 - 3);
											_69884 = 1;
										end
									end
								end
							elseif (_69102 == 89) then
								local _69886 = 0;
								local _69887;
								local _69888;
								local _69889;
								local _69890;
								local _69891;
								while true do
									if (_69886 == 0) then
										_69887 = nil;
										_69888 = nil;
										_69889, _69890 = nil;
										_69891 = nil;
										_69886 = 1;
									end
									if (_69886 == 2) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6973[_69101[3]];
										_6993 = _6993 + 1;
										_69886 = 3;
									end
									if (_69886 == 7) then
										_69888 = 0;
										for _694890 = _69891, _6994 do
											local _694891 = 0;
											while true do
												if (_694891 == 0) then
													_69888 = _69888 + 1;
													_6999[_694890] = _69889[_69888];
													break;
												end
											end
										end
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69886 = 8;
									end
									if (_69886 == 8) then
										_69891 = _69101[2];
										_69887 = _6999[_69891];
										for _694892 = _69891 + 1, _6994 do
											_6915(_69887, _6999[_694892]);
										end
										break;
									end
									if (_69886 == 5) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										for _694893 = _69101[2], _69101[884 - (614 + 267)] do
											_6999[_694893] = nil;
										end
										_6993 = _6993 + 1;
										_69886 = 6;
									end
									if (_69886 == 1) then
										_6999[_69101[2]] = _6973[_69101[3]];
										_6993 = _6993 + (712 - (530 + 181));
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6973[_69101[3]];
										_69886 = 2;
									end
									if (_69886 == 4) then
										_6999[_69101[2]] = _6973[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]];
										_69886 = 5;
									end
									if (_69886 == 3) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = {};
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69886 = 4;
									end
									if (_69886 == 6) then
										_69101 = _6989[_6993];
										_69891 = _69101[2];
										_69889, _69890 = _6992(_6999[_69891](_6921(_6999, _69891 + 1, _69101[3])));
										_6994 = (_69890 + _69891) - 1;
										_69886 = 7;
									end
								end
							else
								local _69892;
								local _69893;
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69893 = _69101[2];
								_69892 = _6999[_69101[3]];
								_6999[_69893 + 1] = _69892;
								_6999[_69893] = _69892[_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3] ~= 0;
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69893 = _69101[2];
								_6999[_69893](_6921(_6999, _69893 + 1, _69101[3]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6973[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69893 = _69101[2];
								_69892 = _6999[_69101[3]];
								_6999[_69893 + 1] = _69892;
								_6999[_69893] = _69892[_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[35 - (19 + 13)]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69893 = _69101[2];
								_6999[_69893](_6921(_6999, _69893 + 1, _69101[3]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6993 = _69101[3];
							end
						elseif (_69102 <= 93) then
							if (_69102 <= 91) then
								local _69238;
								local _69239;
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[6 - 2]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69239 = _69101[2];
								_69238 = _6999[_69101[3]];
								_6999[_69239 + 1] = _69238;
								_6999[_69239] = _69238[_69101[9 - 5]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[8 - 5]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[1 + 1]] = _6999[_69101[4 - 1]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3] ~= 0;
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69239 = _69101[2];
								_6999[_69239](_6921(_6999, _69239 + 1, _69101[3]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6973[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69239 = _69101[2];
								_69238 = _6999[_69101[3]];
								_6999[_69239 + 1] = _69238;
								_6999[_69239] = _69238[_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[3 - 1]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[1814 - (1293 + 519)]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + (1 - 0);
								_69101 = _6989[_6993];
								_69239 = _69101[2];
								_6999[_69239](_6921(_6999, _69239 + 1, _69101[3]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6993 = _69101[3];
							elseif (_69102 == (239 - 147)) then
								local _69906;
								local _69907;
								_6999[_69101[2]] = _6999[_69101[3]][_69101[7 - 3]];
								_6993 = _6993 + (4 - 3);
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + (2 - 1);
								_69101 = _6989[_6993];
								_69907 = _69101[2];
								_69906 = _6999[_69101[3]];
								_6999[_69907 + 1] = _69906;
								_6999[_69907] = _69906[_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[2 + 1]][_69101[4]];
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[6 - 3]][_69101[4]];
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3] ~= 0;
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69907 = _69101[2];
								_6999[_69907](_6921(_6999, _69907 + 1, _69101[3]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6973[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[1 + 2]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_69907 = _69101[1098 - (709 + 387)];
								_69906 = _6999[_69101[3]];
								_6999[_69907 + 1] = _69906;
								_6999[_69907] = _69906[_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + (1859 - (673 + 1185));
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3] ~= 0;
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69907 = _69101[2];
								_6999[_69907](_6921(_6999, _69907 + 1, _69101[3]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[8 - 5];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6993 = _69101[3];
							else
								local _69925;
								local _69926, _69927;
								local _69928;
								_6999[_69101[2]] = _6973[_69101[3]];
								_6993 = _6993 + (3 - 2);
								_69101 = _6989[_6993];
								_6999[_69101[2 - 0]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_69928 = _69101[2];
								_69926, _69927 = _6992(_6999[_69928](_6921(_6999, _69928 + 1, _69101[3])));
								_6994 = (_69927 + _69928) - 1;
								_69925 = 0 + 0;
								for _691952 = _69928, _6994 do
									_69925 = _69925 + 1;
									_6999[_691952] = _69926[_69925];
								end
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69928 = _69101[2];
								_6999[_69928] = _6999[_69928](_6921(_6999, _69928 + 1, _6994));
							end
						elseif (_69102 <= 95) then
							if (_69102 == 94) then
								local _69936 = 0;
								local _69937;
								while true do
									if (_69936 == 0) then
										_69937 = _69101[2 - 0];
										_6999[_69937] = _6999[_69937](_6999[_69937 + 1]);
										break;
									end
								end
							else
								local _69938 = 0;
								local _69939;
								while true do
									if (_69938 == 1) then
										_6999[_69101[3 - 1]] = _6973[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6973[_69101[3]];
										_69938 = 2;
									end
									if (_69938 == 5) then
										_6999[_69101[1882 - (446 + 1434)]][_69101[3]] = _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										break;
									end
									if (_69938 == 4) then
										_69939 = _69101[2];
										_6999[_69939] = _6999[_69939](_6921(_6999, _69939 + 1, _69101[5 - 2]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69938 = 5;
									end
									if (3 == _69938) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69938 = 4;
									end
									if (_69938 == 2) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69938 = 3;
									end
									if (_69938 == 0) then
										_69939 = nil;
										_6973[_69101[3]] = _6999[_69101[1 + 1]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69938 = 1;
									end
								end
							end
						elseif (_69102 > 96) then
							if (_6999[_69101[2]] < _69101[4]) then
								_6993 = _6993 + 1;
							else
								_6993 = _69101[3];
							end
						else
							local _69940 = 0;
							while true do
								if (_69940 == 0) then
									_6999[_69101[2]][_69101[3]] = _69101[4];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_69940 = 1;
								end
								if (_69940 == 1) then
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[1285 - (1040 + 243)]][_69101[3]] = _69101[4];
									_6993 = _6993 + 1;
									_69940 = 2;
								end
								if (_69940 == 4) then
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]][_69101[3]] = _69101[4];
									_6993 = _6993 + (1932 - (609 + 1322));
									_69940 = 5;
								end
								if (3 == _69940) then
									_6999[_69101[5 - 3]][_69101[3]] = _69101[1851 - (559 + 1288)];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_69940 = 4;
								end
								if (_69940 == 5) then
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									break;
								end
								if (_69940 == 2) then
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69940 = 3;
								end
							end
						end
					elseif (_69102 <= 104) then
						if (_69102 <= 100) then
							if (_69102 <= 98) then
								local _69258;
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[457 - (13 + 441)]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[10 - 7]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[7 - 4] ~= 0;
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3] ~= (0 - 0);
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = {};
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _69101[4];
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _69101[4];
								_6993 = _6993 + (3 - 2);
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _69101[4];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[1 + 1]][_69101[3]] = _69101[4];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = {};
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _69101[4];
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _69101[4];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _69101[4];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _69101[4];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[8 - 5]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[2 + 1]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6973[_69101[4 - 1]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69258 = _69101[2];
								_6999[_69258] = _6999[_69258](_6921(_6999, _69258 + 1, _69101[3]));
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_6999[_69101[2 + 0]] = _6999[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69258 = _69101[2];
								_6999[_69258] = _6999[_69258](_6921(_6999, _69258 + 1, _69101[3 + 0]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _69101[4];
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[436 - (153 + 280)];
								_6993 = _6993 + (2 - 1);
								_69101 = _6989[_6993];
								_69258 = _69101[2];
								_6999[_69258] = _6999[_69258](_6921(_6999, _69258 + 1, _69101[3 + 0]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[2 + 1]] = _6999[_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[3 + 1]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6973[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69258 = _69101[2];
								_6999[_69258] = _6999[_69258](_6921(_6999, _69258 + 1, _69101[3]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69258 = _69101[2];
								_6999[_69258] = _6999[_69258](_6921(_6999, _69258 + 1, _69101[4 - 1]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_6999[_69101[669 - (89 + 578)]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69258 = _69101[2];
								_6999[_69258] = _6999[_69258](_6921(_6999, _69258 + 1, _69101[3]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2 + 0]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[3 - 1]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + (1050 - (572 + 477));
								_69101 = _6989[_6993];
								_69258 = _69101[2];
								_6999[_69258] = _6999[_69258](_6921(_6999, _69258 + 1, _69101[3]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _6999[_69101[1 + 3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								if (_6999[_69101[2]] == _69101[1 + 3]) then
									_6993 = _6993 + 1;
								else
									_6993 = _69101[89 - (84 + 2)];
								end
							elseif (_69102 > (162 - 63)) then
								if _6999[_69101[2]] then
									_6993 = _6993 + 1;
								else
									_6993 = _69101[3];
								end
							else
								local _69942;
								local _69943, _69944;
								local _69945;
								local _69946;
								_6999[_69101[2]]();
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69946 = _69101[2];
								_69945 = _6999[_69101[3]];
								_6999[_69946 + 1] = _69945;
								_6999[_69946] = _69945[_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6973[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69946 = _69101[2];
								_69943, _69944 = _6992(_6999[_69946](_6921(_6999, _69946 + 1, _69101[3])));
								_6994 = (_69944 + _69946) - 1;
								_69942 = 0;
								for _691955 = _69946, _6994 do
									_69942 = _69942 + 1;
									_6999[_691955] = _69943[_69942];
								end
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69946 = _69101[2];
								_6999[_69946] = _6999[_69946](_6921(_6999, _69946 + 1, _6994));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								if _6999[_69101[2]] then
									_6993 = _6993 + 1;
								else
									_6993 = _69101[3];
								end
							end
						elseif (_69102 <= 102) then
							if (_69102 > 101) then
								local _69956;
								local _69957, _69958;
								local _69959;
								local _69960;
								_69960 = _69101[2];
								_69959 = _6999[_69101[3]];
								_6999[_69960 + 1] = _69959;
								_6999[_69960] = _69959[_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6973[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2 + 0]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69960 = _69101[2];
								_69957, _69958 = _6992(_6999[_69960](_6921(_6999, _69960 + (843 - (497 + 345)), _69101[3])));
								_6994 = (_69958 + _69960) - (1 + 0);
								_69956 = 0;
								for _691958 = _69960, _6994 do
									_69956 = _69956 + 1;
									_6999[_691958] = _69957[_69956];
								end
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69960 = _69101[1 + 1];
								_6999[_69960] = _6999[_69960](_6921(_6999, _69960 + 1, _6994));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[1335 - (605 + 728)]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69960 = _69101[2];
								_69959 = _6999[_69101[3]];
								_6999[_69960 + 1] = _69959;
								_6999[_69960] = _69959[_69101[4]];
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6973[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69960 = _69101[2];
								_69957, _69958 = _6992(_6999[_69960](_6921(_6999, _69960 + 1, _69101[3])));
								_6994 = (_69958 + _69960) - 1;
								_69956 = 0 - 0;
								for _691961 = _69960, _6994 do
									_69956 = _69956 + 1;
									_6999[_691961] = _69957[_69956];
								end
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69960 = _69101[2];
								_6999[_69960] = _6999[_69960](_6921(_6999, _69960 + 1, _6994));
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + (3 - 2);
								_69101 = _6989[_6993];
								if (_6999[_69101[2]] == _6999[_69101[4]]) then
									_6993 = _6993 + 1;
								else
									_6993 = _69101[3];
								end
							else
								local _69975 = 0;
								local _69976;
								while true do
									if (_69975 == 0) then
										_69976 = _69101[2];
										_6999[_69976] = _6999[_69976](_6921(_6999, _69976 + 1, _6994));
										break;
									end
								end
							end
						elseif (_69102 > (93 + 10)) then
							local _69977 = 0;
							local _69978;
							while true do
								if (3 == _69977) then
									_69101 = _6989[_6993];
									_69978 = _69101[2];
									_6999[_69978] = _6999[_69978](_6921(_6999, _69978 + 1, _69101[3]));
									_6993 = _6993 + (490 - (457 + 32));
									_69977 = 4;
								end
								if (1 == _69977) then
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3 + 0];
									_69977 = 2;
								end
								if (_69977 == 4) then
									_69101 = _6989[_6993];
									if not _6999[_69101[2]] then
										_6993 = _6993 + 1;
									else
										_6993 = _69101[3];
									end
									break;
								end
								if (_69977 == 0) then
									_69978 = nil;
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + (2 - 1);
									_69101 = _6989[_6993];
									_69977 = 1;
								end
								if (_69977 == 2) then
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69977 = 3;
								end
							end
						else
							local _69979 = 0;
							local _69980;
							local _69981;
							while true do
								if (_69979 == 0) then
									_69980 = nil;
									_69981 = nil;
									_69981 = _69101[2];
									_69979 = 1;
								end
								if (5 == _69979) then
									_6973[_69101[3]] = _6999[_69101[2]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69979 = 6;
								end
								if (_69979 == 3) then
									_6999[_69981](_6999[_69981 + 1]);
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69979 = 4;
								end
								if (1 == _69979) then
									_69980 = _6999[_69101[3]];
									_6999[_69981 + 1] = _69980;
									_6999[_69981] = _69980[_69101[4]];
									_69979 = 2;
								end
								if (_69979 == 4) then
									for _694895 = _69101[2], _69101[3] do
										_6999[_694895] = nil;
									end
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69979 = 5;
								end
								if (_69979 == 2) then
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69981 = _69101[2];
									_69979 = 3;
								end
								if (_69979 == 6) then
									_6993 = _69101[3];
									break;
								end
							end
						end
					elseif (_69102 <= 107) then
						if (_69102 <= 105) then
							local _69284;
							local _69285;
							local _69284, _69286;
							local _69287;
							local _69288;
							_6999[_69101[2]][_69101[3]] = _69101[4];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[1 + 1]] = _69101[3] ~= 0;
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6974[_69101[3]] = _6999[_69101[2]];
							_6993 = _6993 + (1403 - (832 + 570));
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3] ~= 0;
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6973[_69101[3]] = _6999[_69101[2]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3 + 0] ~= 0;
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6974[_69101[3]] = _6999[_69101[1 + 1]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6973[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6974[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[6 - 4]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_69288 = _69101[2];
							_6999[_69288] = _6999[_69288](_6921(_6999, _69288 + 1, _69101[2 + 1]));
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6974[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6973[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[798 - (588 + 208)]] = _6999[_69101[3]][_69101[10 - 6]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_69288 = _69101[2];
							_69287 = _6999[_69101[3]];
							_6999[_69288 + (1801 - (884 + 916))] = _69287;
							_6999[_69288] = _69287[_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_69288 = _69101[2];
							_69284, _69286 = _6992(_6999[_69288](_6999[_69288 + 1]));
							_6994 = (_69286 + _69288) - 1;
							_69285 = 0;
							for _69424 = _69288, _6994 do
								_69285 = _69285 + 1;
								_6999[_69424] = _69284[_69285];
							end
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_69288 = _69101[2];
							_69284 = {_6999[_69288](_6921(_6999, _69288 + 1, _6994))};
							_69285 = 0;
							for _69427 = _69288, _69101[8 - 4] do
								local _69428 = 0;
								while true do
									if (_69428 == 0) then
										_69285 = _69285 + 1;
										_6999[_69427] = _69284[_69285];
										break;
									end
								end
							end
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6993 = _69101[3];
						elseif (_69102 > 106) then
							local _69982 = 0;
							local _69983;
							local _69984;
							local _69985;
							local _69986;
							while true do
								if (_69982 == 1) then
									_6994 = (_69985 + _69983) - 1;
									_69986 = 0;
									_69982 = 2;
								end
								if (2 == _69982) then
									for _694897 = _69983, _6994 do
										_69986 = _69986 + 1;
										_6999[_694897] = _69984[_69986];
									end
									break;
								end
								if (0 == _69982) then
									_69983 = _69101[2 + 0];
									_69984, _69985 = _6992(_6999[_69983](_6921(_6999, _69983 + 1, _69101[656 - (232 + 421)])));
									_69982 = 1;
								end
							end
						else
							local _69987 = 0;
							local _69988;
							while true do
								if (_69987 == 0) then
									_69988 = _69101[2];
									do
										return _6921(_6999, _69988, _6994);
									end
									break;
								end
							end
						end
					elseif (_69102 <= 109) then
						if (_69102 > 108) then
							local _69989 = 0;
							local _69990;
							while true do
								if (_69989 == 10) then
									_69101 = _6989[_6993];
									_6999[_69101[5 - 3]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69990 = _69101[3 - 1];
									_69989 = 11;
								end
								if (_69989 == 14) then
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + (182 - (92 + 89));
									_69101 = _6989[_6993];
									_69990 = _69101[2];
									_6999[_69990] = _6999[_69990](_6921(_6999, _69990 + 1, _69101[3]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69989 = 15;
								end
								if (_69989 == 0) then
									_69990 = nil;
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_69989 = 1;
								end
								if (_69989 == 6) then
									_69101 = _6989[_6993];
									_6999[_69101[1 + 1]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[1456 - (666 + 787)];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[427 - (360 + 65)]] = _69101[3];
									_69989 = 7;
								end
								if (_69989 == 13) then
									_6999[_69101[2]][_6999[_69101[3]]] = _6999[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69989 = 14;
								end
								if (_69989 == 9) then
									_6999[_69990] = _6999[_69990](_6921(_6999, _69990 + 1, _69101[3]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]][_6999[_69101[3]]] = _6999[_69101[258 - (79 + 175)]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2 - 0]] = _6973[_69101[3]];
									_6993 = _6993 + 1 + 0;
									_69989 = 10;
								end
								if (_69989 == 15) then
									_6999[_69101[2]][_6999[_69101[3]]] = _69101[4];
									_6993 = _6993 + (1 - 0);
									_69101 = _6989[_6993];
									_69990 = _69101[2];
									_6999[_69990](_6921(_6999, _69990 + 1, _69101[3]));
									break;
								end
								if (_69989 == 2) then
									_69101 = _6989[_6993];
									_6999[_69101[2]] = {};
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_69989 = 3;
								end
								if (_69989 == 8) then
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69990 = _69101[2];
									_69989 = 9;
								end
								if (_69989 == 1) then
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[1891 - (1569 + 320)]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69990 = _69101[2];
									_6999[_69990] = _6999[_69990](_6921(_6999, _69990 + 1, _69101[1 + 2]));
									_6993 = _6993 + 1 + 0;
									_69989 = 2;
								end
								if (_69989 == 5) then
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69990 = _69101[2];
									_6999[_69990] = _6999[_69990](_6921(_6999, _69990 + 1, _69101[3]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]][_6999[_69101[7 - 4]]] = _6999[_69101[4]];
									_6993 = _6993 + 1;
									_69989 = 6;
								end
								if (_69989 == 12) then
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69990 = _69101[2];
									_6999[_69990] = _6999[_69990](_6921(_6999, _69990 + 1, _69101[3]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69989 = 13;
								end
								if (_69989 == 3) then
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[9 - 6];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69990 = _69101[2];
									_6999[_69990] = _6999[_69990](_6921(_6999, _69990 + 1, _69101[608 - (316 + 289)]));
									_6993 = _6993 + 1;
									_69989 = 4;
								end
								if (4 == _69989) then
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_69989 = 5;
								end
								if (_69989 == 7) then
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69990 = _69101[2];
									_6999[_69990] = _6999[_69990](_6921(_6999, _69990 + 1, _69101[3]));
									_6993 = _6993 + 1 + 0;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69989 = 8;
								end
								if (_69989 == 11) then
									_6999[_69990] = _6999[_69990](_6921(_6999, _69990 + 1, _69101[3]));
									_6993 = _6993 + (900 - (503 + 396));
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69989 = 12;
								end
							end
						else
							local _69991 = _69101[2];
							local _69992 = {_6999[_69991](_6921(_6999, _69991 + 1, _6994))};
							local _69993 = 0;
							for _691964 = _69991, _69101[3 + 1] do
								_69993 = _69993 + 1;
								_6999[_691964] = _69992[_69993];
							end
						end
					elseif (_69102 > 110) then
						for _691967 = _69101[2], _69101[3] do
							_6999[_691967] = nil;
						end
					else
						_6999[_69101[2]]();
					end
				elseif (_69102 <= (99 + 68)) then
					if (_69102 <= 139) then
						if (_69102 <= 125) then
							if (_69102 <= 118) then
								if (_69102 <= 114) then
									if (_69102 <= 112) then
										local _69307;
										local _69308, _69309;
										local _69310;
										_6999[_69101[2]] = _6973[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69310 = _69101[2];
										_69308, _69309 = _6992(_6999[_69310](_6921(_6999, _69310 + 1, _69101[3])));
										_6994 = (_69309 + _69310) - 1;
										_69307 = 0 - 0;
										for _69429 = _69310, _6994 do
											local _69430 = 0;
											while true do
												if (_69430 == 0) then
													_69307 = _69307 + 1;
													_6999[_69429] = _69308[_69307];
													break;
												end
											end
										end
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69310 = _69101[2];
										_6999[_69310] = _6999[_69310](_6921(_6999, _69310 + 1, _6994));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										if _6999[_69101[2]] then
											_6993 = _6993 + 1;
										else
											_6993 = _69101[3];
										end
									elseif (_69102 > 113) then
										local _69995 = 0;
										local _69996;
										local _69997;
										local _69998;
										local _69999;
										while true do
											if (_69995 == 7) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												break;
											end
											if (_69995 == 5) then
												_6993 = _6993 + 1 + 0;
												_69101 = _6989[_6993];
												for _694900 = _69101[2], _69101[3] do
													_6999[_694900] = nil;
												end
												_69995 = 6;
											end
											if (_69995 == 0) then
												_69996 = nil;
												_69997, _69998 = nil;
												_69999 = nil;
												_69995 = 1;
											end
											if (_69995 == 1) then
												_69999 = _69101[2];
												_69997, _69998 = _6992(_6999[_69999](_6999[_69999 + 1]));
												_6994 = (_69998 + _69999) - (1 + 0);
												_69995 = 2;
											end
											if (4 == _69995) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]];
												_69995 = 5;
											end
											if (_69995 == 2) then
												_69996 = 0 - 0;
												for _694902 = _69999, _6994 do
													_69996 = _69996 + 1 + 0;
													_6999[_694902] = _69997[_69996];
												end
												_6993 = _6993 + 1;
												_69995 = 3;
											end
											if (_69995 == 6) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[5 - 3]] = _6974[_69101[3]];
												_69995 = 7;
											end
											if (_69995 == 3) then
												_69101 = _6989[_6993];
												_69999 = _69101[2];
												_6999[_69999] = _6999[_69999](_6921(_6999, _69999 + 1, _6994));
												_69995 = 4;
											end
										end
									else
										local _691000 = _69101[2];
										do
											return _6999[_691000](_6921(_6999, _691000 + 1 + 0, _6994));
										end
									end
								elseif (_69102 <= 116) then
									if (_69102 > (175 - 60)) then
										local _691001 = 0;
										local _691002;
										local _691003;
										local _691004;
										local _691005;
										local _691006;
										local _691007;
										while true do
											if (_691001 == 0) then
												_691002 = nil;
												_691003 = nil;
												_691004, _691005 = nil;
												_691006 = nil;
												_691007 = nil;
												_6974[_69101[3]] = _6999[_69101[2]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_691001 = 1;
											end
											if (_691001 == 11) then
												_691006 = _69101[3];
												_691002 = _6999[_691006];
												for _694905 = _691006 + (947 - (88 + 858)), _69101[4] do
													_691002 = _691002 .. _6999[_694905];
												end
												_6999[_69101[2]] = _691002;
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]][_6999[_69101[3]]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_691001 = 12;
											end
											if (_691001 == 1) then
												_6999[_69101[2]] = _6974[_69101[1247 - (485 + 759)]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_691007 = _69101[4 - 2];
												_691006 = _6999[_69101[3]];
												_6999[_691007 + 1] = _691006;
												_6999[_691007] = _691006[_69101[4]];
												_6993 = _6993 + 1;
												_691001 = 2;
											end
											if (_691001 == 9) then
												_6999[_69101[2]] = _6973[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_691001 = 10;
											end
											if (5 == _691001) then
												_6999[_691007] = _691006[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6973[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_691001 = 6;
											end
											if (_691001 == 20) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6974[_69101[3]] = _6999[_69101[2]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_691001 = 21;
											end
											if (_691001 == 15) then
												_6999[_691007] = _6999[_691007](_6921(_6999, _691007 + (4 - 3), _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2 - 0]][_6999[_69101[3]]] = _6999[_69101[4]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6973[_69101[3]];
												_6993 = _6993 + 1;
												_691001 = 16;
											end
											if (_691001 == 14) then
												_69101 = _6989[_6993];
												_6999[_69101[791 - (766 + 23)]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_691007 = _69101[2];
												_691001 = 15;
											end
											if (_691001 == 3) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_691007 = _69101[2];
												_691004, _691005 = _6992(_6999[_691007](_6921(_6999, _691007 + 1, _69101[3])));
												_6994 = (_691005 + _691007) - 1;
												_691003 = 0;
												for _694906 = _691007, _6994 do
													local _694907 = 0;
													while true do
														if (_694907 == 0) then
															_691003 = _691003 + 1;
															_6999[_694906] = _691004[_691003];
															break;
														end
													end
												end
												_6993 = _6993 + 1;
												_691001 = 4;
											end
											if (_691001 == 18) then
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_691007 = _69101[2];
												_6999[_691007] = _6999[_691007](_6921(_6999, _691007 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_691001 = 19;
											end
											if (_691001 == 12) then
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6973[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1 + 0;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3 + 0];
												_691001 = 13;
											end
											if (7 == _691001) then
												_6999[_69101[2]] = {};
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6973[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_691001 = 8;
											end
											if (_691001 == 17) then
												_6999[_691007] = _6999[_691007](_6921(_6999, _691007 + (3 - 2), _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6973[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_691001 = 18;
											end
											if (_691001 == 4) then
												_69101 = _6989[_6993];
												_691007 = _69101[2];
												_6999[_691007] = _6999[_691007](_6921(_6999, _691007 + 1, _6994));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_691007 = _69101[2];
												_691006 = _6999[_69101[3]];
												_6999[_691007 + 1] = _691006;
												_691001 = 5;
											end
											if (_691001 == 2) then
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6973[_69101[3]];
												_6993 = _6993 + (1190 - (442 + 747));
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_691001 = 3;
											end
											if (_691001 == 13) then
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_691007 = _69101[2];
												_6999[_691007] = _6999[_691007](_6921(_6999, _691007 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6973[_69101[3]];
												_6993 = _6993 + 1 + 0;
												_691001 = 14;
											end
											if (_691001 == 6) then
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_691007 = _69101[2];
												_6999[_691007] = _6999[_691007](_6921(_6999, _691007 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_691001 = 7;
											end
											if (_691001 == 10) then
												_69101 = _6989[_6993];
												_691007 = _69101[2];
												_6999[_691007] = _6999[_691007](_6921(_6999, _691007 + 1, _69101[1138 - (832 + 303)]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _6999[_69101[3]];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_691001 = 11;
											end
											if (_691001 == 21) then
												_691007 = _69101[2];
												_691006 = _6999[_69101[3]];
												_6999[_691007 + 1] = _691006;
												_6999[_691007] = _691006[_69101[3 + 1]];
												break;
											end
											if (_691001 == 16) then
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[7 - 4];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_691007 = _69101[2];
												_691001 = 17;
											end
											if (_691001 == 8) then
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_691007 = _69101[2];
												_6999[_691007] = _6999[_691007](_6921(_6999, _691007 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_691001 = 9;
											end
											if (_691001 == 19) then
												_6999[_69101[2]][_6999[_69101[3]]] = _6999[_69101[4]];
												_6993 = _6993 + (1074 - (1036 + 37));
												_69101 = _6989[_6993];
												_691007 = _69101[2];
												_6999[_691007](_6921(_6999, _691007 + 1, _69101[3]));
												_6993 = _6993 + 1;
												_69101 = _6989[_6993];
												_6999[_69101[2]] = _69101[3];
												_691001 = 20;
											end
										end
									else
										local _691008 = _69101[2];
										local _691009 = {_6999[_691008](_6921(_6999, _691008 + 1, _69101[3]))};
										local _691010 = 0;
										for _691969 = _691008, _69101[4 + 0] do
											local _691970 = 0;
											while true do
												if (_691970 == 0) then
													_691010 = _691010 + 1;
													_6999[_691969] = _691009[_691010];
													break;
												end
											end
										end
									end
								elseif (_69102 == 117) then
									local _691011 = 0;
									local _691012;
									local _691013;
									local _691014;
									local _691015;
									while true do
										if (_691011 == 6) then
											_69101 = _6989[_6993];
											_691015 = _69101[2];
											_6999[_691015] = _6999[_691015](_6921(_6999, _691015 + (2 - 1), _6994));
											break;
										end
										if (_691011 == 0) then
											_691012 = nil;
											_691013, _691014 = nil;
											_691015 = nil;
											_691011 = 1;
										end
										if (_691011 == 2) then
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_691011 = 3;
										end
										if (_691011 == 4) then
											_691015 = _69101[2];
											_691013, _691014 = _6992(_6999[_691015](_6921(_6999, _691015 + 1, _69101[3])));
											_6994 = (_691014 + _691015) - (1481 - (641 + 839));
											_691011 = 5;
										end
										if (1 == _691011) then
											_6999[_69101[2]] = _6973[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_691011 = 2;
										end
										if (5 == _691011) then
											_691012 = 0;
											for _694910 = _691015, _6994 do
												_691012 = _691012 + 1;
												_6999[_694910] = _691013[_691012];
											end
											_6993 = _6993 + (914 - (910 + 3));
											_691011 = 6;
										end
										if (_691011 == 3) then
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_691011 = 4;
										end
									end
								else
									local _691016;
									local _691017;
									_691017 = _69101[2];
									_691016 = _6999[_69101[3]];
									_6999[_691017 + 1] = _691016;
									_6999[_691017] = _691016[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691017 = _69101[2];
									_6999[_691017](_6999[_691017 + 1]);
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]][_69101[3]] = _69101[4];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6993 = _69101[3];
								end
							elseif (_69102 <= 121) then
								if (_69102 <= 119) then
									local _69317 = _69101[2];
									do
										return _6921(_6999, _69317, _69317 + _69101[3]);
									end
								elseif (_69102 == 120) then
									local _691029 = _69101[1686 - (1466 + 218)];
									_6994 = (_691029 + _69100) - 1;
									for _691971 = _691029, _6994 do
										local _691972 = _6995[_691971 - _691029];
										_6999[_691971] = _691972;
									end
								else
									local _691030 = 0;
									local _691031;
									while true do
										if (_691030 == 1) then
											_69101 = _6989[_6993];
											_691031 = _69101[2];
											_6999[_691031] = _6999[_691031](_6999[_691031 + (1149 - (556 + 592))]);
											_691030 = 2;
										end
										if (_691030 == 5) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_691031 = _69101[2];
											_691030 = 6;
										end
										if (_691030 == 0) then
											_691031 = nil;
											_6999[_69101[1 + 1]] = _6999[_69101[3]];
											_6993 = _6993 + 1;
											_691030 = 1;
										end
										if (_691030 == 2) then
											_6993 = _6993 + 1 + 0;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6973[_69101[811 - (329 + 479)]];
											_691030 = 3;
										end
										if (_691030 == 6) then
											_6999[_691031] = _6999[_691031](_6921(_6999, _691031 + 1, _69101[3]));
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_691030 = 7;
										end
										if (_691030 == 7) then
											if (_6999[_69101[2]] == _6999[_69101[4]]) then
												_6993 = _6993 + 1;
											else
												_6993 = _69101[3];
											end
											break;
										end
										if (4 == _691030) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_691030 = 5;
										end
										if (_691030 == 3) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_691030 = 4;
										end
									end
								end
							elseif (_69102 <= 123) then
								if (_69102 > 122) then
									_6999[_69101[2]] = #_6999[_69101[3]];
								else
									local _691033;
									_6999[_69101[2]] = _6974[_69101[857 - (174 + 680)]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691033 = _69101[2];
									_6999[_691033] = _6999[_691033](_6921(_6999, _691033 + 1, _69101[3]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]][_69101[10 - 7]] = _6999[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6993 = _69101[3];
								end
							elseif (_69102 == 124) then
								local _691043;
								_6999[_69101[2]] = _6999[_69101[5 - 2]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2 + 0]] = _6999[_69101[742 - (396 + 343)]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]] + _6999[_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[1 + 2]] * _6999[_69101[4]];
								_6993 = _6993 + (1478 - (29 + 1448));
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + (1390 - (135 + 1254));
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[7 - 5]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[13 - 10]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]] + _6999[_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2 + 0]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[1530 - (389 + 1138)]] + _6999[_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]] * _69101[4];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[576 - (102 + 472)]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691043 = _69101[2];
								_6999[_691043] = _6999[_691043](_6921(_6999, _691043 + 1, _69101[3]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]] * _6999[_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[2 + 1]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2 + 0]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[1548 - (320 + 1225)]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]] - _6999[_69101[6 - 2]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]] + _6999[_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]] * _6999[_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_6993 = _69101[3];
							else
								local _691061;
								local _691062;
								local _691063, _691064;
								local _691065;
								_6999[_69101[2]] = _6973[_69101[1467 - (157 + 1307)]];
								_6993 = _6993 + (1860 - (821 + 1038));
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691065 = _69101[2];
								_691063, _691064 = _6992(_6999[_691065](_6921(_6999, _691065 + 1, _69101[3])));
								_6994 = (_691064 + _691065) - 1;
								_691062 = 0;
								for _691974 = _691065, _6994 do
									_691062 = _691062 + (2 - 1);
									_6999[_691974] = _691063[_691062];
								end
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691065 = _69101[2];
								_6999[_691065] = _6999[_691065](_6921(_6999, _691065 + 1, _6994));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691061 = _6999[_69101[4]];
								if not _691061 then
									_6993 = _6993 + 1;
								else
									local _692081 = 0;
									while true do
										if (_692081 == 0) then
											_6999[_69101[2]] = _691061;
											_6993 = _69101[3];
											break;
										end
									end
								end
							end
						elseif (_69102 <= (15 + 117)) then
							if (_69102 <= 128) then
								if (_69102 <= 126) then
									local _69318;
									local _69319;
									_6999[_69101[3 - 1]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69319 = _69101[2];
									_69318 = _6999[_69101[3]];
									_6999[_69319 + 1] = _69318;
									_6999[_69319] = _69318[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6974[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[2 + 2]];
									_6993 = _6993 + (2 - 1);
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[1028 - (834 + 192)]] = _69101[3] ~= 0;
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69319 = _69101[2];
									_6999[_69319](_6921(_6999, _69319 + 1, _69101[3]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6993 = _69101[3];
								elseif (_69102 == 127) then
									local _691073;
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[1 + 2];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1 + 0;
									_69101 = _6989[_6993];
									_691073 = _69101[2];
									_6999[_691073] = _6999[_691073](_6921(_6999, _691073 + 1, _69101[3]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]][_69101[3]] = _6999[_69101[1 + 3]];
									_6993 = _6993 + (1 - 0);
									_69101 = _6989[_6993];
									_6993 = _69101[3];
								else
									local _691083 = 0;
									local _691084;
									while true do
										if (_691083 == 0) then
											_691084 = nil;
											_6999[_69101[2]] = _6999[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6973[_69101[3]];
											_691083 = 1;
										end
										if (_691083 == 2) then
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + (305 - (300 + 4));
											_69101 = _6989[_6993];
											_691084 = _69101[2];
											_6999[_691084] = _6999[_691084](_6921(_6999, _691084 + 1, _69101[3]));
											_691083 = 3;
										end
										if (_691083 == 1) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_691083 = 2;
										end
										if (_691083 == 4) then
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_691084 = _69101[2];
											_6999[_691084] = _6999[_691084](_6921(_6999, _691084 + 1, _69101[3]));
											_691083 = 5;
										end
										if (_691083 == 5) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6973[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_691083 = 6;
										end
										if (_691083 == 8) then
											if (_6999[_69101[2]] == _6999[_69101[4]]) then
												_6993 = _6993 + 1;
											else
												_6993 = _69101[3];
											end
											break;
										end
										if (_691083 == 7) then
											_69101 = _6989[_6993];
											_691084 = _69101[5 - 3];
											_6999[_691084] = _6999[_691084](_6921(_6999, _691084 + 1, _69101[3]));
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_691083 = 8;
										end
										if (_691083 == 3) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6974[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_691083 = 4;
										end
										if (_691083 == 6) then
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1 + 0;
											_691083 = 7;
										end
									end
								end
							elseif (_69102 <= 130) then
								if (_69102 > 129) then
									local _691085;
									local _691086, _691087;
									local _691088;
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691088 = _69101[364 - (112 + 250)];
									_691086, _691087 = _6992(_6999[_691088](_6921(_6999, _691088 + 1, _69101[2 + 1])));
									_6994 = (_691087 + _691088) - 1;
									_691085 = 0;
									for _691977 = _691088, _6994 do
										_691085 = _691085 + 1;
										_6999[_691977] = _691086[_691085];
									end
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691088 = _69101[2];
									_6999[_691088] = _6999[_691088](_6921(_6999, _691088 + 1, _6994));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6974[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									if not _6999[_69101[4 - 2]] then
										_6993 = _6993 + 1 + 0;
									else
										_6993 = _69101[3];
									end
								else
									_6999[_69101[2]][_69101[3]] = _69101[4];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]][_69101[3]] = _69101[4];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6993 = _69101[3];
								end
							elseif (_69102 == 131) then
								local _691102;
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2 + 0]] = _69101[3 + 0];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[2 + 1];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691102 = _69101[2];
								_6999[_691102] = _6999[_691102](_6921(_6999, _691102 + 1, _69101[3]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[1416 - (1001 + 413)]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[4 - 2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691102 = _69101[2];
								_6999[_691102] = _6999[_691102](_6921(_6999, _691102 + 1, _69101[3]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6973[_69101[3]];
								_6993 = _6993 + (883 - (244 + 638));
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691102 = _69101[2];
								_6999[_691102] = _6999[_691102](_6921(_6999, _691102 + 1, _69101[3]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _6999[_69101[697 - (627 + 66)]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[8 - 5]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + (603 - (512 + 90));
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691102 = _69101[1908 - (1665 + 241)];
								_6999[_691102] = _6999[_691102](_6921(_6999, _691102 + (718 - (373 + 344)), _69101[3]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[1 + 1]][_69101[3]] = _69101[4];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _69101[2 + 2];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6973[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691102 = _69101[2];
								_6999[_691102] = _6999[_691102](_6921(_6999, _691102 + 1, _69101[3]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[7 - 4]] = _6999[_69101[4]];
								_6993 = _6993 + (1 - 0);
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[1102 - (35 + 1064)];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2 + 0]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691102 = _69101[2];
								_6999[_691102] = _6999[_691102](_6921(_6999, _691102 + (2 - 1), _69101[3]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[1 + 2]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[1239 - (298 + 938)];
								_6993 = _6993 + (1260 - (233 + 1026));
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691102 = _69101[2];
								_6999[_691102] = _6999[_691102](_6921(_6999, _691102 + 1, _69101[3]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691102 = _69101[2];
								_6999[_691102] = _6999[_691102](_6921(_6999, _691102 + 1, _69101[3]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[1669 - (636 + 1030)]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _69101[4];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[2 + 1]][_69101[4]];
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[1 + 1]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691102 = _69101[2];
								_6999[_691102] = _6999[_691102](_6921(_6999, _691102 + 1, _69101[1 + 2]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
								_6993 = _6993 + (222 - (55 + 166));
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _69101[1 + 3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[1 + 2]] = _69101[15 - 11];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _69101[301 - (36 + 261)];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6973[_69101[3]];
								_6993 = _6993 + (1 - 0);
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
							else
								local _691135 = 0;
								local _691136;
								local _691137;
								local _691138;
								local _691139;
								local _691140;
								while true do
									if (_691135 == 2) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691140 = _69101[2];
										_691135 = 3;
									end
									if (8 == _691135) then
										for _694913 = _691140, _69101[4] do
											_691137 = _691137 + 1;
											_6999[_694913] = _691136[_691137];
										end
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691135 = 9;
									end
									if (_691135 == 1) then
										_691139 = nil;
										_691140 = nil;
										_6999[_69101[2]] = _6973[_69101[3]];
										_691135 = 2;
									end
									if (_691135 == 7) then
										_691140 = _69101[2];
										_691136 = {_6999[_691140](_6921(_6999, _691140 + 1, _6994))};
										_691137 = 0 + 0;
										_691135 = 8;
									end
									if (_691135 == 0) then
										_691136 = nil;
										_691137 = nil;
										_691136, _691138 = nil;
										_691135 = 1;
									end
									if (_691135 == 3) then
										_691139 = _6999[_69101[3]];
										_6999[_691140 + 1] = _691139;
										_6999[_691140] = _691139[_69101[4]];
										_691135 = 4;
									end
									if (_691135 == 5) then
										_691136, _691138 = _6992(_6999[_691140](_6999[_691140 + 1]));
										_6994 = (_691138 + _691140) - 1;
										_691137 = 0;
										_691135 = 6;
									end
									if (_691135 == 9) then
										_6993 = _69101[3];
										break;
									end
									if (_691135 == 6) then
										for _694916 = _691140, _6994 do
											_691137 = _691137 + 1;
											_6999[_694916] = _691136[_691137];
										end
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691135 = 7;
									end
									if (_691135 == 4) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691140 = _69101[2];
										_691135 = 5;
									end
								end
							end
						elseif (_69102 <= (105 + 30)) then
							if (_69102 <= 133) then
								local _69333 = 0;
								local _69334;
								local _69335;
								local _69336;
								while true do
									if (4 == _69333) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[23 - (20 + 1)]] = _6999[_69101[3]];
										_6993 = _6993 + 1 + 0;
										_69333 = 5;
									end
									if (_69333 == 1) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69333 = 2;
									end
									if (_69333 == 0) then
										_69334 = nil;
										_69335 = nil;
										_69336 = nil;
										_6999[_69101[2]] = _6973[_69101[3]];
										_69333 = 1;
									end
									if (_69333 == 6) then
										do
											return _6999[_69101[321 - (134 + 185)]];
										end
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6993 = _69101[3];
										break;
									end
									if (5 == _69333) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69333 = 6;
									end
									if (_69333 == 3) then
										_69336 = _69101[2];
										_69335 = {_6999[_69336](_6921(_6999, _69336 + 1, _69101[3]))};
										_69334 = 0;
										for _692083 = _69336, _69101[1287 - (1035 + 248)] do
											_69334 = _69334 + 1;
											_6999[_692083] = _69335[_69334];
										end
										_69333 = 4;
									end
									if (_69333 == 2) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_69333 = 3;
									end
								end
							elseif (_69102 == (1267 - (549 + 584))) then
								if not _6999[_69101[2]] then
									_6993 = _6993 + (686 - (314 + 371));
								else
									_6993 = _69101[3];
								end
							else
								local _691141 = 0;
								local _691142;
								while true do
									if (_691141 == 3) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691142 = _69101[6 - 4];
										_6999[_691142] = _6999[_691142](_6999[_691142 + (969 - (478 + 490))]);
										_691141 = 4;
									end
									if (_691141 == 4) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										if (_6999[_69101[2]] ~= _6999[_69101[4]]) then
											_6993 = _6993 + 1;
										else
											_6993 = _69101[2 + 1];
										end
										break;
									end
									if (_691141 == 2) then
										_6999[_69101[2]] = _6973[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]];
										_691141 = 3;
									end
									if (1 == _691141) then
										_691142 = _69101[2];
										_6999[_691142] = _6999[_691142](_6999[_691142 + 1]);
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691141 = 2;
									end
									if (_691141 == 0) then
										_691142 = nil;
										_6999[_69101[2]] = _6999[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691141 = 1;
									end
								end
							end
						elseif (_69102 <= 137) then
							if (_69102 == 136) then
								local _691143 = 0;
								local _691144;
								while true do
									if (_691143 == 0) then
										_691144 = nil;
										_6973[_69101[3]] = _6999[_69101[2]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6973[_69101[3]];
										_6993 = _6993 + 1;
										_691143 = 1;
									end
									if (_691143 == 1) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[1175 - (786 + 386)]];
										_6993 = _6993 + (3 - 2);
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_691143 = 2;
									end
									if (_691143 == 4) then
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
										_6993 = _6993 + (3 - 2);
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_691143 = 5;
									end
									if (_691143 == 5) then
										_6993 = _6993 + (3 - 2);
										_69101 = _6989[_6993];
										_6993 = _69101[3];
										break;
									end
									if (_691143 == 2) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[1382 - (1055 + 324)];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_691143 = 3;
									end
									if (_691143 == 3) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[1343 - (1093 + 247)];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691144 = _69101[2 + 0];
										_6999[_691144] = _6999[_691144](_6921(_6999, _691144 + 1, _69101[3]));
										_691143 = 4;
									end
								end
							else
								local _691145 = 0;
								local _691146;
								local _691147;
								while true do
									if (_691145 == 0) then
										_691146 = nil;
										_691147 = nil;
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691147 = _69101[2];
										_691146 = _6999[_69101[3]];
										_691145 = 1;
									end
									if (_691145 == 10) then
										_69101 = _6989[_6993];
										_691147 = _69101[5 - 3];
										_691146 = _6999[_69101[3]];
										_6999[_691147 + 1] = _691146;
										_6999[_691147] = _691146[_69101[4]];
										_6993 = _6993 + (1269 - (1249 + 19));
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3 + 0]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691145 = 11;
									end
									if (_691145 == 9) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6973[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[8 - 6]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[5 - 1]];
										_6993 = _6993 + 1;
										_691145 = 10;
									end
									if (_691145 == 6) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6973[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[4 - 2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691145 = 7;
									end
									if (_691145 == 7) then
										_691147 = _69101[2];
										_691146 = _6999[_69101[3]];
										_6999[_691147 + 1] = _691146;
										_6999[_691147] = _691146[_69101[4]];
										_6993 = _6993 + (689 - (364 + 324));
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[10 - 6]];
										_691145 = 8;
									end
									if (_691145 == 4) then
										_691146 = _6999[_69101[3]];
										_6999[_691147 + 1] = _691146;
										_6999[_691147] = _691146[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_691145 = 5;
									end
									if (_691145 == 3) then
										_6999[_69101[2]] = _6973[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[4 - 2]] = _6999[_69101[3]][_69101[2 + 2]];
										_6993 = _6993 + (3 - 2);
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691147 = _69101[2];
										_691145 = 4;
									end
									if (_691145 == 11) then
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[15 - 11]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3] ~= 0;
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691147 = _69101[2];
										_691145 = 12;
									end
									if (_691145 == 12) then
										_6999[_691147](_6921(_6999, _691147 + (1087 - (686 + 400)), _69101[3 + 0]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										break;
									end
									if (5 == _691145) then
										_69101 = _6989[_6993];
										_6999[_69101[6 - 4]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3] ~= 0;
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691147 = _69101[2 + 0];
										_6999[_691147](_6921(_6999, _691147 + 1, _69101[3]));
										_6993 = _6993 + 1;
										_691145 = 6;
									end
									if (2 == _691145) then
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3] ~= 0;
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691147 = _69101[2];
										_6999[_691147](_6921(_6999, _691147 + 1, _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691145 = 3;
									end
									if (_691145 == 8) then
										_6993 = _6993 + (2 - 1);
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3] ~= 0;
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691147 = _69101[2];
										_6999[_691147](_6921(_6999, _691147 + 1, _69101[3]));
										_691145 = 9;
									end
									if (1 == _691145) then
										_6999[_691147 + 1] = _691146;
										_6999[_691147] = _691146[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[10 - 6]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691145 = 2;
									end
								end
							end
						elseif (_69102 == (367 - (73 + 156))) then
							local _691148 = 0;
							local _691149;
							local _691150;
							local _691151;
							local _691152;
							local _691153;
							while true do
								if (_691148 == 4) then
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691153 = _69101[2];
									_6999[_691153] = _6999[_691153](_6921(_6999, _691153 + 1, _6994));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691148 = 5;
								end
								if (_691148 == 6) then
									_6999[_691153] = _691152[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691153 = _69101[2];
									_6999[_691153](_6999[_691153 + 1]);
									_6993 = _6993 + 1;
									_691148 = 7;
								end
								if (_691148 == 5) then
									_6999[_69101[2]] = _6999[_69101[814 - (721 + 90)]][_69101[1 + 3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691153 = _69101[2];
									_691152 = _6999[_69101[3]];
									_6999[_691153 + 1] = _691152;
									_691148 = 6;
								end
								if (_691148 == 8) then
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]] + _6999[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									if (_6999[_69101[2]] == _69101[4]) then
										_6993 = _6993 + 1;
									else
										_6993 = _69101[3];
									end
									break;
								end
								if (_691148 == 2) then
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_691148 = 3;
								end
								if (_691148 == 3) then
									_69101 = _6989[_6993];
									_691153 = _69101[2];
									_691150, _691151 = _6992(_6999[_691153](_6921(_6999, _691153 + 1, _69101[3])));
									_6994 = (_691151 + _691153) - (1 + 0);
									_691149 = 0;
									for _694919 = _691153, _6994 do
										_691149 = _691149 + 1;
										_6999[_694919] = _691150[_691149];
									end
									_691148 = 4;
								end
								if (_691148 == 0) then
									_691149 = nil;
									_691150, _691151 = nil;
									_691152 = nil;
									_691153 = nil;
									_691153 = _69101[2];
									_691152 = _6999[_69101[3]];
									_691148 = 1;
								end
								if (_691148 == 7) then
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_691148 = 8;
								end
								if (_691148 == 1) then
									_6999[_691153 + 1] = _691152;
									_6999[_691153] = _691152[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_691148 = 2;
								end
							end
						else
							local _691154;
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691154 = _69101[6 - 4];
							_6999[_691154] = _6999[_691154](_6921(_6999, _691154 + 1, _69101[3]));
							_6993 = _6993 + (471 - (224 + 246));
							_69101 = _6989[_6993];
							_6999[_69101[2]][_69101[3]] = _6999[_69101[5 - 1]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]][_69101[3]] = _69101[4];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6973[_69101[5 - 2]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691154 = _69101[2];
							_6999[_691154] = _6999[_691154](_6921(_6999, _691154 + 1, _69101[3]));
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6974[_69101[3]];
							_6993 = _6993 + 1 + 0;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691154 = _69101[2];
							_6999[_691154] = _6999[_691154](_6921(_6999, _691154 + 1, _69101[3]));
							_6993 = _6993 + 1 + 0;
							_69101 = _6989[_6993];
							_6999[_69101[2]][_69101[3]] = _6999[_69101[3 + 1]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6973[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691154 = _69101[2];
							_6999[_691154] = _6999[_691154](_6921(_6999, _691154 + 1, _69101[5 - 2]));
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[6 - 4]] = _6974[_69101[516 - (203 + 310)]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[1997 - (1238 + 755)]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[1 + 1]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[1536 - (709 + 825)]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691154 = _69101[2];
							_6999[_691154] = _6999[_691154](_6921(_6999, _691154 + (1 - 0), _69101[3]));
							_6993 = _6993 + (1 - 0);
							_69101 = _6989[_6993];
							_6999[_69101[866 - (196 + 668)]][_69101[11 - 8]] = _6999[_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6973[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691154 = _69101[2];
							_6999[_691154] = _6999[_691154](_6921(_6999, _691154 + 1, _69101[3]));
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]][_69101[3]] = _69101[4];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[3 - 1]] = _6974[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[835 - (171 + 662)]] = _6999[_69101[3]][_69101[97 - (4 + 89)]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691154 = _69101[2];
							_6999[_691154] = _6999[_691154](_6921(_6999, _691154 + 1, _69101[10 - 7]));
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]][_69101[2 + 1]] = _6999[_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6974[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[17 - 13]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691154 = _69101[2];
							_6999[_691154] = _6999[_691154](_6921(_6999, _691154 + 1 + 0, _69101[3]));
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
							_6993 = _6993 + (1487 - (35 + 1451));
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6974[_69101[3]];
							_6993 = _6993 + (1454 - (28 + 1425));
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[1995 - (941 + 1052)]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691154 = _69101[2];
							_6999[_691154] = _6999[_691154](_6921(_6999, _691154 + 1 + 0, _69101[3]));
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6974[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[1516 - (822 + 692)]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691154 = _69101[2];
							_6999[_691154] = _6999[_691154](_6921(_6999, _691154 + 1, _69101[3]));
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]][_69101[3]] = _6999[_69101[5 - 1]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[1 + 1]] = _6973[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[299 - (45 + 252)]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691154 = _69101[2];
							_6999[_691154] = _6999[_691154](_6921(_6999, _691154 + 1, _69101[3]));
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
							_6993 = _6993 + 1 + 0;
							_69101 = _6989[_6993];
							_6999[_69101[2]][_69101[3]] = _69101[4];
							_6993 = _6993 + 1 + 0;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6973[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691154 = _69101[2];
							_6999[_691154] = _6999[_691154](_6921(_6999, _691154 + 1, _69101[3]));
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
						end
					elseif (_69102 <= 153) then
						if (_69102 <= 146) then
							if (_69102 <= 142) then
								if (_69102 <= 140) then
									local _69337;
									_6999[_69101[2]]();
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6974[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[9 - 5]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6974[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + (434 - (114 + 319));
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3 - 0]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6974[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2 - 0]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[2 + 1];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_69337 = _69101[2];
									_6999[_69337] = _6999[_69337](_6921(_6999, _69337 + (1 - 0), _69101[5 - 2]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]] * _6999[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6993 = _69101[3];
								elseif (_69102 == 141) then
									_6973[_69101[3]] = _6999[_69101[2]];
								else
									local _691186;
									local _691187;
									local _691188;
									_6999[_69101[2]] = {};
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = #_6999[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[1965 - (556 + 1407)]] = _69101[1209 - (741 + 465)];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691188 = _69101[2];
									_691187 = _6999[_691188];
									_691186 = _6999[_691188 + 2];
									if (_691186 > 0) then
										if (_691187 > _6999[_691188 + 1]) then
											_6993 = _69101[468 - (170 + 295)];
										else
											_6999[_691188 + 3] = _691187;
										end
									elseif (_691187 < _6999[_691188 + 1]) then
										_6993 = _69101[3];
									else
										_6999[_691188 + 2 + 1] = _691187;
									end
								end
							elseif (_69102 <= 144) then
								if (_69102 > (132 + 11)) then
									local _691197 = 0;
									local _691198;
									while true do
										if (_691197 == 1) then
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_691197 = 2;
										end
										if (_691197 == 3) then
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_691197 = 4;
										end
										if (_691197 == 4) then
											_691198 = _69101[4 - 2];
											_6999[_691198] = _6999[_691198](_6921(_6999, _691198 + 1, _69101[3]));
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_691197 = 5;
										end
										if (_691197 == 0) then
											_691198 = nil;
											_6999[_69101[2]] = _6974[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_691197 = 1;
										end
										if (_691197 == 2) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_691197 = 3;
										end
										if (5 == _691197) then
											_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											break;
										end
									end
								else
									local _691199 = 0;
									local _691200;
									local _691201;
									local _691202;
									local _691203;
									while true do
										if (_691199 == 6) then
											if (_6999[_69101[7 - 5]] == _69101[4]) then
												_6993 = _6993 + 1;
											else
												_6993 = _69101[3];
											end
											break;
										end
										if (_691199 == 5) then
											_691203 = _69101[1 + 1];
											_6999[_691203] = _6999[_691203](_6921(_6999, _691203 + 1, _6994));
											_6993 = _6993 + 1 + 0;
											_69101 = _6989[_6993];
											_691199 = 6;
										end
										if (2 == _691199) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_691199 = 3;
										end
										if (_691199 == 1) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_691203 = _69101[2];
											_6999[_691203] = _6999[_691203](_6921(_6999, _691203 + 1, _69101[3 + 0]));
											_691199 = 2;
										end
										if (_691199 == 3) then
											_69101 = _6989[_6993];
											_691203 = _69101[2];
											_691201, _691202 = _6992(_6999[_691203](_6921(_6999, _691203 + 1, _69101[3])));
											_6994 = (_691202 + _691203) - (1 + 0);
											_691199 = 4;
										end
										if (_691199 == 4) then
											_691200 = 0;
											for _694926 = _691203, _6994 do
												_691200 = _691200 + 1 + 0;
												_6999[_694926] = _691201[_691200];
											end
											_6993 = _6993 + (1231 - (957 + 273));
											_69101 = _6989[_6993];
											_691199 = 5;
										end
										if (_691199 == 0) then
											_691200 = nil;
											_691201, _691202 = nil;
											_691203 = nil;
											_6999[_69101[2]] = _69101[3];
											_691199 = 1;
										end
									end
								end
							elseif (_69102 == 145) then
								local _691204;
								_691204 = _69101[2];
								_6999[_691204](_6921(_6999, _691204 + 1, _69101[3]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								for _691997 = _69101[2], _69101[3] do
									_6999[_691997] = nil;
								end
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3] ~= 0;
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6974[_69101[3]] = _6999[_69101[2]];
								_6993 = _6993 + (2 - 1);
								_69101 = _6989[_6993];
								_6999[_69101[5 - 3]] = _69101[3] ~= 0;
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6974[_69101[14 - 11]] = _6999[_69101[1782 - (389 + 1391)]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2 + 0]] = _69101[3] ~= 0;
							else
								local _691213 = 0;
								local _691214;
								while true do
									if (_691213 == 2) then
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + (2 - 1);
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_691213 = 3;
									end
									if (1 == _691213) then
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691213 = 2;
									end
									if (_691213 == 4) then
										_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6973[_69101[3]];
										_6993 = _6993 + 1;
										_691213 = 5;
									end
									if (_691213 == 6) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691213 = 7;
									end
									if (_691213 == 9) then
										_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[9 - 6];
										_6993 = _6993 + 1;
										_691213 = 10;
									end
									if (_691213 == 10) then
										_69101 = _6989[_6993];
										_6993 = _69101[3];
										break;
									end
									if (_691213 == 7) then
										_6999[_69101[2]] = _69101[3 + 0];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[314 - (309 + 2)];
										_6993 = _6993 + 1;
										_691213 = 8;
									end
									if (3 == _691213) then
										_69101 = _6989[_6993];
										_691214 = _69101[2];
										_6999[_691214] = _6999[_691214](_6921(_6999, _691214 + 1, _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691213 = 4;
									end
									if (_691213 == 0) then
										_691214 = nil;
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_691213 = 1;
									end
									if (_691213 == 5) then
										_69101 = _6989[_6993];
										_6999[_69101[953 - (783 + 168)]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[9 - 6]][_69101[4]];
										_691213 = 6;
									end
									if (_691213 == 8) then
										_69101 = _6989[_6993];
										_691214 = _69101[2];
										_6999[_691214] = _6999[_691214](_6921(_6999, _691214 + 1, _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691213 = 9;
									end
								end
							end
						elseif (_69102 <= 149) then
							if (_69102 <= 147) then
								if (_6999[_69101[1214 - (1090 + 122)]] ~= _6999[_69101[4]]) then
									_6993 = _6993 + 1;
								else
									_6993 = _69101[3];
								end
							elseif (_69102 == 148) then
								local _691216 = 0;
								local _691217;
								local _691218;
								while true do
									if (_691216 == 3) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691218 = _69101[2];
										_6999[_691218](_6921(_6999, _691218 + 1, _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6973[_69101[3]];
										_6993 = _6993 + 1;
										_691216 = 4;
									end
									if (_691216 == 9) then
										_6999[_691218 + 1] = _691217;
										_6999[_691218] = _691217[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[5 - 3]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_691216 = 10;
									end
									if (0 == _691216) then
										_691217 = nil;
										_691218 = nil;
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[1 + 2]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691216 = 1;
									end
									if (_691216 == 15) then
										_6999[_691218](_6921(_6999, _691218 + 1, _69101[1 + 2]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										break;
									end
									if (_691216 == 10) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4 + 0]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[1 + 1]] = _69101[3] ~= (1695 - (556 + 1139));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691216 = 11;
									end
									if (_691216 == 8) then
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + (1 - 0);
										_69101 = _6989[_6993];
										_691218 = _69101[2];
										_691217 = _6999[_69101[3]];
										_691216 = 9;
									end
									if (2 == _691216) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3 + 0] ~= 0;
										_691216 = 3;
									end
									if (_691216 == 4) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[1121 - (628 + 490)]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691218 = _69101[2];
										_691216 = 5;
									end
									if (_691216 == 14) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3] ~= 0;
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691218 = _69101[2];
										_691216 = 15;
									end
									if (11 == _691216) then
										_691218 = _69101[2];
										_6999[_691218](_6921(_6999, _691218 + (16 - (6 + 9)), _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6973[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_691216 = 12;
									end
									if (_691216 == 1) then
										_691218 = _69101[2];
										_691217 = _6999[_69101[3]];
										_6999[_691218 + 1] = _691217;
										_6999[_691218] = _691217[_69101[4]];
										_6993 = _6993 + (3 - 2);
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_691216 = 2;
									end
									if (13 == _691216) then
										_6999[_691218] = _691217[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_691216 = 14;
									end
									if (_691216 == 6) then
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[18 - 14]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[777 - (431 + 343)] ~= 0;
										_6993 = _6993 + 1;
										_691216 = 7;
									end
									if (_691216 == 12) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691218 = _69101[2];
										_691217 = _6999[_69101[3]];
										_6999[_691218 + 1] = _691217;
										_691216 = 13;
									end
									if (_691216 == 7) then
										_69101 = _6989[_6993];
										_691218 = _69101[2];
										_6999[_691218](_6921(_6999, _691218 + 1, _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6973[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691216 = 8;
									end
									if (_691216 == 5) then
										_691217 = _6999[_69101[3]];
										_6999[_691218 + 1] = _691217;
										_6999[_691218] = _691217[_69101[4]];
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_6999[_69101[4 - 2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691216 = 6;
									end
								end
							else
								local _691219;
								local _691220;
								_6999[_69101[2]][_69101[3]] = _69101[3 + 1];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _69101[4];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _69101[4];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[171 - (28 + 141)]][_69101[3]] = _69101[4];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[1 + 1]] = _6999[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = {};
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _69101[4];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _69101[4];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _69101[4 - 0];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _69101[4];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691220 = _69101[2];
								_691219 = _6999[_69101[3]];
								_6999[_691220 + 1] = _691219;
								_6999[_691220] = _691219[_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691220 = _69101[2];
								_6999[_691220](_6999[_691220 + 1]);
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691220 = _69101[2];
								_691219 = _6999[_69101[3 + 0]];
								_6999[_691220 + 1] = _691219;
								_6999[_691220] = _691219[_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691220 = _69101[2];
								_6999[_691220](_6999[_691220 + (1318 - (486 + 831))]);
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[7 - 4]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[6 - 4]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[1 + 1]][_69101[3]] = _69101[4];
								_6993 = _6993 + (3 - 2);
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _69101[4];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3] ~= 0;
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6974[_69101[3]] = _6999[_69101[2]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6993 = _69101[3];
							end
						elseif (_69102 <= 151) then
							if (_69102 > 150) then
								local _691241 = 0;
								local _691242;
								local _691243;
								local _691244;
								local _691245;
								local _691246;
								while true do
									if (_691241 == 0) then
										_691242 = nil;
										_691243, _691244 = nil;
										_691245 = nil;
										_691246 = nil;
										_691246 = _69101[2];
										_691241 = 1;
									end
									if (_691241 == 7) then
										_69101 = _6989[_6993];
										_6999[_69101[292 - (23 + 267)]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_691241 = 8;
									end
									if (_691241 == 2) then
										_6999[_69101[1265 - (668 + 595)]] = _6973[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_691241 = 3;
									end
									if (_691241 == 8) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										if (_6999[_69101[1946 - (1129 + 815)]] == _69101[391 - (371 + 16)]) then
											_6993 = _6993 + 1;
										else
											_6993 = _69101[3];
										end
										break;
									end
									if (1 == _691241) then
										_691245 = _6999[_69101[3]];
										_6999[_691246 + 1] = _691245;
										_6999[_691246] = _691245[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691241 = 2;
									end
									if (_691241 == 6) then
										_6999[_69101[1 + 1]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[5 - 3]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_691241 = 7;
									end
									if (_691241 == 5) then
										_69101 = _6989[_6993];
										_691246 = _69101[2];
										_6999[_691246] = _6999[_691246](_6921(_6999, _691246 + 1, _6994));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691241 = 6;
									end
									if (_691241 == 4) then
										_691243, _691244 = _6992(_6999[_691246](_6921(_6999, _691246 + 1, _69101[3 + 0])));
										_6994 = (_691244 + _691246) - 1;
										_691242 = 0;
										for _694929 = _691246, _6994 do
											local _694930 = 0;
											while true do
												if (_694930 == 0) then
													_691242 = _691242 + 1;
													_6999[_694929] = _691243[_691242];
													break;
												end
											end
										end
										_6993 = _6993 + 1;
										_691241 = 5;
									end
									if (_691241 == 3) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691246 = _69101[2];
										_691241 = 4;
									end
								end
							else
								local _691247 = 0;
								local _691248;
								while true do
									if (_691247 == 0) then
										_691248 = _69101[2];
										_6999[_691248](_6921(_6999, _691248 + 1, _69101[3]));
										break;
									end
								end
							end
						elseif (_69102 > 152) then
							local _691249 = 0;
							local _691250;
							local _691251;
							local _691252;
							local _691253;
							while true do
								if (_691249 == 2) then
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691249 = 3;
								end
								if (_691249 == 0) then
									_691250 = nil;
									_691251, _691252 = nil;
									_691253 = nil;
									_6999[_69101[2]] = _6973[_69101[3]];
									_691249 = 1;
								end
								if (_691249 == 5) then
									_6999[_691253] = _6999[_691253](_6921(_6999, _691253 + 1, _6994));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									if not _6999[_69101[2]] then
										_6993 = _6993 + 1;
									else
										_6993 = _69101[3];
									end
									break;
								end
								if (_691249 == 3) then
									_691253 = _69101[2];
									_691251, _691252 = _6992(_6999[_691253](_6921(_6999, _691253 + 1, _69101[3])));
									_6994 = (_691252 + _691253) - 1;
									_691250 = 0;
									_691249 = 4;
								end
								if (4 == _691249) then
									for _694931 = _691253, _6994 do
										_691250 = _691250 + 1;
										_6999[_694931] = _691251[_691250];
									end
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691253 = _69101[2];
									_691249 = 5;
								end
								if (_691249 == 1) then
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_691249 = 2;
								end
							end
						else
							local _691254 = 0;
							while true do
								if (_691254 == 0) then
									_6999[_69101[2]] = not _6999[_69101[1753 - (1326 + 424)]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691254 = 1;
								end
								if (_691254 == 2) then
									_6999[_69101[2]] = _6973[_69101[10 - 7]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691254 = 3;
								end
								if (_691254 == 3) then
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691254 = 4;
								end
								if (1 == _691254) then
									_6973[_69101[3]] = _6999[_69101[3 - 1]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691254 = 2;
								end
								if (_691254 == 4) then
									if _6999[_69101[2]] then
										_6993 = _6993 + 1;
									else
										_6993 = _69101[3];
									end
									break;
								end
							end
						end
					elseif (_69102 <= 160) then
						if (_69102 <= 156) then
							if (_69102 <= 154) then
								local _69351;
								local _69352, _69353;
								local _69354;
								_6999[_69101[2]] = _6973[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[120 - (88 + 30)]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69354 = _69101[2];
								_69352, _69353 = _6992(_6999[_69354](_6921(_6999, _69354 + 1, _69101[3])));
								_6994 = (_69353 + _69354) - 1;
								_69351 = 0;
								for _69431 = _69354, _6994 do
									local _69432 = 0;
									while true do
										if (_69432 == 0) then
											_69351 = _69351 + 1;
											_6999[_69431] = _69352[_69351];
											break;
										end
									end
								end
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_69354 = _69101[2];
								_6999[_69354] = _6999[_69354](_6921(_6999, _69354 + 1, _6994));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								if _6999[_69101[2]] then
									_6993 = _6993 + 1;
								else
									_6993 = _69101[3];
								end
							elseif (_69102 > 155) then
								local _691256 = 0;
								local _691257;
								while true do
									if (_691256 == 4) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										if (_6999[_69101[2]] == _6999[_69101[4]]) then
											_6993 = _6993 + 1;
										else
											_6993 = _69101[3];
										end
										break;
									end
									if (_691256 == 1) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_691256 = 2;
									end
									if (_691256 == 0) then
										_691257 = nil;
										_6999[_69101[2]] = _6973[_69101[3]];
										_6993 = _6993 + (772 - (720 + 51));
										_691256 = 1;
									end
									if (_691256 == 2) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_691256 = 3;
									end
									if (_691256 == 3) then
										_69101 = _6989[_6993];
										_691257 = _69101[2];
										_6999[_691257] = _6999[_691257](_6921(_6999, _691257 + 1, _69101[3]));
										_691256 = 4;
									end
								end
							else
								local _691258 = 0;
								local _691259;
								local _691260;
								local _691261;
								local _691262;
								local _691263;
								while true do
									if (_691258 == 5) then
										_6993 = _69101[3];
										break;
									end
									if (_691258 == 0) then
										_691259 = nil;
										_691260 = nil;
										_691259, _691261 = nil;
										_691262 = nil;
										_691263 = nil;
										_6999[_69101[2]] = _6973[_69101[3]];
										_691258 = 1;
									end
									if (_691258 == 1) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691263 = _69101[2];
										_691258 = 2;
									end
									if (2 == _691258) then
										_691262 = _6999[_69101[3]];
										_6999[_691263 + 1] = _691262;
										_6999[_691263] = _691262[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691263 = _69101[2];
										_691258 = 3;
									end
									if (_691258 == 4) then
										_691263 = _69101[2];
										_691259 = {_6999[_691263](_6921(_6999, _691263 + 1, _6994))};
										_691260 = 0;
										for _694934 = _691263, _69101[4] do
											_691260 = _691260 + 1;
											_6999[_694934] = _691259[_691260];
										end
										_6993 = _6993 + (2 - 1);
										_69101 = _6989[_6993];
										_691258 = 5;
									end
									if (_691258 == 3) then
										_691259, _691261 = _6992(_6999[_691263](_6999[_691263 + 1]));
										_6994 = (_691261 + _691263) - 1;
										_691260 = 0;
										for _694937 = _691263, _6994 do
											_691260 = _691260 + 1;
											_6999[_694937] = _691259[_691260];
										end
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691258 = 4;
									end
								end
							end
						elseif (_69102 <= 158) then
							if (_69102 > 157) then
								local _691264 = 0;
								local _691265;
								while true do
									if (_691264 == 2) then
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]] + _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]] * _6999[_69101[4]];
										_6993 = _6993 + 1;
										_691264 = 3;
									end
									if (_691264 == 9) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]] * _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[1 + 2]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691264 = 10;
									end
									if (_691264 == 16) then
										_6999[_69101[1 + 1]][_69101[3]] = _6999[_69101[4 + 0]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[850 - (40 + 808)]] = _6999[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6993 = _69101[3];
										break;
									end
									if (_691264 == 11) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]] - _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]] + _6999[_69101[4]];
										_691264 = 12;
									end
									if (_691264 == 0) then
										_691265 = nil;
										_6999[_69101[1778 - (421 + 1355)]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_691264 = 1;
									end
									if (_691264 == 3) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[2 + 2]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[1086 - (286 + 797)]][_69101[4]];
										_691264 = 4;
									end
									if (14 == _691264) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_691264 = 15;
									end
									if (_691264 == 6) then
										_69101 = _6989[_6993];
										_6999[_69101[441 - (397 + 42)]] = _6999[_69101[3]] + _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_691264 = 7;
									end
									if (_691264 == 4) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691264 = 5;
									end
									if (_691264 == 12) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[787 - (222 + 563)]] = _6999[_69101[3]] * _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691264 = 13;
									end
									if (_691264 == 13) then
										_6999[_69101[2]] = {};
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[3]] = _6999[_69101[8 - 4]];
										_6993 = _6993 + 1;
										_691264 = 14;
									end
									if (_691264 == 1) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2 - 0]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691264 = 2;
									end
									if (_691264 == 15) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2 + 0]][_69101[193 - (23 + 167)]] = _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[1801 - (690 + 1108)]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691264 = 16;
									end
									if (_691264 == 5) then
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + (3 - 2);
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[6 - 2]];
										_6993 = _6993 + 1;
										_691264 = 6;
									end
									if (_691264 == 7) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]] + _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]] * _69101[4];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691264 = 8;
									end
									if (_691264 == 8) then
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691265 = _69101[2];
										_6999[_691265] = _6999[_691265](_6921(_6999, _691265 + 1, _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_691264 = 9;
									end
									if (_691264 == 10) then
										_6999[_69101[802 - (24 + 776)]] = _6999[_69101[4 - 1]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_691264 = 11;
									end
								end
							else
								local _691266;
								local _691267;
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_691267 = _69101[2];
								_691266 = _6999[_69101[3]];
								_6999[_691267 + 1] = _691266;
								_6999[_691267] = _691266[_69101[15 - 11]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3] ~= 0;
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691267 = _69101[2 + 0];
								_6999[_691267](_6921(_6999, _691267 + 1, _69101[2 + 1]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2 + 0]] = _6973[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[573 - (47 + 524)]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691267 = _69101[2];
								_691266 = _6999[_69101[3]];
								_6999[_691267 + 1] = _691266;
								_6999[_691267] = _691266[_69101[4]];
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[8 - 5]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2 - 0]] = _6999[_69101[6 - 3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3] ~= 0;
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691267 = _69101[2];
								_6999[_691267](_6921(_6999, _691267 + 1, _69101[3]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[1728 - (1165 + 561)]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6993 = _69101[3];
							end
						elseif (_69102 == 159) then
							local _691287 = 0;
							local _691288;
							local _691289;
							local _691290;
							local _691291;
							while true do
								if (_691287 == 3) then
									_6999[_69101[1 + 1]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691287 = 4;
								end
								if (_691287 == 5) then
									_691288 = 0;
									for _694940 = _691291, _6994 do
										local _694941 = 0;
										while true do
											if (_694941 == 0) then
												_691288 = _691288 + 1;
												_6999[_694940] = _691289[_691288];
												break;
											end
										end
									end
									_6993 = _6993 + 1;
									_691287 = 6;
								end
								if (_691287 == 6) then
									_69101 = _6989[_6993];
									_691291 = _69101[2];
									_6999[_691291] = _6999[_691291](_6921(_6999, _691291 + 1, _6994));
									break;
								end
								if (_691287 == 0) then
									_691288 = nil;
									_691289, _691290 = nil;
									_691291 = nil;
									_691287 = 1;
								end
								if (_691287 == 4) then
									_691291 = _69101[2];
									_691289, _691290 = _6992(_6999[_691291](_6921(_6999, _691291 + 1, _69101[3])));
									_6994 = (_691290 + _691291) - 1;
									_691287 = 5;
								end
								if (_691287 == 2) then
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691287 = 3;
								end
								if (_691287 == 1) then
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691287 = 2;
								end
							end
						else
							_6999[_69101[2]] = _6973[_69101[3]];
						end
					elseif (_69102 <= 163) then
						if (_69102 <= 161) then
							local _69362;
							local _69363;
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[6 - 4]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_69363 = _69101[2];
							_69362 = _6999[_69101[3]];
							_6999[_69363 + 1] = _69362;
							_6999[_69363] = _69362[_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6974[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[2 + 2]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3] ~= (479 - (341 + 138));
							_6993 = _6993 + 1 + 0;
							_69101 = _6989[_6993];
							_69363 = _69101[2];
							_6999[_69363](_6921(_6999, _69363 + 1, _69101[3]));
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6993 = _69101[3];
						elseif (_69102 > 162) then
							local _691294 = 0;
							local _691295;
							local _691296;
							local _691297;
							while true do
								if (_691294 == 0) then
									_691295 = _69101[2];
									_691296 = _6999[_691295];
									_691294 = 1;
								end
								if (_691294 == 1) then
									_691297 = _6999[_691295 + 2];
									if (_691297 > 0) then
										if (_691296 > _6999[_691295 + 1]) then
											_6993 = _69101[3];
										else
											_6999[_691295 + (5 - 2)] = _691296;
										end
									elseif (_691296 < _6999[_691295 + 1]) then
										_6993 = _69101[3];
									else
										_6999[_691295 + (329 - (89 + 237))] = _691296;
									end
									break;
								end
							end
						else
							local _691298 = 0;
							local _691299;
							while true do
								if (_691298 == 0) then
									_691299 = _69101[6 - 4];
									_6999[_691299] = _6999[_691299]();
									break;
								end
							end
						end
					elseif (_69102 <= 165) then
						if (_69102 > 164) then
							_6999[_69101[2]] = -_6999[_69101[3]];
						else
							local _691301;
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[3 - 1]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[883 - (581 + 300)]] = _6974[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[1224 - (855 + 365)]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6974[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[4 - 2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[1 + 2]] + _6999[_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]] * _69101[4];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]] * _6999[_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[1237 - (1030 + 205)]] = _6999[_69101[3]] / _6999[_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691301 = _69101[2];
							_6999[_691301] = _6999[_691301](_6999[_691301 + 1]);
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2 + 0]] = -_6999[_69101[3]];
							_6993 = _6993 + 1 + 0;
							_69101 = _6989[_6993];
							_6999[_69101[288 - (156 + 130)]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691301 = _69101[2];
							_6999[_691301] = _6999[_691301](_6921(_6999, _691301 + (2 - 1), _69101[3]));
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[4 - 1]] * _6999[_69101[7 - 3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[1 + 1]][_69101[3]] = _6999[_69101[3 + 1]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6993 = _69101[72 - (10 + 59)];
						end
					elseif (_69102 == 166) then
						local _691319 = 0;
						local _691320;
						while true do
							if (_691319 == 0) then
								_691320 = nil;
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691319 = 1;
							end
							if (_691319 == 5) then
								_691320 = _69101[2];
								_6999[_691320] = _6999[_691320](_6921(_6999, _691320 + 1, _69101[3 + 0]));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691319 = 6;
							end
							if (_691319 == 1) then
								_6999[_69101[2]] = _6999[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691320 = _69101[2];
								_691319 = 2;
							end
							if (_691319 == 4) then
								_69101 = _6989[_6993];
								_6999[_69101[9 - 7]] = _69101[1166 - (671 + 492)];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691319 = 5;
							end
							if (6 == _691319) then
								if (_6999[_69101[2]] == _6999[_69101[4]]) then
									_6993 = _6993 + (1216 - (369 + 846));
								else
									_6993 = _69101[3];
								end
								break;
							end
							if (_691319 == 3) then
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_691319 = 4;
							end
							if (_691319 == 2) then
								_6999[_691320] = _6999[_691320](_6999[_691320 + 1]);
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6973[_69101[1 + 2]];
								_691319 = 3;
							end
						end
					else
						_6993 = _69101[3];
					end
				elseif (_69102 <= 195) then
					if (_69102 <= 181) then
						if (_69102 <= 174) then
							if (_69102 <= 170) then
								if (_69102 <= 168) then
									local _69376 = 0;
									local _69377;
									local _69378;
									while true do
										if (_69376 == 0) then
											_69377 = nil;
											_69378 = nil;
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[1 + 1]] = _6999[_69101[3]][_69101[4]];
											_69376 = 1;
										end
										if (2 == _69376) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[1947 - (1036 + 909)]] = _6974[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2 + 0]] = _6999[_69101[3]][_69101[4]];
											_69376 = 3;
										end
										if (_69376 == 9) then
											_6999[_69101[2]] = _69101[3] ~= 0;
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69378 = _69101[2 - 0];
											_6999[_69378](_6921(_6999, _69378 + 1, _69101[3]));
											_6993 = _6993 + 1;
											_69376 = 10;
										end
										if (_69376 == 10) then
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											break;
										end
										if (_69376 == 4) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69378 = _69101[2];
											_6999[_69378](_6921(_6999, _69378 + 1, _69101[3]));
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69376 = 5;
										end
										if (_69376 == 1) then
											_6993 = _6993 + 1 + 0;
											_69101 = _6989[_6993];
											_69378 = _69101[2];
											_69377 = _6999[_69101[3]];
											_6999[_69378 + 1] = _69377;
											_6999[_69378] = _69377[_69101[4]];
											_69376 = 2;
										end
										if (5 == _69376) then
											_6999[_69101[2 - 0]] = _6973[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[206 - (11 + 192)]][_69101[3 + 1]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69376 = 6;
										end
										if (7 == _69376) then
											_6999[_69378] = _69377[_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[4 - 2]] = _6974[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69376 = 8;
										end
										if (_69376 == 8) then
											_6999[_69101[2]] = _6999[_69101[2 + 1]][_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[4 - 2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69376 = 9;
										end
										if (_69376 == 6) then
											_6999[_69101[2]] = _6999[_69101[3]][_69101[179 - (135 + 40)]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_69378 = _69101[2];
											_69377 = _6999[_69101[3]];
											_6999[_69378 + 1] = _69377;
											_69376 = 7;
										end
										if (_69376 == 3) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3] ~= 0;
											_69376 = 4;
										end
									end
								elseif (_69102 > 169) then
									local _691322 = 0;
									local _691323;
									local _691324;
									local _691325;
									while true do
										if (1 == _691322) then
											_691325 = 0;
											for _694942 = _691323, _69101[4] do
												_691325 = _691325 + 1;
												_6999[_694942] = _691324[_691325];
											end
											break;
										end
										if (0 == _691322) then
											_691323 = _69101[2];
											_691324 = {_6999[_691323](_6999[_691323 + 1])};
											_691322 = 1;
										end
									end
								else
									local _691326 = 0;
									local _691327;
									while true do
										if (_691326 == 6) then
											_6999[_691327] = _6999[_691327](_6921(_6999, _691327 + 1, _69101[3]));
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
											_691326 = 7;
										end
										if (_691326 == 5) then
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_691327 = _69101[2];
											_691326 = 6;
										end
										if (_691326 == 2) then
											_6999[_69101[2]] = _6974[_69101[3]];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
											_691326 = 3;
										end
										if (_691326 == 1) then
											_691327 = _69101[2];
											_6999[_691327](_6999[_691327 + 1]);
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_691326 = 2;
										end
										if (_691326 == 3) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_691326 = 4;
										end
										if (_691326 == 0) then
											_691327 = nil;
											_6999[_69101[2]] = _69101[3];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_691326 = 1;
										end
										if (_691326 == 7) then
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[3];
											break;
										end
										if (_691326 == 4) then
											_69101 = _6989[_6993];
											_6999[_69101[2]] = _69101[179 - (50 + 126)];
											_6993 = _6993 + 1;
											_69101 = _6989[_6993];
											_691326 = 5;
										end
									end
								end
							elseif (_69102 <= 172) then
								if (_69102 == 171) then
									local _691328;
									_6999[_69101[2]][_69101[3]] = _69101[4];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[8 - 5]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1 + 0;
									_69101 = _6989[_6993];
									_6999[_69101[2]][_69101[3]] = _69101[4];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6974[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691328 = _69101[2];
									_6999[_691328] = _6999[_691328](_6921(_6999, _691328 + 1, _69101[3]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6993 = _69101[3];
								else
									_6999[_69101[2]] = _6999[_69101[3]];
								end
							elseif (_69102 > (1586 - (1233 + 180))) then
								_6974[_69101[3]] = _6999[_69101[2]];
							else
								local _691345 = 0;
								local _691346;
								while true do
									if (_691345 == 1) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_691345 = 2;
									end
									if (_691345 == 0) then
										_691346 = nil;
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_691345 = 1;
									end
									if (_691345 == 7) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										break;
									end
									if (_691345 == 3) then
										_69101 = _6989[_6993];
										_691346 = _69101[2];
										_6999[_691346] = _6999[_691346](_6921(_6999, _691346 + 1, _69101[3]));
										_691345 = 4;
									end
									if (4 == _691345) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[1424 - (107 + 1314)]];
										_691345 = 5;
									end
									if (_691345 == 2) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + (970 - (522 + 447));
										_691345 = 3;
									end
									if (_691345 == 5) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = {};
										_691345 = 6;
									end
									if (_691345 == 6) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]];
										_691345 = 7;
									end
								end
							end
						elseif (_69102 <= 177) then
							if (_69102 <= 175) then
								_6999[_69101[2]] = _6999[_69101[3]][_69101[2 + 2]];
								_6993 = _6993 + (2 - 1);
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + (1 - 0);
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _69101[4];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[11 - 8]];
								_6993 = _6993 + (1911 - (716 + 1194));
								_69101 = _6989[_6993];
								_6999[_69101[1 + 1]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[506 - (74 + 429)];
							elseif (_69102 == 176) then
								if (_6999[_69101[2]] ~= _69101[4]) then
									_6993 = _6993 + 1;
								else
									_6993 = _69101[3];
								end
							else
								local _691347 = 0;
								local _691348;
								while true do
									if (_691347 == 1) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[1 + 1]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691347 = 2;
									end
									if (_691347 == 0) then
										_691348 = nil;
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[5 - 2];
										_691347 = 1;
									end
									if (_691347 == 2) then
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691348 = _69101[4 - 2];
										_6999[_691348] = _6999[_691348](_6921(_6999, _691348 + 1, _69101[3]));
										_691347 = 3;
									end
									if (_691347 == 4) then
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_691347 = 5;
									end
									if (_691347 == 8) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6993 = _69101[3];
										break;
									end
									if (_691347 == 7) then
										_691348 = _69101[2];
										_6999[_691348] = _6999[_691348](_6921(_6999, _691348 + 1, _69101[8 - 5]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[4 - 2]][_69101[3]] = _6999[_69101[4]];
										_691347 = 8;
									end
									if (5 == _691347) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_691347 = 6;
									end
									if (_691347 == 3) then
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691347 = 4;
									end
									if (_691347 == 6) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691347 = 7;
									end
								end
							end
						elseif (_69102 <= 179) then
							if (_69102 > 178) then
								local _691349 = 0;
								local _691350;
								local _691351;
								local _691352;
								while true do
									if (_691349 == 1) then
										_691352 = {};
										_691351 = _6918({}, {[_697("\25\106\187\253\238\197\62", "\160\70\53\210\147\138")]=function(_694945, _694946)
											local _694947 = _691352[_694946];
											return _694947[1][_694947[2]];
										end,[_697("\44\10\243\205\3\26\59\249\205\12", "\116\115\85\157\168")]=function(_694948, _694949, _694950)
											local _694951 = _691352[_694949];
											_694951[1][_694951[435 - (279 + 154)]] = _694950;
										end});
										_691349 = 2;
									end
									if (_691349 == 0) then
										_691350 = _6990[_69101[3]];
										_691351 = nil;
										_691349 = 1;
									end
									if (_691349 == 2) then
										for _694953 = 779 - (454 + 324), _69101[4] do
											local _694954 = 0;
											local _694955;
											while true do
												if (0 == _694954) then
													_6993 = _6993 + 1 + 0;
													_694955 = _6989[_6993];
													_694954 = 1;
												end
												if (_694954 == 1) then
													if (_694955[1] == 172) then
														_691352[_694953 - 1] = {_6999,_694955[3]};
													else
														_691352[_694953 - 1] = {_6973,_694955[3]};
													end
													_6998[#_6998 + 1] = _691352;
													break;
												end
											end
										end
										_6999[_69101[2]] = _6940(_691350, _691351, _6974);
										break;
									end
								end
							else
								local _691353 = 0;
								local _691354;
								while true do
									if (_691353 == 3) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[1095 - (277 + 816)]] = _69101[3];
										_6993 = _6993 + 1;
										_691353 = 4;
									end
									if (_691353 == 5) then
										_69101 = _6989[_6993];
										if (_6999[_69101[1185 - (1058 + 125)]] == _6999[_69101[4]]) then
											_6993 = _6993 + 1;
										else
											_6993 = _69101[3];
										end
										break;
									end
									if (4 == _691353) then
										_69101 = _6989[_6993];
										_691354 = _69101[2];
										_6999[_691354] = _6999[_691354](_6921(_6999, _691354 + (4 - 3), _69101[3]));
										_6993 = _6993 + 1;
										_691353 = 5;
									end
									if (1 == _691353) then
										_691354 = _69101[2];
										_6999[_691354] = _6999[_691354](_6999[_691354 + 1]);
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_691353 = 2;
									end
									if (_691353 == 0) then
										_691354 = nil;
										_6999[_69101[2]] = _6999[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691353 = 1;
									end
									if (_691353 == 2) then
										_6999[_69101[4 - 2]] = _6973[_69101[3]];
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_691353 = 3;
									end
								end
							end
						elseif (_69102 == 180) then
							local _691355;
							local _691356;
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1 + 0;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691356 = _69101[2];
							_691355 = _6999[_69101[3]];
							_6999[_691356 + 1] = _691355;
							_6999[_691356] = _691355[_69101[979 - (815 + 160)]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6974[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[12 - 9] ~= 0;
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691356 = _69101[2];
							_6999[_691356](_6921(_6999, _691356 + 1, _69101[3]));
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6973[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[7 - 4]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691356 = _69101[2];
							_691355 = _6999[_69101[3]];
							_6999[_691356 + 1] = _691355;
							_6999[_691356] = _691355[_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6974[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1 + 0;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[5 - 3]] = _69101[1901 - (41 + 1857)] ~= 0;
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691356 = _69101[2];
							_6999[_691356](_6921(_6999, _691356 + 1, _69101[3]));
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
						else
							local _691371;
							local _691372;
							local _691373, _691374;
							local _691375;
							_6999[_69101[2]] = _6973[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[1895 - (1222 + 671)]] = _69101[7 - 4];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691375 = _69101[2 - 0];
							_691373, _691374 = _6992(_6999[_691375](_6921(_6999, _691375 + 1, _69101[3])));
							_6994 = (_691374 + _691375) - 1;
							_691372 = 0;
							for _692046 = _691375, _6994 do
								local _692047 = 0;
								while true do
									if (0 == _692047) then
										_691372 = _691372 + 1;
										_6999[_692046] = _691373[_691372];
										break;
									end
								end
							end
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691375 = _69101[2];
							_6999[_691375] = _6999[_691375](_6921(_6999, _691375 + (1183 - (229 + 953)), _6994));
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691371 = _6999[_69101[4]];
							if not _691371 then
								_6993 = _6993 + 1;
							else
								local _692090 = 0;
								while true do
									if (_692090 == 0) then
										_6999[_69101[2]] = _691371;
										_6993 = _69101[3];
										break;
									end
								end
							end
						end
					elseif (_69102 <= 188) then
						if (_69102 <= 184) then
							if (_69102 <= 182) then
								if (_6999[_69101[2]] == _6999[_69101[4]]) then
									_6993 = _6993 + 1;
								else
									_6993 = _69101[3];
								end
							elseif (_69102 == (1957 - (1111 + 663))) then
								local _691387 = 0;
								local _691388;
								while true do
									if (_691387 == 0) then
										_691388 = nil;
										_6999[_69101[2]] = _6999[_69101[3]][_69101[1583 - (874 + 705)]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691387 = 1;
									end
									if (_691387 == 1) then
										_6999[_69101[2]] = _69101[1 + 2];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_691387 = 2;
									end
									if (2 == _691387) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1 + 0;
										_691387 = 3;
									end
									if (_691387 == 3) then
										_69101 = _6989[_6993];
										_691388 = _69101[2];
										_6999[_691388] = _6999[_691388](_6921(_6999, _691388 + 1, _69101[3]));
										break;
									end
								end
							else
								local _691389 = 0;
								local _691390;
								local _691391;
								while true do
									if (_691389 == 3) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3] ~= (0 + 0);
										_691389 = 4;
									end
									if (_691389 == 2) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[6 - 3]][_69101[4]];
										_691389 = 3;
									end
									if (0 == _691389) then
										_691390 = nil;
										_691391 = nil;
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_691389 = 1;
									end
									if (_691389 == 1) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691391 = _69101[2];
										_691390 = _6999[_69101[3]];
										_6999[_691391 + 1] = _691390;
										_6999[_691391] = _691390[_69101[4]];
										_691389 = 2;
									end
									if (_691389 == 4) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691391 = _69101[2];
										_6999[_691391](_6921(_6999, _691391 + 1, _69101[3]));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691389 = 5;
									end
									if (_691389 == 5) then
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6993 = _69101[3];
										break;
									end
								end
							end
						elseif (_69102 <= 186) then
							if (_69102 == (864 - (642 + 37))) then
								local _691392 = 0;
								local _691393;
								while true do
									if (_691392 == 2) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_691392 = 3;
									end
									if (_691392 == 4) then
										_69101 = _6989[_6993];
										_6999[_69101[1 + 1]][_69101[3]] = _6999[_69101[4]];
										break;
									end
									if (1 == _691392) then
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_691392 = 2;
									end
									if (_691392 == 0) then
										_691393 = nil;
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691392 = 1;
									end
									if (_691392 == 3) then
										_69101 = _6989[_6993];
										_691393 = _69101[2];
										_6999[_691393] = _6999[_691393](_6921(_6999, _691393 + 1, _69101[3]));
										_6993 = _6993 + 1;
										_691392 = 4;
									end
								end
							else
								local _691394 = 0;
								local _691395;
								local _691396;
								local _691397;
								local _691398;
								local _691399;
								while true do
									if (_691394 == 18) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691399 = _69101[2];
										_6999[_691399] = _6999[_691399](_6921(_6999, _691399 + 1, _69101[3]));
										break;
									end
									if (_691394 == 6) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691399 = _69101[2];
										_691396, _691397 = _6992(_6999[_691399](_6921(_6999, _691399 + 1 + 0, _69101[3])));
										_691394 = 7;
									end
									if (_691394 == 11) then
										_6999[_691399] = _6999[_691399](_6999[_691399 + 1]);
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[2 + 1]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + (1016 - (657 + 358));
										_69101 = _6989[_6993];
										_691394 = 12;
									end
									if (_691394 == 4) then
										_691399 = _69101[2];
										_6999[_691399] = _6999[_691399](_6921(_6999, _691399 + 1, _6994));
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_6999[_69101[1543 - (718 + 823)]] = _6999[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_691394 = 5;
									end
									if (_691394 == 16) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[1834 - (1552 + 280)]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[836 - (64 + 770)]] = {};
										_691394 = 17;
									end
									if (_691394 == 2) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691399 = _69101[2];
										_691396, _691397 = _6992(_6999[_691399](_6921(_6999, _691399 + 1, _69101[3])));
										_6994 = (_691397 + _691399) - 1;
										_691395 = 0;
										for _694958 = _691399, _6994 do
											local _694959 = 0;
											while true do
												if (_694959 == 0) then
													_691395 = _691395 + (2 - 1);
													_6999[_694958] = _691396[_691395];
													break;
												end
											end
										end
										_691394 = 3;
									end
									if (10 == _691394) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[6 - 3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + (1 - 0);
										_69101 = _6989[_6993];
										_691399 = _69101[2];
										_691394 = 11;
									end
									if (14 == _691394) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2 + 0]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_6999[_69101[5 - 3]] = _6974[_69101[3]];
										_691394 = 15;
									end
									if (3 == _691394) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691399 = _69101[2];
										_691396, _691397 = _6992(_6999[_691399](_6921(_6999, _691399 + 1, _6994)));
										_6994 = (_691397 + _691399) - 1;
										_691395 = 0;
										for _694960 = _691399, _6994 do
											_691395 = _691395 + 1;
											_6999[_694960] = _691396[_691395];
										end
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691394 = 4;
									end
									if (_691394 == 7) then
										_6994 = (_691397 + _691399) - 1;
										_691395 = 0;
										for _694963 = _691399, _6994 do
											local _694964 = 0;
											while true do
												if (_694964 == 0) then
													_691395 = _691395 + 1;
													_6999[_694963] = _691396[_691395];
													break;
												end
											end
										end
										_6993 = _6993 + (806 - (266 + 539));
										_69101 = _6989[_6993];
										_691399 = _69101[2];
										_691396, _691397 = _6992(_6999[_691399](_6921(_6999, _691399 + 1, _6994)));
										_6994 = (_691397 + _691399) - 1;
										_691395 = 0;
										_691394 = 8;
									end
									if (_691394 == 17) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = {};
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2 + 0]] = _6973[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_691394 = 18;
									end
									if (_691394 == 12) then
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691399 = _69101[2];
										_6999[_691399] = _6999[_691399](_6999[_691399 + 1]);
										_6993 = _6993 + (2 - 1);
										_69101 = _6989[_6993];
										_6999[_69101[4 - 2]] = _6973[_69101[3]];
										_6993 = _6993 + (1188 - (1151 + 36));
										_691394 = 13;
									end
									if (_691394 == 13) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691399 = _69101[2];
										_6999[_691399] = _6999[_691399](_6921(_6999, _691399 + 1, _69101[3]));
										_691394 = 14;
									end
									if (_691394 == 0) then
										_691395 = nil;
										_691396, _691397 = nil;
										_691398 = nil;
										_691399 = nil;
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + (2 - 1);
										_69101 = _6989[_6993];
										_691399 = _69101[2];
										_691398 = _6999[_69101[3]];
										_691394 = 1;
									end
									if (_691394 == 15) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6974[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_691394 = 16;
									end
									if (_691394 == 1) then
										_6999[_691399 + 1] = _691398;
										_6999[_691399] = _691398[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6973[_69101[3]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[457 - (233 + 221)];
										_6993 = _6993 + 1;
										_691394 = 2;
									end
									if (5 == _691394) then
										_69101 = _6989[_6993];
										_691399 = _69101[2];
										_691398 = _6999[_69101[3]];
										_6999[_691399 + 1] = _691398;
										_6999[_691399] = _691398[_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6973[_69101[3]];
										_6993 = _6993 + 1;
										_691394 = 6;
									end
									if (_691394 == 8) then
										for _694965 = _691399, _6994 do
											_691395 = _691395 + 1;
											_6999[_694965] = _691396[_691395];
										end
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691399 = _69101[2];
										_6999[_691399] = _6999[_691399](_6921(_6999, _691399 + 1, _6994));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]];
										_6993 = _6993 + 1;
										_691394 = 9;
									end
									if (_691394 == 9) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691399 = _69101[5 - 3];
										_6999[_691399] = _6999[_691399](_6999[_691399 + 1]);
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[1227 - (636 + 589)]] = _6999[_69101[3]];
										_691394 = 10;
									end
								end
							end
						elseif (_69102 > 187) then
							if (_6999[_69101[2]] < _6999[_69101[4]]) then
								_6993 = _6993 + 1;
							else
								_6993 = _69101[3];
							end
						else
							local _691400 = 0;
							while true do
								if (_691400 == 3) then
									_6999[_69101[1 + 1]][_69101[3]] = _69101[4];
									_6993 = _6993 + (1244 - (157 + 1086));
									_69101 = _6989[_6993];
									_6993 = _69101[3];
									break;
								end
								if (_691400 == 0) then
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + (2 - 1);
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_691400 = 1;
								end
								if (_691400 == 2) then
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691400 = 3;
								end
								if (_691400 == 1) then
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_691400 = 2;
								end
							end
						end
					elseif (_69102 <= 191) then
						if (_69102 <= 189) then
							_6999[_69101[2]][_6999[_69101[3]]] = _69101[4];
						elseif (_69102 > 190) then
							_6999[_69101[2]] = _6999[_69101[3]] + _6999[_69101[4]];
						else
							_6999[_69101[2]] = _6973[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[5 - 2]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							if (_69101[2] < _6999[_69101[4]]) then
								_6993 = _69101[3];
							else
								_6993 = _6993 + 1;
							end
						end
					elseif (_69102 <= 193) then
						if (_69102 == 192) then
							local _691407 = 0;
							local _691408;
							while true do
								if (4 == _691407) then
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]] * _6999[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]] / _6999[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691407 = 5;
								end
								if (_691407 == 6) then
									_6993 = _6993 + 1 + 0;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691408 = _69101[2];
									_6999[_691408] = _6999[_691408](_6921(_6999, _691408 + 1, _69101[3]));
									_6993 = _6993 + 1;
									_691407 = 7;
								end
								if (_691407 == 1) then
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6974[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691407 = 2;
								end
								if (_691407 == 7) then
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]] * _6999[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[1219 - (841 + 376)]][_69101[3]] = _6999[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6993 = _69101[3];
									break;
								end
								if (_691407 == 5) then
									_691408 = _69101[2];
									_6999[_691408] = _6999[_691408](_6999[_691408 + (1932 - (1813 + 118))]);
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = -_6999[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_691407 = 6;
								end
								if (_691407 == 0) then
									_691408 = nil;
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[8 - 6]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_691407 = 1;
								end
								if (_691407 == 2) then
									_6999[_69101[2]] = _6974[_69101[3]];
									_6993 = _6993 + (1 - 0);
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3 - 0]][_69101[823 - (599 + 220)]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_691407 = 3;
								end
								if (_691407 == 3) then
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]] + _6999[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[3 - 1]] = _6999[_69101[3]] * _69101[4];
									_691407 = 4;
								end
							end
						else
							local _691409;
							_6999[_69101[2]]();
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6974[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2 - 0]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6974[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1 + 0;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[5 - 3]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[861 - (464 + 395)]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[5 - 3]] = _6974[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691409 = _69101[2];
							_6999[_691409] = _6999[_691409](_6921(_6999, _691409 + 1, _69101[3]));
							_6993 = _6993 + 1 + 0;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[840 - (467 + 370)]] * _6999[_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[3 - 1]][_69101[3]] = _6999[_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6993 = _69101[3];
						end
					elseif (_69102 > 194) then
						if (_69101[2] < _6999[_69101[4]]) then
							_6993 = _69101[3];
						else
							_6993 = _6993 + 1;
						end
					else
						local _691422 = 0;
						local _691423;
						while true do
							if (_691422 == 5) then
								_69101 = _6989[_6993];
								_691423 = _69101[2];
								_6999[_691423] = _6999[_691423](_6921(_6999, _691423 + 1, _69101[3]));
								_691422 = 6;
							end
							if (_691422 == 4) then
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[523 - (150 + 370)];
								_6993 = _6993 + 1;
								_691422 = 5;
							end
							if (_691422 == 0) then
								_691423 = nil;
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1 + 0;
								_691422 = 1;
							end
							if (_691422 == 3) then
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[6 - 3];
								_6993 = _6993 + 1;
								_691422 = 4;
							end
							if (_691422 == 2) then
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1 + 0;
								_691422 = 3;
							end
							if (_691422 == 6) then
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
								break;
							end
							if (_691422 == 1) then
								_69101 = _6989[_6993];
								_6999[_69101[6 - 4]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_691422 = 2;
							end
						end
					end
				elseif (_69102 <= 209) then
					if (_69102 <= 202) then
						if (_69102 <= 198) then
							if (_69102 <= 196) then
								local _69390 = _69101[2];
								local _69391 = _6999[_69101[3]];
								_6999[_69390 + 1] = _69391;
								_6999[_69390] = _69391[_69101[4]];
							elseif (_69102 > (1479 - (74 + 1208))) then
								local _691424 = 0;
								local _691425;
								local _691426;
								local _691427;
								local _691428;
								while true do
									if (_691424 == 3) then
										_691428 = _69101[9 - 7];
										_691426, _691427 = _6992(_6999[_691428](_6921(_6999, _691428 + 1, _69101[3])));
										_6994 = (_691427 + _691428) - 1;
										_691425 = 0;
										_691424 = 4;
									end
									if (_691424 == 0) then
										_691425 = nil;
										_691426, _691427 = nil;
										_691428 = nil;
										_6999[_69101[2]] = _6973[_69101[3]];
										_691424 = 1;
									end
									if (_691424 == 2) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691424 = 3;
									end
									if (5 == _691424) then
										_6999[_691428] = _6999[_691428](_6921(_6999, _691428 + 1, _6994));
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										if _6999[_69101[2]] then
											_6993 = _6993 + 1;
										else
											_6993 = _69101[3];
										end
										break;
									end
									if (_691424 == 4) then
										for _694968 = _691428, _6994 do
											local _694969 = 0;
											while true do
												if (0 == _694969) then
													_691425 = _691425 + 1;
													_6999[_694968] = _691426[_691425];
													break;
												end
											end
										end
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_691428 = _69101[2];
										_691424 = 5;
									end
									if (_691424 == 1) then
										_6993 = _6993 + (2 - 1);
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _69101[3];
										_6993 = _6993 + 1;
										_691424 = 2;
									end
								end
							else
								_6999[_69101[2]] = _6974[_69101[3]];
							end
						elseif (_69102 <= 200) then
							if (_69102 == 199) then
								local _691431 = 0;
								while true do
									if (2 == _691431) then
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[3 + 0]] + _6999[_69101[4]];
										_6993 = _6993 + 1 + 0;
										_69101 = _6989[_6993];
										_691431 = 3;
									end
									if (_691431 == 0) then
										_6999[_69101[2]]();
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2 + 0]] = _6999[_69101[3]][_69101[394 - (14 + 376)]];
										_691431 = 1;
									end
									if (_691431 == 3) then
										if (_6999[_69101[5 - 3]] == _69101[4]) then
											_6993 = _6993 + 1;
										else
											_6993 = _69101[3];
										end
										break;
									end
									if (1 == _691431) then
										_6993 = _6993 + 1;
										_69101 = _6989[_6993];
										_6999[_69101[2]] = _6999[_69101[4 - 1]][_69101[4]];
										_6993 = _6993 + 1 + 0;
										_691431 = 2;
									end
								end
							else
								_6999[_69101[2]] = _6999[_69101[3]] % _6999[_69101[4]];
							end
						elseif (_69102 > 201) then
							if (_69101[2] == _6999[_69101[4]]) then
								_6993 = _6993 + 1;
							else
								_6993 = _69101[3 + 0];
							end
						else
							local _691433 = 0;
							local _691434;
							while true do
								if (_691433 == 3) then
									_69101 = _6989[_6993];
									_691434 = _69101[2];
									_6999[_691434] = _6999[_691434](_6921(_6999, _691434 + 1, _69101[3]));
									_6993 = _6993 + 1;
									_691433 = 4;
								end
								if (_691433 == 1) then
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_691433 = 2;
								end
								if (2 == _691433) then
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_691433 = 3;
								end
								if (_691433 == 4) then
									_69101 = _6989[_6993];
									_6999[_69101[2]][_69101[3]] = _6999[_69101[9 - 5]];
									break;
								end
								if (_691433 == 0) then
									_691434 = nil;
									_6999[_69101[80 - (23 + 55)]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691433 = 1;
								end
							end
						end
					elseif (_69102 <= 205) then
						if (_69102 <= 203) then
							_6999[_69101[2]] = _69101[3 + 0] + _6999[_69101[4 + 0]];
						elseif (_69102 > 204) then
							local _691435;
							local _691436;
							local _691437;
							_6974[_69101[4 - 1]] = _6999[_69101[2]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[1 + 1]] = _6974[_69101[3]];
							_6993 = _6993 + (902 - (652 + 249));
							_69101 = _6989[_6993];
							_6999[_69101[5 - 3]] = _69101[1871 - (708 + 1160)];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691437 = _69101[2];
							_691436 = _6999[_691437];
							_691435 = _6999[_691437 + 2];
							if (_691435 > 0) then
								if (_691436 > _6999[_691437 + 1]) then
									_6993 = _69101[3];
								else
									_6999[_691437 + 3] = _691436;
								end
							elseif (_691436 < _6999[_691437 + 1]) then
								_6993 = _69101[3];
							else
								_6999[_691437 + 3] = _691436;
							end
						else
							do
								return;
							end
						end
					elseif (_69102 <= 207) then
						if (_69102 > 206) then
							local _691449 = 0;
							local _691450;
							while true do
								if (_691449 == 0) then
									_691450 = nil;
									_6999[_69101[5 - 3]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[6 - 2]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_691449 = 1;
								end
								if (_691449 == 12) then
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2 + 0]] = _6999[_69101[3]] * _6999[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[942 - (850 + 90)]][_69101[3]] = _6999[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691449 = 13;
								end
								if (_691449 == 7) then
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]] + _6999[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]] * _69101[4];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691449 = 8;
								end
								if (_691449 == 11) then
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]] - _6999[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]] + _6999[_69101[4]];
									_691449 = 12;
								end
								if (_691449 == 16) then
									_6999[_69101[2]][_69101[3 - 0]] = _6999[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6993 = _69101[3];
									break;
								end
								if (_691449 == 2) then
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[29 - (10 + 17)]] = _6999[_69101[3]] + _6999[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]] * _6999[_69101[4]];
									_6993 = _6993 + 1;
									_691449 = 3;
								end
								if (14 == _691449) then
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4 + 0]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_691449 = 15;
								end
								if (_691449 == 8) then
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691450 = _69101[2];
									_6999[_691450] = _6999[_691450](_6921(_6999, _691450 + 1, _69101[3]));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_691449 = 9;
								end
								if (_691449 == 3) then
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6974[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_691449 = 4;
								end
								if (_691449 == 10) then
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[2 + 1]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[2 + 1]][_69101[4]];
									_6993 = _6993 + 1;
									_691449 = 11;
								end
								if (_691449 == 9) then
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]] * _6999[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6974[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691449 = 10;
								end
								if (_691449 == 6) then
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]] + _6999[_69101[1736 - (1400 + 332)]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[5 - 2]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[1911 - (242 + 1666)]][_69101[4]];
									_691449 = 7;
								end
								if (13 == _691449) then
									_6999[_69101[2]] = {};
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[4 - 1]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[1392 - (360 + 1030)]][_69101[3]] = _6999[_69101[4]];
									_6993 = _6993 + 1;
									_691449 = 14;
								end
								if (_691449 == 4) then
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6974[_69101[3]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691449 = 5;
								end
								if (_691449 == 5) then
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[1 + 1]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_691449 = 6;
								end
								if (_691449 == 1) then
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691449 = 2;
								end
								if (_691449 == 15) then
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]][_69101[3]] = _6999[_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[7 - 4]][_69101[4]];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691449 = 16;
								end
							end
						else
							_6999[_69101[2]] = _69101[1664 - (909 + 752)] ~= 0;
							_6993 = _6993 + (1224 - (109 + 1114));
						end
					elseif (_69102 == 208) then
						local _691452;
						local _691453, _691454;
						local _691455;
						local _691456;
						_691456 = _69101[2];
						_691455 = _6999[_69101[3]];
						_6999[_691456 + (1 - 0)] = _691455;
						_6999[_691456] = _691455[_69101[2 + 2]];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2]] = _6973[_69101[3]];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2]] = _69101[245 - (6 + 236)];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2]] = _69101[3];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_691456 = _69101[2];
						_691453, _691454 = _6992(_6999[_691456](_6921(_6999, _691456 + 1 + 0, _69101[3])));
						_6994 = (_691454 + _691456) - 1;
						_691452 = 0;
						for _692048 = _691456, _6994 do
							local _692049 = 0;
							while true do
								if (0 == _692049) then
									_691452 = _691452 + 1;
									_6999[_692048] = _691453[_691452];
									break;
								end
							end
						end
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_691456 = _69101[2];
						_6999[_691456] = _6999[_691456](_6921(_6999, _691456 + 1, _6994));
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2 + 0]] = _69101[3] ~= 0;
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6974[_69101[3]] = _6999[_69101[2]];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2]] = _69101[3];
					else
						local _691470 = 0;
						while true do
							if (_691470 == 2) then
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6973[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691470 = 3;
							end
							if (_691470 == 3) then
								_6999[_69101[2]][_69101[3]] = _69101[4];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[3 - 1]] = _69101[3];
								break;
							end
							if (_691470 == 1) then
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]][_69101[3]] = _69101[4];
								_6993 = _6993 + 1;
								_691470 = 2;
							end
							if (_691470 == 0) then
								_6999[_69101[2]][_69101[3]] = _69101[8 - 4];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6973[_69101[3]];
								_691470 = 1;
							end
						end
					end
				elseif (_69102 <= 216) then
					if (_69102 <= 212) then
						if (_69102 <= 210) then
							local _69396;
							local _69397, _69398;
							local _69399;
							local _69400;
							_6999[_69101[2]] = _6974[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[1135 - (1076 + 57)]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[1 + 2];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[691 - (579 + 110)]] = _69101[1 + 2];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_69400 = _69101[2];
							_6999[_69400] = _6999[_69400](_6921(_6999, _69400 + 1, _69101[3]));
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]][_69101[3 + 0]] = _6999[_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6974[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_69400 = _69101[2];
							_69399 = _6999[_69101[3]];
							_6999[_69400 + 1] = _69399;
							_6999[_69400] = _69399[_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6973[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2 + 0]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_69400 = _69101[2];
							_69397, _69398 = _6992(_6999[_69400](_6921(_6999, _69400 + 1, _69101[3])));
							_6994 = (_69398 + _69400) - 1;
							_69396 = 0;
							for _69433 = _69400, _6994 do
								_69396 = _69396 + 1;
								_6999[_69433] = _69397[_69396];
							end
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_69400 = _69101[2];
							_6999[_69400] = _6999[_69400](_6921(_6999, _69400 + (408 - (174 + 233)), _6994));
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[5 - 3]] = _6999[_69101[3]][_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
						elseif (_69102 == 211) then
							local _691471 = 0;
							local _691472;
							local _691473;
							local _691474;
							local _691475;
							while true do
								if (_691471 == 3) then
									_691475 = _69101[2];
									_691473, _691474 = _6992(_6999[_691475](_6921(_6999, _691475 + 1, _69101[3])));
									_6994 = (_691474 + _691475) - (1 + 0);
									_691472 = 1174 - (663 + 511);
									_691471 = 4;
								end
								if (_691471 == 0) then
									_691472 = nil;
									_691473, _691474 = nil;
									_691475 = nil;
									_6999[_69101[2]] = _6973[_69101[3]];
									_691471 = 1;
								end
								if (_691471 == 1) then
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_691471 = 2;
								end
								if (_691471 == 2) then
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[4 - 1];
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691471 = 3;
								end
								if (_691471 == 5) then
									_6999[_691475] = _6999[_691475](_6921(_6999, _691475 + 1, _6994));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _6999[_69101[3]];
									break;
								end
								if (_691471 == 4) then
									for _694976 = _691475, _6994 do
										local _694977 = 0;
										while true do
											if (_694977 == 0) then
												_691472 = _691472 + 1;
												_6999[_694976] = _691473[_691472];
												break;
											end
										end
									end
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691475 = _69101[2];
									_691471 = 5;
								end
							end
						else
							local _691476;
							local _691477, _691478;
							local _691479;
							_6999[_69101[2]] = _6973[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691479 = _69101[2];
							_691477, _691478 = _6992(_6999[_691479](_6921(_6999, _691479 + 1, _69101[3 + 0])));
							_6994 = (_691478 + _691479) - 1;
							_691476 = 0;
							for _692050 = _691479, _6994 do
								local _692051 = 0;
								while true do
									if (0 == _692051) then
										_691476 = _691476 + 1 + 0;
										_6999[_692050] = _691477[_691476];
										break;
									end
								end
							end
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691479 = _69101[2];
							_6999[_691479] = _6999[_691479](_6921(_6999, _691479 + 1, _6994));
							_6993 = _6993 + (2 - 1);
							_69101 = _6989[_6993];
							if _6999[_69101[2]] then
								_6993 = _6993 + 1;
							else
								_6993 = _69101[3];
							end
						end
					elseif (_69102 <= 214) then
						if (_69102 > (129 + 84)) then
							local _691486;
							local _691487;
							local _691486, _691488;
							local _691489;
							local _691490;
							_6999[_69101[2]] = _6973[_69101[3]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[4 - 2]] = _6999[_69101[7 - 4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691490 = _69101[1 + 1];
							_6999[_691490] = _6999[_691490](_6999[_691490 + 1]);
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691490 = _69101[2];
							_691489 = _6999[_69101[3]];
							_6999[_691490 + (1 - 0)] = _691489;
							_6999[_691490] = _691489[_69101[4]];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691490 = _69101[2 + 0];
							_691486, _691488 = _6992(_6999[_691490](_6999[_691490 + 1]));
							_6994 = (_691488 + _691490) - 1;
							_691487 = 0;
							for _692052 = _691490, _6994 do
								local _692053 = 0;
								while true do
									if (_692053 == 0) then
										_691487 = _691487 + 1;
										_6999[_692052] = _691486[_691487];
										break;
									end
								end
							end
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_691490 = _69101[2];
							_691486 = {_6999[_691490](_6921(_6999, _691490 + 1 + 0, _6994))};
							_691487 = 0;
							for _692054 = _691490, _69101[4] do
								_691487 = _691487 + 1;
								_6999[_692054] = _691486[_691487];
							end
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6993 = _69101[3];
						else
							_6999[_69101[724 - (478 + 244)]][_69101[3]] = _69101[4];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6999[_69101[2]] = _69101[3] ~= 0;
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6974[_69101[3]] = _6999[_69101[2]];
							_6993 = _6993 + (518 - (440 + 77));
							_69101 = _6989[_6993];
							_6999[_69101[1 + 1]] = _69101[3];
							_6993 = _6993 + 1;
							_69101 = _6989[_6993];
							_6993 = _69101[3];
						end
					elseif (_69102 > 215) then
						local _691511;
						_6999[_69101[2]] = _6973[_69101[3]];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2]] = _69101[3];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2]] = _69101[10 - 7];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_691511 = _69101[2];
						_6999[_691511] = _6999[_691511](_6921(_6999, _691511 + (1557 - (655 + 901)), _69101[3]));
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2]] = {};
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2]] = _6973[_69101[3]];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2]] = _69101[3];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2]] = _69101[3];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_691511 = _69101[2];
						_6999[_691511] = _6999[_691511](_6921(_6999, _691511 + 1 + 0, _69101[3]));
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2]] = _6973[_69101[3 + 0]];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2]] = _69101[3];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2]] = _69101[3];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_691511 = _69101[2 + 0];
						_6999[_691511] = _6999[_691511](_6921(_6999, _691511 + 1, _69101[3]));
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2]][_6999[_69101[3]]] = _6999[_69101[4]];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2]] = _6973[_69101[3]];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[7 - 5]] = _69101[1448 - (695 + 750)];
						_6993 = _6993 + (3 - 2);
						_69101 = _6989[_6993];
						_6999[_69101[2]] = _69101[3];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_691511 = _69101[2];
						_6999[_691511] = _6999[_691511](_6921(_6999, _691511 + 1, _69101[3]));
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2]] = _6973[_69101[3]];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2 - 0]] = _69101[3];
						_6993 = _6993 + (3 - 2);
						_69101 = _6989[_6993];
						_6999[_69101[2]] = _69101[3];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_691511 = _69101[2];
						_6999[_691511] = _6999[_691511](_6921(_6999, _691511 + 1, _69101[3]));
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2]][_6999[_69101[3]]] = _6999[_69101[355 - (285 + 66)]];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2]] = _6973[_69101[3]];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2]] = _69101[3];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2]] = _69101[3];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_691511 = _69101[2];
						_6999[_691511] = _6999[_691511](_6921(_6999, _691511 + 1, _69101[6 - 3]));
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2]] = _6973[_69101[3]];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2]] = _69101[3];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2]] = _69101[3];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_691511 = _69101[2];
						_6999[_691511] = _6999[_691511](_6921(_6999, _691511 + 1, _69101[1313 - (682 + 628)]));
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[1 + 1]][_6999[_69101[302 - (176 + 123)]]] = _6999[_69101[4]];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2]] = _6973[_69101[3]];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2]] = _69101[3];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[1 + 1]] = _69101[3];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_691511 = _69101[2];
						_6999[_691511] = _6999[_691511](_6921(_6999, _691511 + 1, _69101[3]));
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_6999[_69101[2]][_6999[_69101[3]]] = _69101[4];
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						_691511 = _69101[2];
						_6999[_691511](_6921(_6999, _691511 + 1, _69101[3]));
						_6993 = _6993 + 1;
						_69101 = _6989[_6993];
						do
							return;
						end
						_6993 = _6993 + 1 + 0;
						_69101 = _6989[_6993];
						_6993 = _69101[3];
					else
						local _691530 = _69101[2];
						local _691531 = _6999[_691530 + 2];
						local _691532 = _6999[_691530] + _691531;
						_6999[_691530] = _691532;
						if (_691531 > 0) then
							if (_691532 <= _6999[_691530 + (270 - (239 + 30))]) then
								local _694982 = 0;
								while true do
									if (_694982 == 0) then
										_6993 = _69101[3];
										_6999[_691530 + 1 + 2] = _691532;
										break;
									end
								end
							end
						elseif (_691532 >= _6999[_691530 + 1]) then
							_6993 = _69101[3];
							_6999[_691530 + 3] = _691532;
						end
					end
				elseif (_69102 <= 220) then
					if (_69102 <= 218) then
						if (_69102 > (209 + 8)) then
							_6999[_69101[2]] = {};
						else
							local _691535 = 0;
							local _691536;
							local _691537;
							local _691538;
							local _691539;
							local _691540;
							while true do
								if (_691535 == 6) then
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691540 = _69101[5 - 3];
									_691535 = 7;
								end
								if (_691535 == 1) then
									_691540 = nil;
									_6999[_69101[2]] = _6973[_69101[3]];
									_6993 = _6993 + 1;
									_691535 = 2;
								end
								if (_691535 == 8) then
									_691536 = _6999[_69101[4]];
									if not _691536 then
										_6993 = _6993 + 1;
									else
										_6999[_69101[2]] = _691536;
										_6993 = _69101[3];
									end
									break;
								end
								if (_691535 == 7) then
									_6999[_691540] = _6999[_691540](_6921(_6999, _691540 + 1, _6994));
									_6993 = _6993 + 1;
									_69101 = _6989[_6993];
									_691535 = 8;
								end
								if (_691535 == 5) then
									_6994 = (_691539 + _691540) - 1;
									_691537 = 0;
									for _694985 = _691540, _6994 do
										local _694986 = 0;
										while true do
											if (_694986 == 0) then
												_691537 = _691537 + 1;
												_6999[_694985] = _691538[_691537];
												break;
											end
										end
									end
									_691535 = 6;
								end
								if (_691535 == 0) then
									_691536 = nil;
									_691537 = nil;
									_691538, _691539 = nil;
									_691535 = 1;
								end
								if (_691535 == 2) then
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_691535 = 3;
								end
								if (4 == _691535) then
									_69101 = _6989[_6993];
									_691540 = _69101[2];
									_691538, _691539 = _6992(_6999[_691540](_6921(_6999, _691540 + (1 - 0), _69101[3])));
									_691535 = 5;
								end
								if (3 == _691535) then
									_69101 = _6989[_6993];
									_6999[_69101[2]] = _69101[3];
									_6993 = _6993 + 1;
									_691535 = 4;
								end
							end
						end
					elseif (_69102 > 219) then
						local _691541 = 0;
						local _691542;
						local _691543;
						local _691544;
						local _691545;
						while true do
							if (_691541 == 9) then
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691545 = _69101[2];
								_6999[_691545] = _6999[_691545](_6921(_6999, _691545 + 1, _6994));
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_691541 = 10;
							end
							if (_691541 == 11) then
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691545 = _69101[2];
								_691543, _691544 = _6992(_6999[_691545](_6921(_6999, _691545 + 1, _69101[3])));
								_6994 = (_691544 + _691545) - 1;
								_691541 = 12;
							end
							if (_691541 == 31) then
								_69101 = _6989[_6993];
								_691545 = _69101[2];
								_691543, _691544 = _6992(_6999[_691545](_6921(_6999, _691545 + 1, _69101[3])));
								_6994 = (_691544 + _691545) - (2 - 1);
								_691542 = 0;
								for _694987 = _691545, _6994 do
									local _694988 = 0;
									while true do
										if (_694988 == 0) then
											_691542 = _691542 + (1 - 0);
											_6999[_694987] = _691543[_691542];
											break;
										end
									end
								end
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691541 = 32;
							end
							if (_691541 == 22) then
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691545 = _69101[2];
								_6999[_691545] = _6999[_691545](_6921(_6999, _691545 + 1, _6994));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_691541 = 23;
							end
							if (_691541 == 12) then
								_691542 = 0;
								for _694989 = _691545, _6994 do
									_691542 = _691542 + 1;
									_6999[_694989] = _691543[_691542];
								end
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691545 = _69101[2];
								_6999[_691545] = _6999[_691545](_6921(_6999, _691545 + 1, _6994));
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_691541 = 13;
							end
							if (_691541 == 7) then
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6973[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[1377 - (1140 + 235)]] = _69101[2 + 1];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691541 = 8;
							end
							if (_691541 == 36) then
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[11 - 8]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[1163 - (160 + 1001)]] = _6973[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								break;
							end
							if (18 == _691541) then
								_69101 = _6989[_6993];
								_691545 = _69101[2];
								_691543, _691544 = _6992(_6999[_691545](_6921(_6999, _691545 + (1 - 0), _69101[3])));
								_6994 = (_691544 + _691545) - 1;
								_691542 = 0;
								for _694992 = _691545, _6994 do
									local _694993 = 0;
									while true do
										if (_694993 == 0) then
											_691542 = _691542 + 1;
											_6999[_694992] = _691543[_691542];
											break;
										end
									end
								end
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691541 = 19;
							end
							if (_691541 == 4) then
								_6999[_69101[2]] = _6973[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1 + 0;
								_691541 = 5;
							end
							if (_691541 == 30) then
								_6999[_69101[2]] = _6973[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2 + 0]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_691541 = 31;
							end
							if (24 == _691541) then
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691545 = _69101[2];
								_691543, _691544 = _6992(_6999[_691545](_6921(_6999, _691545 + 1, _69101[3])));
								_6994 = (_691544 + _691545) - 1;
								_691541 = 25;
							end
							if (_691541 == 34) then
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691545 = _69101[2 + 0];
								_691543, _691544 = _6992(_6999[_691545](_6921(_6999, _691545 + 1, _69101[3])));
								_6994 = (_691544 + _691545) - 1;
								_691542 = 0;
								for _694994 = _691545, _6994 do
									local _694995 = 0;
									while true do
										if (_694995 == 0) then
											_691542 = _691542 + 1;
											_6999[_694994] = _691543[_691542];
											break;
										end
									end
								end
								_691541 = 35;
							end
							if (25 == _691541) then
								_691542 = 0;
								for _694996 = _691545, _6994 do
									local _694997 = 0;
									while true do
										if (_694997 == 0) then
											_691542 = _691542 + (2 - 1);
											_6999[_694996] = _691543[_691542];
											break;
										end
									end
								end
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691545 = _69101[2];
								_6999[_691545] = _6999[_691545](_6921(_6999, _691545 + 1, _6994));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691541 = 26;
							end
							if (_691541 == 14) then
								_69101 = _6989[_6993];
								_6999[_69101[1 + 1]] = _69101[3];
								_6993 = _6993 + (2 - 1);
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_691545 = _69101[2];
								_691541 = 15;
							end
							if (_691541 == 15) then
								_691543, _691544 = _6992(_6999[_691545](_6921(_6999, _691545 + (1 - 0), _69101[3])));
								_6994 = (_691544 + _691545) - (1 + 0);
								_691542 = 0;
								for _694998 = _691545, _6994 do
									_691542 = _691542 + 1;
									_6999[_694998] = _691543[_691542];
								end
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691545 = _69101[691 - (586 + 103)];
								_6999[_691545] = _6999[_691545](_6921(_6999, _691545 + 1, _6994));
								_691541 = 16;
							end
							if (_691541 == 21) then
								_6999[_69101[3 - 1]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691545 = _69101[3 - 1];
								_691543, _691544 = _6992(_6999[_691545](_6921(_6999, _691545 + 1, _69101[3])));
								_6994 = (_691544 + _691545) - 1;
								_691542 = 0;
								for _695001 = _691545, _6994 do
									local _695002 = 0;
									while true do
										if (_695002 == 0) then
											_691542 = _691542 + 1;
											_6999[_695001] = _691543[_691542];
											break;
										end
									end
								end
								_691541 = 22;
							end
							if (_691541 == 35) then
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691545 = _69101[2 + 0];
								_6999[_691545] = _6999[_691545](_6921(_6999, _691545 + 1, _6994));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_691541 = 36;
							end
							if (_691541 == 8) then
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691545 = _69101[2];
								_691543, _691544 = _6992(_6999[_691545](_6921(_6999, _691545 + 1, _69101[3])));
								_6994 = (_691544 + _691545) - 1;
								_691542 = 0;
								for _695003 = _691545, _6994 do
									_691542 = _691542 + 1;
									_6999[_695003] = _691543[_691542];
								end
								_691541 = 9;
							end
							if (_691541 == 6) then
								_691545 = _69101[2];
								_6999[_691545] = _6999[_691545](_6921(_6999, _691545 + 1, _6994));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_691541 = 7;
							end
							if (_691541 == 3) then
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_691541 = 4;
							end
							if (_691541 == 33) then
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6973[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[305 - (115 + 187)];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691541 = 34;
							end
							if (_691541 == 19) then
								_691545 = _69101[1 + 1];
								_6999[_691545] = _6999[_691545](_6921(_6999, _691545 + 1, _6994));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[7 - 4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_691541 = 20;
							end
							if (28 == _691541) then
								_691543, _691544 = _6992(_6999[_691545](_6921(_6999, _691545 + 1, _69101[3])));
								_6994 = (_691544 + _691545) - 1;
								_691542 = 0;
								for _695006 = _691545, _6994 do
									_691542 = _691542 + 1;
									_6999[_695006] = _691543[_691542];
								end
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691545 = _69101[2];
								_6999[_691545] = _6999[_691545](_6921(_6999, _691545 + 1, _6994));
								_691541 = 29;
							end
							if (_691541 == 1) then
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + (316 - (306 + 9));
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + (3 - 2);
								_69101 = _6989[_6993];
								_691545 = _69101[2];
								_691541 = 2;
							end
							if (_691541 == 17) then
								_6999[_69101[2]] = _6973[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[1491 - (1309 + 179)];
								_6993 = _6993 + 1;
								_691541 = 18;
							end
							if (_691541 == 10) then
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6973[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_691541 = 11;
							end
							if (29 == _691541) then
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[1408 - (851 + 554)]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691541 = 30;
							end
							if (_691541 == 32) then
								_691545 = _69101[2];
								_6999[_691545] = _6999[_691545](_6921(_6999, _691545 + 1, _6994));
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_691541 = 33;
							end
							if (20 == _691541) then
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2 + 0]] = _6973[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691541 = 21;
							end
							if (_691541 == 23) then
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[612 - (295 + 314)]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6973[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_691541 = 24;
							end
							if (_691541 == 13) then
								_6999[_69101[2]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6973[_69101[55 - (33 + 19)]];
								_6993 = _6993 + 1;
								_691541 = 14;
							end
							if (_691541 == 2) then
								_691543, _691544 = _6992(_6999[_691545](_6921(_6999, _691545 + 1, _69101[3])));
								_6994 = (_691544 + _691545) - 1;
								_691542 = 0;
								for _695009 = _691545, _6994 do
									local _695010 = 0;
									while true do
										if (_695010 == 0) then
											_691542 = _691542 + 1;
											_6999[_695009] = _691543[_691542];
											break;
										end
									end
								end
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691545 = _69101[2];
								_6999[_691545] = _6999[_691545](_6921(_6999, _691545 + 1, _6994));
								_691541 = 3;
							end
							if (_691541 == 26) then
								_6999[_69101[1964 - (1300 + 662)]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[9 - 6]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6973[_69101[3]];
								_6993 = _6993 + (1756 - (1178 + 577));
								_691541 = 27;
							end
							if (_691541 == 27) then
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2 + 0]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691545 = _69101[5 - 3];
								_691541 = 28;
							end
							if (_691541 == 16) then
								_6993 = _6993 + 1 + 0;
								_69101 = _6989[_6993];
								_6999[_69101[5 - 3]] = _6974[_69101[3]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691541 = 17;
							end
							if (_691541 == 5) then
								_69101 = _6989[_6993];
								_691545 = _69101[2];
								_691543, _691544 = _6992(_6999[_691545](_6921(_6999, _691545 + 1, _69101[3])));
								_6994 = (_691544 + _691545) - 1;
								_691542 = 0 + 0;
								for _695011 = _691545, _6994 do
									_691542 = _691542 + 1;
									_6999[_695011] = _691543[_691542];
								end
								_6993 = _6993 + (2 - 1);
								_69101 = _6989[_6993];
								_691541 = 6;
							end
							if (0 == _691541) then
								_691542 = nil;
								_691543, _691544 = nil;
								_691545 = nil;
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6973[_69101[3]];
								_6993 = _6993 + 1;
								_691541 = 1;
							end
						end
					else
						local _691546 = _69101[2];
						_6999[_691546] = _6999[_691546](_6921(_6999, _691546 + 1, _69101[3]));
					end
				elseif (_69102 <= 222) then
					if (_69102 > 221) then
						local _691548 = 0;
						local _691549;
						local _691550;
						local _691551;
						local _691552;
						local _691553;
						while true do
							if (5 == _691548) then
								_691550, _691551 = _6992(_6999[_691553](_6921(_6999, _691553 + 1, _69101[3])));
								_6994 = (_691551 + _691553) - 1;
								_691549 = 0;
								for _695014 = _691553, _6994 do
									_691549 = _691549 + 1;
									_6999[_695014] = _691550[_691549];
								end
								_691548 = 6;
							end
							if (_691548 == 8) then
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691548 = 9;
							end
							if (_691548 == 9) then
								if _6999[_69101[2]] then
									_6993 = _6993 + 1;
								else
									_6993 = _69101[3];
								end
								break;
							end
							if (_691548 == 6) then
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691553 = _69101[2];
								_6999[_691553] = _6999[_691553](_6921(_6999, _691553 + 1, _6994));
								_691548 = 7;
							end
							if (0 == _691548) then
								_691549 = nil;
								_691550, _691551 = nil;
								_691552 = nil;
								_691553 = nil;
								_691548 = 1;
							end
							if (_691548 == 7) then
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6999[_69101[3]][_69101[4]];
								_6993 = _6993 + 1;
								_691548 = 8;
							end
							if (_691548 == 4) then
								_6999[_69101[2]] = _69101[361 - (237 + 121)];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691553 = _69101[2];
								_691548 = 5;
							end
							if (_691548 == 2) then
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _6973[_69101[5 - 2]];
								_6993 = _6993 + 1;
								_691548 = 3;
							end
							if (_691548 == 1) then
								_691553 = _69101[2 + 0];
								_691552 = _6999[_69101[3]];
								_6999[_691553 + 1 + 0] = _691552;
								_6999[_691553] = _691552[_69101[4]];
								_691548 = 2;
							end
							if (3 == _691548) then
								_69101 = _6989[_6993];
								_6999[_69101[2]] = _69101[3];
								_6993 = _6993 + 1;
								_69101 = _6989[_6993];
								_691548 = 4;
							end
						end
					else
						local _691554 = _69101[2];
						local _691555 = {};
						for _692057 = 1, #_6998 do
							local _692058 = _6998[_692057];
							for _692096 = 897 - (525 + 372), #_692058 do
								local _692097 = _692058[_692096];
								local _692098 = _692097[1];
								local _692099 = _692097[2];
								if ((_692098 == _6999) and (_692099 >= _691554)) then
									_691555[_692099] = _692098[_692099];
									_692097[1] = _691555;
								end
							end
						end
					end
				elseif (_69102 == 223) then
					local _691556;
					local _691557;
					local _691558;
					_6974[_69101[3]] = _6999[_69101[2]];
					_6993 = _6993 + 1;
					_69101 = _6989[_6993];
					_6999[_69101[2]] = _69101[4 - 1];
					_6993 = _6993 + 1;
					_69101 = _6989[_6993];
					_6999[_69101[2]] = _6974[_69101[3]];
					_6993 = _6993 + 1;
					_69101 = _6989[_6993];
					_6999[_69101[2]] = _69101[3];
					_6993 = _6993 + 1;
					_69101 = _6989[_6993];
					_691558 = _69101[2];
					_691557 = _6999[_691558];
					_691556 = _6999[_691558 + 2];
					if (_691556 > 0) then
						if (_691557 > _6999[_691558 + 1]) then
							_6993 = _69101[3];
						else
							_6999[_691558 + 3] = _691557;
						end
					elseif (_691557 < _6999[_691558 + 1]) then
						_6993 = _69101[9 - 6];
					else
						_6999[_691558 + 3] = _691557;
					end
				else
					_6999[_69101[144 - (96 + 46)]][_6999[_69101[3]]] = _6999[_69101[4]];
				end
				_6993 = _6993 + (778 - (643 + 134));
			end
		end; 
	end
	return _6940(_6939(), {}, _6928)(...);
end
return